<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: libvirt | > /dev/null]]></title>
  <link href="http://leoh0.github.io/blog/categories/libvirt/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2017-07-27T02:01:00+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[추가 - edit vagrant box for vagrant-libvirt]]></title>
    <link href="http://leoh0.github.io/blog/2016/09/29/cuga-edit-vagrant-box-for-vagrant-libvirt/"/>
    <updated>2016-09-29T23:39:00+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/09/29/cuga-edit-vagrant-box-for-vagrant-libvirt</id>
    <content type="html"><![CDATA[<h1>copy image and files</h1>

<pre><code class="bash">mkdir -p images
cp ~/.vagrant.d/boxes/${TARGETIMAGE}/0/libvirt/* images/
cd images
</code></pre>

<h1>init</h1>

<pre><code class="bash">apt-get install -qqy lvm2
modprobe nbd
</code></pre>

<h1>attach</h1>

<pre><code class="bash">qemu-nbd -c /dev/nbd0 `pwd`/box.img
vgscan
vgchange -ay
mount /dev/mapper/vagrant--vg-root /mnt
</code></pre>

<h1>bind</h1>

<pre><code class="bash">binds="/dev /dev/pts /proc /sys /run"
for d in $binds; do
  mkdir -p /mnt${d}
  mount --bind ${d} /mnt${d}
done
</code></pre>

<h1>work</h1>

<pre><code class="bash">chroot /mnt bash
# blah blah blah
exit
</code></pre>

<h1>unbind and detach</h1>

<pre><code class="bash">cd /
for d in $(mount | awk '/\/mnt/{print $3}' | sort -r); do
  umount $d
done
vgchange -an vagrant-vg
qemu-nbd -d /dev/nbd0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[containerize openstack]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/containerize-openstack/"/>
    <updated>2015-04-24T01:08:16+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/containerize-openstack</id>
    <content type="html"><![CDATA[<p>docker 바깥으로 process를 낼 수 있는 방법들로 kvm 프로세스를 docker 바깥 host os 에 배치시키는 방법이 가능하네요.  <br/>
실질적으로 docker안에 kvm이 들어가게 된다면 docker process에 vm이 종속적이게 되어 불안정한 구성이 될테지만  <br/>
이런 방식으로 피해 갈 수도 있는 것을 확인했습니다.</p>

<p><img src="/images/containerize-openstack.png" width="1440" height="829" title="containerize-openstack" ></p>

<p>아무튼 사진과 같이 기묘한 형태로 (실제 host os 에는 없는 바이너리가 parent 1 을 물고 process 로 뜨게되는) 관리가 가능합니다.  <br/>
물론 보안 적인 결함에 대해서야 아직 끝도없이 이야기할 주제이겠지만 앞으로의 provisioning의 새로운 가능성에 대해서 관심이 가는건 사실인것 같습니다.</p>

<p>아무튼 열심히 삽질하다보니 kolla에서 이미 하고 있었어서 libvirt 를 containerize 하는데 도움을 받았습니다.</p>

<p><a href="https://github.com/stackforge/kolla">https://github.com/stackforge/kolla</a></p>

<p>우선 저는 ubuntu로 kolla 소스가 아니라 따로 구성해서 실험했습니다.  <br/>
fedora와 ubuntu의 미묘한 차이가 있어서 ubuntu로 구성하려면 약간의 차이가 필요한것 같습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[edit vagrant box for vagrant-libvirt]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt/"/>
    <updated>2015-02-24T13:22:36+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt</id>
    <content type="html"><![CDATA[<h1>check file</h1>

<pre><code class="bash">$ file trusty64_vagrant_box_image.img
trusty64_vagrant_box_image.img: QEMU QCOW Image (unknown version)
</code></pre>

<h1>init</h1>

<pre><code class="bash">apt-get install -qqy lvm2
modprobe nbd
</code></pre>

<h1>attach</h1>

<pre><code class="bash">cd /var/lib/libvirt/images
qemu-nbd -c /dev/nbd0 `pwd`/trusty64_vagrant_box_image.img
vgscan
vgchange -ay
mount /dev/mapper/vagrant--vg-root /mnt
</code></pre>

<h1>detach</h1>

<pre><code class="bash">cd /
umount /mnt
vgchange -an vagrant-vg
qemu-nbd -d /dev/nbd0
</code></pre>
]]></content>
  </entry>
  
</feed>
