<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | > /dev/null]]></title>
  <link href="http://leoh0.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2018-04-07T01:11:19+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[k8s tools for watching log and login to multiple containers]]></title>
    <link href="http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers/"/>
    <updated>2017-07-27T00:58:28+09:00</updated>
    <id>http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers</id>
    <content type="html"><![CDATA[<p>{% img /images/showterm-2017-07-27-01-10-29.png 780 290 %}</p>

<p>k8s 사용하면서 개인 취향에 맞게 작성한 자작 스크립트 몇가지 소개해 드리려고 합니다.</p>

<h1>watching log</h1>

<p>k8s 에서 pod들의 로그 볼일 들이 많다보니 command 일일치다보니 불편했는데 <code>kubetail</code>이란 프로젝트가 있었습니다.  <br/>
덕분에 잘 쓰고 있었는데 인터페이스가 개인취향에 안맞아서 약간 수정해서 쓰고 있습니다.  <br/>
전반적으로 pod 선택 방법의 변경과 비슷한 이름으로 auto tailing 기능을 추가 했습니다.</p>

<p>아래들이 대표적인 기능 입니다.</p>

<ul>
<li><p>선택된것과 같은 pod들을 전체 log tailing 하고 변화가 있을시 auto reload 함  <br/>
(다만 예외적으로 안되는 케이스 들이 아직 있긴 합니다..)</p>

<pre><code class="bash">$ kt
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/df8a9f96e761012d3bb2c">여기</a>를 참고하시면 됩니다.  <br/>
{% img /images/kt.gif 800 %}</li>
</ul>
</li>
<li><p><code>-m</code> 옵션시 자신이 원하는 pod들을 선택해서 log tailing 함. 다만, auto reload는 지원 하지 않음</p>

<pre><code class="bash">$ kt -m
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/f4ab6a8ed080700ece976">여기</a>를 참고하시면 됩니다.  <br/>
{% img /images/ktm.gif 800 %}</li>
</ul>
</li>
<li><p><code>-l</code> 옵션시 선택한 pod의 전체 로그를 본다. fzf를 이용해서 log를 탐색 한다.</p>

<pre><code class="bash">$ kt -l
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/6381c317d2e42920c0227">여기</a>를 참고하시면 됩니다.  <br/>
{% img /images/ktl.gif 800 %}</li>
</ul>
</li>
</ul>


<p>준비물은 아래와 같습니다.</p>

<ul>
<li><p><strong>fzf</strong></p>

<pre><code class="bash">$ brew install fzf
</code></pre></li>
<li><strong>kubectl</strong>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></li>
</ul>
</li>
</ul>


<p>설치 방법은 아래와 같습니다.</p>

<pre><code class="bash">$ brew tap leoh0/kt &amp;&amp; brew install kt
</code></pre>

<p>code는 아래에서 확인 가능합니다.</p>

<p><a href="https://github.com/leoh0/kt">https://github.com/leoh0/kt</a></p>

<h1>login container</h1>

<p>pod들 여러개에 동시에 login(bash, sh등) 하여 shell command를 사용하고 싶어서
기존의 cssh 같은 비슷한 메커니즘으로 스크립트 작성해서 사용하고 있습니다.</p>

<ul>
<li>아래는 사용 영상입니다. 자세한 영상은 <a href="http://showterm.io/c58f9999d3ee6db03aa81">여기</a>를 참고하시면 됩니다.
{% img /images/kl.gif 800 %}</li>
</ul>


<p>설치 방법은 아래와 같이 rc나 profile에 등록해서 사용하시면 됩니다.
<code>bash
curl -s 'https://gist.githubusercontent.com/leoh0/'\
'c47dca1c98f998f0d0884c3560afac54/raw/'\
'1e1e9fb085d2c1a94293ae87e3922519d8342adb/k8s_login.sh' | \
    tee -a ~/.bash_profile &amp;&amp; source ~/.bash_profile
</code></p>

<p>아래는 전체 소스입니다.
<a href="https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54">https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54</a>
&#8220;` bash
function kl() {
  chkcommand() {
    command -v $1 >/dev/null 2>&amp;1 || { echo >&amp;2 &ldquo;Plz install $1 first. Aborting.&rdquo;; return 1; }
  }
  chkcommand fzf || return 1
  chkcommand tmux || return 1
  chkcommand kubectl || return 1</p>

<p>  pods=$(kubectl get pods &ndash;all-namespaces | sed &lsquo;1d&rsquo; | fzf -x -m -e +s &ndash;reverse &ndash;bind=left:page-up,right:page-down &ndash;no-mouse | awk &lsquo;{print $1&#8221;,&ldquo;$2}&rsquo;);
  if [[ $pods != &rdquo;&ldquo; ]]; then
      init=&#8221;true&rdquo;
      tmuxname=k8s-ns-$(date +%s)
      tmux kill-session -t $tmuxname > /dev/null 2> /dev/null || true
      while read line ;do
        NS=$(echo $line | cut -d&#8217;,&lsquo; -f1)
        NAME=$(echo $line | cut -d&rsquo;,&lsquo; -f2)
        connect=&ldquo;kubectl exec -ti $NAME -n $NS &ndash; bash || kubectl exec -ti $NAME -n $NS &ndash; sh &rdquo;
        tmux new-session -d -s $tmuxname &ldquo;export KUBECONFIG=${KUBECONFIG}; $connect&rdquo;
        if [ &ldquo;${init}&rdquo; == &ldquo;true&rdquo; ]; then
          if (( $(tmux ls 2> /dev/null | grep &ldquo;${tmuxname}&rdquo; | wc -l) > 0 )) ; then
            init=&ldquo;false&rdquo;
          fi
        else
          tmux split-window -t &ldquo;${tmuxname}&rdquo; &ldquo;${connect}&rdquo; &amp;&amp; \
          tmux select-layout -t &ldquo;${tmuxname}&rdquo; &ldquo;tiled&rdquo;
        fi
      done &lt;&lt;&lt; &ldquo;$pods&rdquo;
      tmux set-window-option -t &ldquo;${tmuxname}&rdquo; synchronize-panes on
      tmux -2 a -t $tmuxname
  fi
}
&#8220;`</p>

<p>참고: <a href="https://github.com/johanhaleby/kubetail">original kubetail</a></p>
]]></content>
  </entry>
  
</feed>
