<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Libvirt on &gt; /dev/null</title>
    <link>https://leoh0.github.io/tags/libvirt/</link>
    <description>Recent content in Libvirt on &gt; /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Sep 2016 23:39:00 +0900</lastBuildDate>
    
	<atom:link href="https://leoh0.github.io/tags/libvirt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>추가 - edit vagrant box for vagrant-libvirt</title>
      <link>https://leoh0.github.io/post/2016-09-29-cuga-edit-vagrant-box-for-vagrant-libvirt/</link>
      <pubDate>Thu, 29 Sep 2016 23:39:00 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2016-09-29-cuga-edit-vagrant-box-for-vagrant-libvirt/</guid>
      <description> copy image and files mkdir -p images cp ~/.vagrant.d/boxes/${TARGETIMAGE}/0/libvirt/* images/ cd images  init apt-get install -qqy lvm2 modprobe nbd  attach qemu-nbd -c /dev/nbd0 `pwd`/box.img vgscan vgchange -ay mount /dev/mapper/vagrant--vg-root /mnt  bind binds=&amp;quot;/dev /dev/pts /proc /sys /run&amp;quot; for d in $binds; do mkdir -p /mnt${d} mount --bind ${d} /mnt${d} done  work chroot /mnt bash # blah blah blah exit  unbind and detach cd / for d in $(mount | awk &#39;/\/mnt/{print $3}&#39; | sort -r); do umount $d done vgchange -an vagrant-vg qemu-nbd -d /dev/nbd0  </description>
    </item>
    
    <item>
      <title>containerize openstack</title>
      <link>https://leoh0.github.io/post/2015-04-24-containerize-openstack/</link>
      <pubDate>Fri, 24 Apr 2015 01:08:16 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2015-04-24-containerize-openstack/</guid>
      <description>docker 바깥으로 process를 낼 수 있는 방법들로 kvm 프로세스를 docker 바깥 host os 에 배치시키는 방법이 가능하네요.
실질적으로 docker안에 kvm이 들어가게 된다면 docker process에 vm이 종속적이게 되어 불안정한 구성이 될테지만
이런 방식으로 피해 갈 수도 있는 것을 확인했습니다.
  containerize-openstack   아무튼 사진과 같이 기묘한 형태로 (실제 host os 에는 없는 바이너리가 parent 1 을 물고 process 로 뜨게되는) 관리가 가능합니다.
물론 보안 적인 결함에 대해서야 아직 끝도없이 이야기할 주제이겠지만 앞으로의 provisioning의 새로운 가능성에 대해서 관심이 가는건 사실인것 같습니다.</description>
    </item>
    
    <item>
      <title>edit vagrant box for vagrant-libvirt</title>
      <link>https://leoh0.github.io/post/2015-02-24-edit-vagrant-box-for-vagrant-libvirt/</link>
      <pubDate>Tue, 24 Feb 2015 13:22:36 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2015-02-24-edit-vagrant-box-for-vagrant-libvirt/</guid>
      <description> check file $ file trusty64_vagrant_box_image.img trusty64_vagrant_box_image.img: QEMU QCOW Image (unknown version)  init apt-get install -qqy lvm2 modprobe nbd  attach cd /var/lib/libvirt/images qemu-nbd -c /dev/nbd0 `pwd`/trusty64_vagrant_box_image.img vgscan vgchange -ay mount /dev/mapper/vagrant--vg-root /mnt  detach cd / umount /mnt vgchange -an vagrant-vg qemu-nbd -d /dev/nbd0  </description>
    </item>
    
  </channel>
</rss>