<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openstack | > /dev/null]]></title>
  <link href="http://leoh0.github.io/blog/categories/openstack/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2018-05-21T02:28:36+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install openstack on macos Sierra using kolla-kubernetes with xhyve]]></title>
    <link href="http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve/"/>
    <updated>2016-10-13T00:02:06+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve</id>
    <content type="html"><![CDATA[<p><a href="http://showterm.io/404f651b005c52298bc9f"><img src="/images/2016-10-13_00-04-57.jpg" width="924" height="533"></a>
<a href="http://showterm.io/404f651b005c52298bc9f">클릭해서 과정 보기</a></p>

<p><code>kubernetes</code> 로 <code>openstack mitaka</code>를 설치해 봤습니다.</p>

<p>위의 이미지를 클릭하면 전과정을 보실 수 있습니다. 참고하시면 좋을 것 같습니다.</p>

<p>대략 31분 정도 걸려서 minikube 구성 부터 전체 셋업 및 vm 2개 띄워서 로그인 테스트 합니다.</p>

<p>그리고 저는 <code>macos Sierra</code> 에서 <code>xhyve</code> 로 8G 머신을 만들어서 사용을 했습니다.  <br/>
linux 머신이 있으면 kvm을 이용하시는 것도 좋을것 같습니다.  <br/>
windows 환경에선 xhyve 외에도 virtual box 등을 이용하셔도 좋을 것 같습니다.</p>

<p>셋업할때 <code>kubernetes-cli</code> 는 <code>1.3.6</code> 버전과 <code>minikube</code> 는 <code>0.11.0</code> 버전을 이용합니다.</p>

<p>앞서 말한 2가지 버전만 잘 지키고 bootstraping 이나 container가 올라올때 잘 기다리고 진행하면 크게 어렵게 진행 하실 수 있습니다.</p>

<p>자세한건 <a href="https://github.com/openstack/kolla-kubernetes/blob/master/doc/source/minikube-quickstart.rst">kolla-kubernetes의 도큐먼트</a>를 참고하시면 도움이 되실 겁니다.</p>

<p>kolla-kubernetes 를 이용한 방법으로 기존 kolla 와 비슷한 플로우로 진행합니다.  <br/>
아무튼 그냥 devstack 처럼 테스트 용으로 보시면 좋을겁니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[추가 - Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..]]></title>
    <link href="http://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/"/>
    <updated>2016-09-29T23:30:20+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot</id>
    <content type="html"><![CDATA[<p>예전에 아래글을 그냥 balancing 을 위해 id 를 잘 분배하자 라는식으로 결론 냈지만.</p>

<p><a href="http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/">Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..</a></p>

<p>user의 token리스트를 관리하지 않으면 부담은 훨씬 줄어든다.</p>

<p>물론 user의 password 변경 등으로 기존 모든 token을 revoke 시키는 경우때문에 이런 user 단위로 token리스트를 관리해야 하지만  <br/>
그걸 포기하면 그냥 코드 몇줄 추가로 간단하게 정리할 수 있다.</p>

<pre><code class="diff">diff --git a/keystone/token/persistence/backends/memcache.py b/keystone/token/persistence/backends/memcache.py
index e6b0fca..3f0de68 100644
--- a/keystone/token/persistence/backends/memcache.py
+++ b/keystone/token/persistence/backends/memcache.py
@@ -37,3 +37,6 @@ class Token(kvs.Token):
         kwargs['memcached_expire_time'] = CONF.token.expiration
         kwargs['url'] = CONF.memcache.servers
         super(Token, self).__init__(*args, **kwargs)
+
+    def _update_user_token_list(self, user_key, token_id, expires_isotime_str):
+        return []
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Management multiple openstack cluster with automatic openstack rc file loader script]]></title>
    <link href="http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script/"/>
    <updated>2016-05-10T01:08:56+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script</id>
    <content type="html"><![CDATA[<p><img src="/images/2016-05-10_03-40-27.jpg" width="368" height="272"></p>

<h2>openstack rc file</h2>

<p>여러 openstack 클러스터를 관리하려면 <a href="http://docs.openstack.org/user-guide/common/cli_set_environment_variables_using_openstack_rc.html">openstack rc file</a>(이하 openrc file)을 잘 관리해야한다.  <br/>
이런 관리를 위해서 <a href="http://supernova.readthedocs.io/en/latest/">supernova</a> 와 같은 rc file 관리해주는 툴들을 사용하게 된다.  <br/>
(개인적으로 비슷한 시기에 bash로 비슷한 아이디어로 구현해서 써서 사용하진 않았지만 이러한 관리 툴이 필요하다면 supernova를 참고하면 좋을것같다.)  <br/>
이런 툴들은 기본적으로 shell에 환경변수를 추가하는 방식이기에 폴더가 변경된다고 자동으로 로딩된다기 보다는  <br/>
유저가 어떤 rc file을 사용할지 로딩하여(트리거링하여) 써야한다.</p>

<h2>openstack rc file (normal version)</h2>

<p>예를 들면 아래는 일반적으로 사용하는 익숙 한 예이다.</p>

<pre><code class="bash">al@MacBook-Pro-2:~
$ source stage_v1_openrc

al@MacBook-Pro-2:~
$ env | grep OS_
OS_SERVICE_TOKEN=token4service4v1
OS_REGION_NAME=stage-v1
OS_SERVICE_ENDPOINT=https://stage-v1.example.com/v2.0
OS_PASSWORD=password4admin4v1
OS_AUTH_URL=https://stage-v1.example.com/v2.0/
OS_USERNAME=admin-v1
OS_TENANT_NAME=admin-v1

al@MacBook-Pro-2:~
$ source stage_v2_openrc

al@MacBook-Pro-2:~
$ env | grep OS_
OS_SERVICE_TOKEN=token4service4v2
OS_REGION_NAME=stage-v2
OS_SERVICE_ENDPOINT=https://stage-v2.example.com/v2.0
OS_PASSWORD=password4admin4v2
OS_AUTH_URL=https://stage-v2.example.com/v2.0/
OS_USERNAME=admin-v2
OS_TENANT_NAME=admin-v2
</code></pre>

<p>위와 같이 <code>source</code>(혹은 <code>.</code>) 을 이용해서 미리 기록해둔 파일(stage_v1_openrc, stage_v2_openrc)를 export 해서 환경변수에 기록해서 사용한다.  <br/>
이런방식은 어째뜬 파일을 관리해야 하고 파일을 항상 사용해야 하기때문에 다른 디렉토리에서 사용하기에 불편함이 있다.</p>

<h2>openstack rc file (advanced version)</h2>

<p>그래서 내가 만들었던 툴은 아래와 같이 사용했다.</p>

<pre><code class="bash">al@MacBook-Pro-2:~ O:stage_v2
$ rcvm stage_v1
OPENRC: stage_v1

al@MacBook-Pro-2:~ O:stage_v1
$ env | grep OS_
OS_SERVICE_TOKEN=token4service4v1
OS_REGION_NAME=stage-v1
OS_SERVICE_ENDPOINT=https://stage-v1.example.com/v2.0
OS_PASSWORD=password4admin4v1
OS_AUTH_URL=https://stage-v1.example.com/v2.0/
OS_USERNAME=admin-v1
OS_TENANT_NAME=admin-v1

al@MacBook-Pro-2:~ O:stage_v1
$ rcvm stage_v2
OPENRC: stage_v2

al@MacBook-Pro-2:~ O:stage_v2
$ env | grep OS_
OS_SERVICE_TOKEN=token4service4v2
OS_REGION_NAME=stage-v2
OS_SERVICE_ENDPOINT=https://stage-v2.example.com/v2.0
OS_PASSWORD=password4admin4v2
OS_AUTH_URL=https://stage-v2.example.com/v2.0/
OS_USERNAME=admin-v2
OS_TENANT_NAME=admin-v2
</code></pre>

<p>사실 source 같은 커맨드와 지정한 파일을 사용하는거 외에 사용방식은 비슷하다.  <br/>
<code>&lt;커맨드&gt; &lt;구성&gt;</code> 이런 호출을 통해서 rc를 변경한다. (위 보다 디렉토리 제약과 파일 관리의 부담이 조금 줄었다.)</p>

<h2>기존 방법의 불편한 점</h2>

<p>위의 두가지 방법들은 한 클러스터를 집중적으로 관리할때 편리하다.</p>

<p>여기서 만약 다른 클러스터 작업이 필요하면 대략 아래 같은 방법의 옵션들을 사용하게 된다.</p>

<pre><code>1. shell을 추가적으로 띄워서 다른 환경변수를 로딩한다.
2. supernova의 사용법중 하나인매번 `supernova &lt;environment&gt; &lt;command&gt;` 와 같은 형태로 환경변수를 로딩하여 호출해야 한다.
</code></pre>

<p>하지만 이렇게 관리하다보면 여러 클러스터에 간단한 작업을 할때마다 여러창을 띄우던지 아니면 의식적으로 환경을 변경하면서 작업해야한다.</p>

<p><em>그래서 아래 같은 방법을 생각하게 되었다.</em></p>

<h2>디렉토리 기반 openrc 자동 로딩 방법</h2>

<p>그래서 생각한 아이디어는 git 이나 chef 등과 같이 parent directory 에 특정 구성 파일이 있으면  <br/>
이하 디렉토리에서 해당 환경을 자동으로 로딩할 수 있으면 편하겠다고 생각했다.  <br/>
가장 간단한 방법은 아마 nova 와 같은 커맨드에 <code>pwd</code> 등을 확인해서 파일을 로딩하는식으로 구현할까 했었다.  <br/>
하지만 이건 새로운 커맨드가 나올때마다 등 관리가 잘 안될게 뻔하기 때문에 이런 방법을 쓰지않고 있었다.</p>

<p>그러던 와중에 <a href="https://github.com/yyuu/pyenv">pyenv</a>를 잘 쓰고 있었는데 여기에서 python command 들을 사용할때 hook을 걸 수 있는것을 알았다.  <br/>
그리고 해당 hook에 부모 디렉토리에 원하는 파일(openrc)이 있으면 로딩하는 식으로 구성하니 아주 말끔히 원하는식으로 작동하게 되었다.</p>

<p>hook 위치는 아래를 참고하면 된다.</p>

<p>mac에서 brew 로 pyenv를 설치했다면 아래와 같다.</p>

<pre><code class="bash"># mac os x
$ cat $(brew --prefix pyenv)/pyenv.d/exec/openstack.bash
</code></pre>

<p>ubuntu는 아래와 같다. (non root user시)</p>

<pre><code class="bash"># ubuntu
$ cat ~/.pyenv/pyenv.d/exec/openstack.bash
</code></pre>

<p>해당 파일내용은 아래와 같다.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">openstack_root</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span> -P 2&gt;/dev/null <span class="o">||</span> <span class="nb">command pwd</span><span class="k">)</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> ! -e <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$openstack_root</span>/openrc<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">openstack_root</span><span class="o">=</span><span class="k">${</span><span class="nv">openstack_root</span><span class="p">%/*</span><span class="k">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$openstack_root</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">==</span> <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">break</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$openstack_root</span><span class="p">&amp;</span>rdquo<span class="p">;</span> !<span class="o">=</span> <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">while</span> <span class="nb">read </span>var<span class="p">;</span> <span class="k">do</span> <span class="nb">unset</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$var</span><span class="p">&amp;</span>rdquo<span class="p">;;</span> <span class="k">done</span><span class="p">&amp;</span>lt<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>env <span class="p">|</span> awk -F<span class="o">=</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>/^OS_/<span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  . <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$openstack_root</span>/openrc<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>약간에 설명을 하자면 해당 커맨드를 실행하는 해당 디렉토리에 <code>openrc</code> 파일이 있으면 <code>OS_</code>로 시작하는 모든 환경 변수를 초기화(unset)하고 openrc 를 export 한다.  <br/>
만약 해당 디렉토리에 해당 파일(openrc)가 없으면 상위 디렉토리가 존재할때까지 recursive 하게 올라간다.</p>

<h2>디렉토리 기반 openrc 자동 로딩 데모</h2>

<p>아래는 데모이다.  <br/>
천천히 보려면 이 링크에서 커맨드를 확인하면서 볼 수 있다. (<a href="http://showterm.io/112d21ab5f83d5843f7b2">http://showterm.io/112d21ab5f83d5843f7b2</a>)
<div class="embed-video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/r_Hgitz0Tn0" frameborder="0" allowfullscreen></iframe></div></p>

<p>중간에 보이는바와 같이 <code>env | grep OS_</code> 로 환경변수가 비어 있으나  <br/>
<code>python</code> 커맨드 실행시 안에 환경변수들이 채워져 있는 것을 확인 할 수 있다.  <br/>
아래 커맨드로 python 실행시 해당 환경변수중 <code>OS_</code> 시작하는 변수들의 값을 출력해 본것이다.</p>

<pre><code class="bash">python -c "import os; print('\n'.join([str(\"%s=%s\" %(i,j)) for i,j in os.environ.iteritems() if i.startswith('OS_')]))"
</code></pre>

<p>이런식으로 앞서 말한 방법과 함께 두가지 방법을 이용하면 보다 쾌적한 클러스터 관리를 할 수 있게 된다.</p>

<h2>DIY</h2>

<p>아래 스크립트를 이용하면 ubuntu에서 테스트 설치해서 테스트 가능하다.</p>

<pre><code class="bash install_openrc_changer.sh https://gist.github.com/leoh0/21d61d3bebe394d278e6f18d5465415d link">#!/usr/bin/env bash

sudo apt-get install -qqy git make build-essential libssl-dev zlib1g-dev libbz2-dev \
  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
  libncursesw5-dev libxml2-dev libxslt1-dev libffi-dev

curl -sL https://raw.github.com/yyuu/pyenv-installer/master/bin/pyenv-installer | \
  bash

export PATH="~/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

echo 'export PATH="~/.pyenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bashrc

PYTHON_CONFIGURE_OPTS="--enable-unicode=ucs4" ~/.pyenv/bin/pyenv install 2.7.9

~/.pyenv/bin/pyenv global 2.7.9

cat &lt;&lt; OPENRC_CHOOSER &gt; ~/.pyenv/pyenv.d/exec/openstack.bash
openstack_root=\$(pwd -P 2&gt;/dev/null || command pwd)
while [ ! -e "\$openstack_root/openrc" ];
do
  openstack_root=\${openstack_root%/*}
  if [ "\$openstack_root" == "" ]; then
    break
  fi
done

if [ "\$openstack_root" != "" ]; then
  while read var; do unset "\$var"; done&lt; &lt;(env | awk -F= '/^OS_/{print \$1}')

  . "\$openstack_root/openrc"
fi
OPENRC_CHOOSER

echo 'need relogin'
exit
</code></pre>

<h2>결론</h2>

<p>pyenv + 스크립트 한개 = 디렉토리 기반 자동 openrc file loader 제작 가능</p>

<h3>ps</h3>

<p>더 좋은 방법은 언제든지 환영합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keystone에서 token backend로 사용하는 memcached가 unbalanced되었다..]]></title>
    <link href="http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/"/>
    <updated>2016-04-27T00:00:45+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot</id>
    <content type="html"><![CDATA[<p>해당 클러스터는 kilo 버전으로 구성 되었었고 token 을 memcached 에 저장하고 있었다.  <br/>
또한 kilo 부터 dogpile.cache 는 거의 고정으로 들어가 있가 있어서 해당 모듈을 사용했다.  <br/>
이런 상황을 디버깅 했던 경험을 정리해 본다.</p>

<p>아래는 문제가 되었던 memcached host의 in/out bound 그래프이다.  <br/>
수치는 가려서 스케일만 감으로 볼 수 있게 남겼다.</p>

<p><strong>A 서버</strong>
<img src="/images/2016-04-26_23-50-30.png" width="508" height="122" title="A 서버" ></p>

<p><strong>B 서버</strong>
<img src="/images/2016-04-26_23-50-41.png" width="499" height="122" title="B 서버" ></p>

<p>최초엔 keystone과 memcached connection 이 unbalance 할것이라고 생각했으나 그런 정황은 없었다.    (connection 개수가 일정) 그리고 특별히 keystone 로그에도 별다른 문제가 보이지 않았다.  <br/>
memcache key 개수는 심지어 <strong>A 서버</strong>가 많았다.</p>

<p>이 외에도 온갖 삽질을 했지만 관련이 없었다.  <br/>
그 후 결국 아래와 같은 방법으로 디버깅 할 수 있었다.</p>

<p>각 호스트에서 아래 같이 memcache slab id 별로 dump를 떠보니 <code>bf81985d70a6416897edbade7a8bfc0a5a579af4</code> 와 같이 유독 큰 (578966 b) 키가 <strong>B 서버</strong>에만 존재 하고 있었다.</p>

<p>대부분의 token 데이터는 <code>3f786850e387550fdab836ed7e6dc881de23001b</code> 정도와 같이 PKI가 아닌 UUID token data여서 10000 b 정도를 구성하고 있었기 때문에 <code>크기</code>가 더 눈에 띈다.</p>

<pre><code>$ for i in $(echo 'stats items' | nc localhost 11211 | cut -d':' -f2 | sort -u | grep -v END); do
    echo "stats cachedump $i 1" | nc localhost 11211
done
...
ITEM 3f786850e387550fdab836ed7e6dc881de23001b [11651 b; 1461686308 s]
END
ITEM 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 [578966 b; 1461688011 s]
END
...
</code></pre>

<p>그렇다면 이 키를 열어 보면 아래와 같다.  <br/>
( 참고로 아래 커맨드를 쓰기위해선 <code>dogpile.cache</code> 가 인스톨 되어 있어야 한다. )</p>

<pre><code>$ echo get 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 | nc localhost 11211 | python -c '
import sys
import cPickle
import json
try:
    data=cPickle.load(sys.stdin)
    print json.dumps(data)
except (cPickle.UnpicklingError, EOFError):
    print ""
' | python -mjson.tool
[
    [
        [
            "386c0e0a01bb4069904d9c11771516a2",
            "2016-04-26T15:41:25.000000Z"
        ],
        [
            "9ba06233d0894aa4a06d4302800035c1",
            "2016-04-26T15:41:24.000000Z"
        ],
        [
            "1510940842f943b798f4bb9f7964aa67",
            "2016-04-26T15:41:24.000000Z"
        ],

        ...

        [
            "d57b2946174c4a4391496a7f9af7e0c5",
            "2016-04-26T16:41:18.000000Z"
        ]
    ],
    {
        "ct": 1461685284.976144,
        "v": 1
    }
]
</code></pre>

<p>위와 같이 되어 있고 알고 보면 특정 토큰들과 그 토큰이 issue 된 시간이 적혀 있는 <a href="https://github.com/openstack/keystone/blob/stable/kilo/keystone/token/persistence/backends/kvs.py#L155-L188">리스트</a> 이다.  <br/>
이 키의 리스트는 유저별로 token의 expire time을 관리하는 값으로 해당 user에게 token이 발급 되거나 expire 될때마다 해당 리스트를 memcache로 부터 가져와서(<code>get</code>) 다시 업로드(<code>set</code>) 한다.  <br/>
그렇기 때문에 해당 키값이 결국 유저와 관계 있다는 것을 추측할 수 있었다.</p>

<p>예를 들어 아래 처럼 특정 유저를 본다면 아래 처럼 <code>id</code>를 갖고 있을 것이다.</p>

<pre><code>$ openstack user show ceilometer
+----------+----------------------------------+
| Field    | Value                            |
+----------+----------------------------------+
| enabled  | True                             |
| id       | eef939600bc111e69aeb57d4fa849231 |
| name     | ceilometer                       |
| username | ceilometer                       |
+----------+----------------------------------+
</code></pre>

<p>eef939600bc111e69aeb57d4fa849231 이값은 아래와 같이 prefix가 붙고 hash 되서 key 값으로 사용된다.</p>

<pre><code class="">$ echo -n 'usertokens-eef939600bc111e69aeb57d4fa849231' | sha1sum
6e49b86a7502dae881f3b9466ecbdfa4743c7eb9  -
</code></pre>

<p>즉, <code>6e49b86a7502dae881f3b9466ecbdfa4743c7eb9</code>은 가 key이 기때문에 위의 토큰 리스트는 ceilometer의 토큰 리스트인걸 알 수 있다.</p>

<p>마지막으로 아래와 같이 계산해 보면 어떤 멤캐쉬에 들어갈 지 알수 있다. (<a href="https://github.com/linsomniac/python-memcached/blob/master/memcache.py#L63-L66">cmemcache_hash</a> 참고)  <br/>
여기에서는 <code>3065</code> 가 나왔기 때문에 멤캐쉬 서버가 두대이면 두번째(<code>3016%2=1</code>) 서버로 들어가게 된다.</p>

<pre><code class="">$ echo -n '6e49b86a7502dae881f3b9466ecbdfa4743c7eb9' | python -c '
import sys,binascii
print (
    (((binascii.crc32(sys.stdin.read()) &amp; 0xffffffff)
       &gt;&gt; 16) &amp; 0x7fff) or 1)
'
3065
</code></pre>

<p>나의 케이스는 불운 하게도 이런 많은 토큰을 같은 유저(ceilometer, neutron, nova 등)가 전부 해쉬값이 홀수가 나와서 한 memcached host에 할당되었고, 이때문에 한쪽으로 skew 가 있었다.</p>

<p>이런걸 피할려면 결국 memcached 개수를 늘이던가 토큰이 많은 유저의 uuid를 분배시킬 수 있도록 해야 할것같다.
물론 저런 거대한 토큰 리스트를 관리 안하는 것이 더 나아 보이지만 이 코드는 현재 master(mitaka 이후)까지도 유지되어 있는 상태이다.</p>

<p>우리도 ceilometer 를 쓰기 전까지는 이런 문제가 없었으나 ceilometer를 추가하면서 문제가 발생하기 시작했다.  <br/>
아무래도 ceilometer 상위 버전쪽에서는 토큰의 재활용을 높이는 부분들이 있어야 할것이다.</p>

<p>사족으로 토큰이 어떤 내용을 담고 있는지는 아래 같은 스크립트로 찾으면 편하다.</p>

<pre><code>MEMCACHES='serverA serverB'
for h in $MEMCACHES; do
  echo $h
  sha=$(echo -n "token-$1" | sha1sum | cut -d' ' -f1)
  echo get $sha | nc $h 11211 | python -c '
import sys
import cPickle
import json
try:
    data=cPickle.load(sys.stdin)
    data[0]["expires"] = data[0]["expires"].strftime("%Y-%m-%d %H:%M:%S")
    print json.dumps(data[0])
except (cPickle.UnpicklingError, EOFError):
    print ''
' | python -mjson.tool
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[containerize openstack]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/containerize-openstack/"/>
    <updated>2015-04-24T01:08:16+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/containerize-openstack</id>
    <content type="html"><![CDATA[<p>docker 바깥으로 process를 낼 수 있는 방법들로 kvm 프로세스를 docker 바깥 host os 에 배치시키는 방법이 가능하네요.  <br/>
실질적으로 docker안에 kvm이 들어가게 된다면 docker process에 vm이 종속적이게 되어 불안정한 구성이 될테지만  <br/>
이런 방식으로 피해 갈 수도 있는 것을 확인했습니다.</p>

<p><img src="/images/containerize-openstack.png" width="1440" height="829" title="containerize-openstack" ></p>

<p>아무튼 사진과 같이 기묘한 형태로 (실제 host os 에는 없는 바이너리가 parent 1 을 물고 process 로 뜨게되는) 관리가 가능합니다.  <br/>
물론 보안 적인 결함에 대해서야 아직 끝도없이 이야기할 주제이겠지만 앞으로의 provisioning의 새로운 가능성에 대해서 관심이 가는건 사실인것 같습니다.</p>

<p>아무튼 열심히 삽질하다보니 kolla에서 이미 하고 있었어서 libvirt 를 containerize 하는데 도움을 받았습니다.</p>

<p><a href="https://github.com/stackforge/kolla">https://github.com/stackforge/kolla</a></p>

<p>우선 저는 ubuntu로 kolla 소스가 아니라 따로 구성해서 실험했습니다.  <br/>
fedora와 ubuntu의 미묘한 차이가 있어서 ubuntu로 구성하려면 약간의 차이가 필요한것 같습니다.</p>
]]></content>
  </entry>
  
</feed>
