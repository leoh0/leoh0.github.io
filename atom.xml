<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[> /dev/null]]></title>
  <link href="http://leoh0.github.io/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2018-05-21T02:28:36+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[immutable kubernetes by linuxkit]]></title>
    <link href="http://leoh0.github.io/blog/2018/05/21/immutable-kubernetes/"/>
    <updated>2018-05-21T00:55:10+09:00</updated>
    <id>http://leoh0.github.io/blog/2018/05/21/immutable-kubernetes</id>
    <content type="html"><![CDATA[<div style="text-align:center"><img align="center" src="http://leoh0.github.io/images/lk-k8s.png" alt="linuxkit with kubernetes"></img></div>


<blockquote><p>&hellip;
As a developer and sometimes system administrator, one of the scariest things I ever encounter is a server that’s been running for ages which has seen multiple upgrades of system and application software.
&hellip;
Need to upgrade? No problem. Build a new, upgraded system and throw the old one away. New app revision? Same thing. Build a server (or image) with a new revision and throw away the old ones.
&hellip;</p></blockquote>

<p>Link <a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components - Chad Fowler</a></p>

<p>2013년 해당 글을 읽었을때만 해도 과연 언제 이런게 가능할까 고민 했었던 기억이 난다. cloud를 위한 linux custom 배포판 등은 <a href="http://crowbar.github.io/">crowbar</a>과 같은 프로젝트들에서 진행이 되고 있었으나 container가 아닌 이상은 이런 하이퍼바이저들을 지속적으로 교체하기엔 큰 부담이 있었다.</p>

<p>컨테이너 기술이 발전하며 이런 immutable한 이미지를 만들기 위한 여러가지 방법론들이 있었으나 개인적인 취향이나 상황에 맞게 쓸만하지 못했으나 최근 시간이 남아서 새롭게 조사하다 linuxkit이 많은 안정화를 가져온것을 확인해서 삽질을 시작했다.</p>

<h1>linuxkit</h1>

<p><img src="http://www.adelzaalouk.me/assets/linuxkit_post//linuxkit.png" alt="linuxkit" />
FROM <a href="http://www.adelzaalouk.me/2017/moby-linuxkit/">Demystifying Moby: From OCI to Linuxkit</a></p>

<p><strong><a href="https://github.com/linuxkit/linuxkit">linuxkit</a></strong> 은 아주 간단히 말해서 컨테이너를 위한 커스텀 리눅스 배포판을 만들고, 배포하고, 실행하기 위한 툴이다.</p>

<p>단도직입적으로 linuxkit을 선호해서 사용하고 하는 이유는 다음과 같다.</p>

<ul>
<li>블럭을 쌓는것처럼 kernel 부터 모두 <code>docker image</code>이다.</li>
<li>한가지 <code>yaml</code> 작성으로 로컬 하이퍼바이저(qemu, xhyve, &hellip;), 클라우드(gcp, aws, &hellip;), 베어마탈을 위한 Pxe들을 지원 가능하다.</li>
<li><code>immutable</code>한 이미지 이다.</li>
<li>내가 설정한 것외에는 <code>아무것도 존재 하지 않아서</code> 보안적으로 뛰어나다.</li>
</ul>


<p>물론 이런 장점은 이런 단점으로 볼 수도 있다.</p>

<ul>
<li>블럭을 쌓는거에따라 조합이 L * M * N 과 같이 늘어나면서 안되는 경우의 수가 많아 테스트가 중요해진다.</li>
<li>한가지 yaml으로 모든걸 지원하기 위해 지원하는 플랫폼에 대한 코드의 준비나 테스트가 필요하다.</li>
<li>immutable 하다고 해도 외부 요인이 있는한 (eg. 컨테이너 이미지 다운로드) 문제가 생길 가능성은 충분히 남아 있다.</li>
<li>이미지가 배포된뒤에 디버깅 할 수 있는 수단이 아주 제한적이다.</li>
</ul>


<p>간단한 예제들이 많이 있으니 직접 돌려보면 이해가 쉬울 것 같다.</p>

<h3>kubernetes를 좀 더 쉽게 관리하려면</h3>

<div style="text-align:center"><img align="center" src="http://leoh0.github.io/images/module_01_cluster.svg" alt="kubernetes"></img></div>


<p>From <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-intro/">Using Minikube to Create a Cluster
</a></p>

<p>kubernetes를 관리한다고 생각하면 수많은 오퍼레이션을 생각하게 되지만 만약 배포를 간단하게 만든다면(eg. golden image, linuxkit 등) 생각보다 많은 어려운 작업들을 심플하게 만들 수 있다. 예를 들면 다음과 같다.</p>

<h4>전통적인 kubernetes upgrade 방법</h4>

<p>예를 들어서 <a href="https://kubernetes.io/docs/tasks/administer-cluster/upgrade-downgrade/kubeadm-upgrade-1-9/">kubernetes upgrade</a>는 크게 2가지로 이루어져 있다.</p>

<ol>
<li><code>control plane(apiserver, controller manager, scheduler)</code> upgrade

<ul>
<li><code>kubeadm</code>같은 툴을 사용하지 않고 master HA해서 사용하게 된다면 결국 master노드 하나씩 drain 이후 static pod들의 manifest를 수정해서 업그레이드 한후 다시 투입(uncordon) 시킨다.</li>
</ul>
</li>
<li><code>node agent(kubelet)</code> upgrade

<ul>
<li>drain 이후 kubelet version upgrade 이후 다시 노드를 투입(uncordon)해야 한다.</li>
</ul>
</li>
</ol>


<p>위와 같은 작업을 하게되면 새로추가되는 노드는 필요없지만 <code>migration 비용이 크고</code>, <code>작업이 길어지고</code>, <code>롤백이 힘들어지고</code>, <code>과거로부터 지속된 업그레이드로 인한 문제(A-&gt;B-&gt;C 로 업그레이드 한것과 B-&gt;C 만 업그레이드한것이 다른 경우)</code> 등에서 자유롭지 못하다.</p>

<h4>노드 추가를 통한 kubernetes upgrade 방법</h4>

<ol>
<li><p><code>control plane(apiserver, controller manager, scheduler)</code> upgrade</p>

<ul>
<li>control plane은 새로운 static pod이 있는 master node를 추가한 뒤 과거 버전의 master node를 제거(drain) 하는 식으로 업그레이드가 가능하다.</li>
</ul>
</li>
<li><p><code>node agent(kubelet)</code> upgrade</p>

<ul>
<li>node agent도 비슷하게 새로운 버전의 노드들을 가능한 만큼 추가 하고 이전 버전 노드들을 <code>cordon</code> 시킨 상태에서 낮은 버전의 노드들을 제거(drain) 혹은 새로운 버전 노드로 재설치해서 사용하는식으로 업그레이드 가능하다.</li>
</ul>
</li>
</ol>


<p>여기서도 결국 master와 node의 2종류의 이미지를 관리해야 한다. 물론 모두 master 이미지로 만들고 node로 사용가능하나 깔끔하진 못한 방법이다. 이런걸 해결 하기 위해서는 결국 <strong><a href="https://schd.ws/hosted_files/kccncna17/50/Self-Hosted%20Kubernetes_%20How%20and%20Why.pdf">self hosted kubernetes</a></strong> 를 고려해야 한다.</p>

<p><strong>self hosted kubernetes</strong> 를 이용하게 되면 master node의 라벨을 같는 node가 master의 역할을 수행할뿐(apiserver, controller manager, scheduler를 갖는 node) 모두 동일한 node로 구성 가능하다. self hosted kubernetes는 아직 alpha state이나 나중에 이게 default가 되기때문에 미리 봐도 좋을것 같다. 이걸 적용하면 upgrade 절차는 더욱 단순해 진다.</p>

<ol>
<li><p><code>control plane(apiserver, controller manager, scheduler)</code> upgrade</p>

<ul>
<li>control plane은 apiserver는 daemonset, controller manager, scheduler는 deployment가 되기 때문에 image 교체정도로 업그레이드가 끝나게 된다.</li>
</ul>


<p><div class='showyourterms'>
   <div class='command'>kubectl set image ds/kube-apiserver kube-apiserver=gcr.io/google_containers/kube-apiserver-amd64:v1.10.0</div>
   <div class='command'>kubectl set image deploy/kube-scheduler kube-scheduler=gcr.io/google_containers/kube-scheduler-amd64:v1.10.0</div>
   <div class='command'>kubectl set image deploy/kube-controller-manager kube-controller-manager=gcr.io/google_containers/kube-controller-manager-amd64:v1.10.0</div>
</div></p></li>
<li><p><code>node agent(kubelet)</code> upgrade</p>

<ul>
<li>일반과 동일</li>
</ul>
</li>
</ol>


<p>즉, <code>self hosted kubernetes</code>를 적용하면 master와 node 이미지를 별개로 이미지를 준비하고, 작업을 따로 준비 하지 않아도 된다. 결국 node image만 준비하면 되고 이건 kubelet agent들이 있는 이미지만 준비하면 된다는 것이다.</p>

<h3>에스칼레이터 발판 같은 kubernetes 노드 관리</h3>

<div style="text-align:center"><img align="center" src="http://www.madehow.com/images/hpm_0000_0003_0_img0050.jpg" alt="escalator"></img></div>


<p>From <a href="http://www.madehow.com/Volume-3/Escalator.html">Escalator Background</a></p>

<p>앞서 설명한 글을 보다 자세히 설명하기 위해서 에스칼레이터의 그림을 가져왔다.
에스칼레이터의 발판은 무한으로 생성되는 것이 아닌 사용된 발판이 사용되고 다시 한바퀴 돌아 재사용되는 식으로 사람을 옮기게 된다.</p>

<p>앞에서 kubernetes upgrade를 통해서 설명하려고 한것도 이와 비슷하게 kubernetes node도 이런 life cycle을 갖게한다고 보면 된다.</p>

<div style="text-align:center"><img align="center" src="http://leoh0.github.io/images/swapable.png" alt="linuxkit with kubernetes"></img></div>


<p>즉, 에스칼레이터나 캐터필러와 같이 계속 업그레이드, docker version 업데이트등과 같은 작업이나 확장등은 신규 노드를 추가하고 옛날 노드를 삭제한다. 그래서 여기에 사용되는 노드들을 빠르게 추가하고 안전하게 관리하기 위해서 linuxkit과 같은 immutable한 이미지 사용을 고려했다.</p>

<h1>linuxkit + kubernetes</h1>

<p><a href="https://github.com/leoh0/kubernetes">leoh0/kubernetes</a></p>

<p>그렇다면 linuxkit으로 kubernetes를 배포하려면 어떤걸 고려하고 어떻게 해야되나를 생각해보면 다음과 같다.</p>

<p>우선 linuxkit으로 돌리려면 minikube와 같은 allinone 솔루션이 아니라 (거의)무조건 멀티노드를 전제하게 된다. 이를 위해서 기본적으로 cni를 통한 <code>weave</code>를 지원하도 있다. 하지만 다양한 network등을 적용해 볼 수 있다. 나 같은 경우엔 <code>calico</code>와 <code>cilium</code>등을 이용해서 배포하는 것들을 테스트 했다.</p>

<p>그렇다면 어디에 배포할 수 있는 가는 내가 테스트 해본것은 우선 <code>mac(xhyve)</code>, <code>qemu(ubuntu)</code>, <code>gcp</code>, <code>aws</code> 에서 였다. 앞서 말한것 처럼 사실 각각에서 되고 안되고가 있기때문에 각각에 대한 주의사항이나 사용경험등을 공유한다. 우선 전체적으로 <code>4.9.78</code> 정도의 커널을 사용하는게 현재까지 가장 stable 하고 성공확률이 높다.</p>

<p>물론 이것을 보더라도 만약 이런 정보들이 처음이면 삽질하는데 엄청난 시간이 들어갈 수 밖에 없다. 왜냐하면 우선 debug할 수 있는 수단이 제한적이고 모든 것이 컨테이너이기 때문에 각각이 네임스페이스에 갇혀있고 디스크의 마운트 구조를 이해하지 못하면 어떤 파일들이 어디에 있는지 조차도 파악하기가 힘들다. 하지만 모든건 시간이 해결 해 줄 것이다.</p>

<h2>사용 가능한 platform들</h2>

<h3>mac(xhyve)</h3>

<p>만약 mac이 있다면 우선 제일 쉽게 시작할 수 있다. <code>brew</code>나 <code>go</code>를 통해서 binary(linuxkit)을 쉽게 얻을 수 있고 설치 생성시 바로 성공을 경험 할 수 있다. <a href="https://github.com/linuxkit/kubernetes">README</a> 대로 따라하면 된다.</p>

<p>하지만 거기 까지다.</p>

<p>그 이상을 할 수가 없다는 것을 알게 된다. 만약 본인이 L2 네트워크나 L3 네트워크를 컨트롤 하고 싶어져도, hyperkit과 vpnkit을 조작할 수 없고 심지어 dhcp 도 컨트롤 할 수 없다는 사실이 답답하게 느껴질 것이다. 그리고 또한 호스트의 16G 정도의 메모리로는 4G instance를 2-3개 정도 밖에 못쓴다. 4G 메모리가 필요한 이유는 cilium를 사용할 때이며 이때 eBPF map을 관리하는데 4G 정도가 들어가기 때문이다. 물론, calico나 weave를 쓰면 더 많은 노드를 띄울 수 있다.</p>

<h3>qemu(ubuntu)</h3>

<p>사실 메모리가 많은 하이퍼바이저만 구할 여유가 된다면 이 방법이 가장 좋을 수도 있다. 물론 하지만 본인이 linux의 internel network을 조작하는데 익숙 하지 않다면 간단하지 않을 수 있다. <a href="https://github.com/linuxkit/kubernetes#linux">README</a>에 설명되어 있으나 저정도로는 간단하지 않다. 특히 qemu로 띄웠을때는 서로 vm들끼리 공유되지 않는 네트워크 상태이지 않기때문에 아래같은 스크립트로 internel network을 생성해서 사용해야 한다.</p>

<p>그래서 아래의 스크립트를 참고해서 네트워크를 만든다. 아래 스크립트를 설명하면 다음과 같은 일 들을 한다.</p>

<ol>
<li><code>docker</code>, <code>qemu</code>, <code>golang</code> 설치</li>
<li>vm이 사용할 bridge 생성 및 이에 대한 dhcp 설정</li>
<li>해당 bridge의 vm이 nat로 인터넷 연결 할 수 있도록 설정</li>
<li>linuxkit 설치 및 접속할 sshkey 생성</li>
</ol>


<div><script src='https://gist.github.com/6da444d132bb3d9d09eb9ba2793c1f2e.js'></script>
<noscript><pre><code>#!/bin/sh

if [ &quot;$(id -u)&quot; != &quot;0&quot; ]; then
   echo &quot;This script must be run as root&quot; 1&gt;&amp;2
   exit 1
fi

set -ex

apt update
apt install   -y  apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
apt-key fingerprint 0EBFCD88
#add-apt-repository    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#   $(lsb_release -cs) \
#   stable&quot;
# 18.04는 repo가 아직 없어서 artful을 이용해야 한다.
add-apt-repository    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   artful \
   stable&quot;
apt update
apt install -y docker-ce uml-utilities qemu-kvm bridge-utils virtinst libvirt-bin golang-go

virsh net-destroy default
virsh net-autostart --disable default

ip link add virbr10-dummy address $(hexdump -vn3 -e &#39;/3 &quot;52:54:00&quot;&#39; -e &#39;/1 &quot;:%02x&quot;&#39; -e &#39;&quot;\n&quot;&#39; /dev/urandom) type dummy

brctl addbr virbr10
brctl stp virbr10 on
brctl addif virbr10 virbr10-dummy
ip address add 10.0.0.1/8 dev virbr10 broadcast 192.168.100.255

echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.conf.all.forwarding=1&quot; &gt;&gt; /etc/sysctl.conf
sysctl -p

iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -d 224.0.0.0/24 -j RETURN
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -d 255.255.255.255/32 -j RETURN
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 ! -d 10.0.0.0/8 -p tcp -j MASQUERADE --to-ports 1024-65535
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 ! -d 10.0.0.0/8 -p udp -j MASQUERADE --to-ports 1024-65535
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 ! -d 10.0.0.0/8 -j MASQUERADE

iptables -t filter -A FORWARD -d 10.0.0.0/8 -o virbr10 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# 밖으로(169.254.0.0/16)으로 메타가 새면 하이퍼바이저의 메타를 들고온다..
iptables -t filter -A FORWARD -s 10.0.0.0/8 ! -d 169.254.0.0/16 -i virbr10 -j ACCEPT
iptables -t filter -A FORWARD -s 10.0.0.0/8 -d 169.254.0.0/16 -i virbr10 -j DROP

ip l set virbr10-dummy up
ip l set virbr10 up

mkdir -p /etc/qemu/
echo &#39;allow virbr10&#39; &gt; /etc/qemu/bridge.conf
mkdir -p /var/lib/dnsmasq/virbr10
touch /var/lib/dnsmasq/virbr10/hostsfile
touch /var/lib/dnsmasq/virbr10/leases

cat &gt; /var/lib/dnsmasq/virbr10/dnsmasq.conf &lt;&lt; EOF
# Only bind to the virtual bridge. This avoids conflicts with other running
# dnsmasq instances.
except-interface=lo
interface=virbr10
bind-dynamic

# If using dnsmasq 2.62 or older, remove &quot;bind-dynamic&quot; and &quot;interface&quot; lines
# and uncomment these lines instead:
#bind-interfaces
listen-address=10.0.0.1

# IPv4 addresses to offer to VMs. This should match the chosen subnet.
dhcp-range=10.0.0.2,10.15.255.254

# 굳이 안해도 되나 아이피 일괄적으로 주려면 이런게 제일 편하다.
dhcp-host=8a:a0:33:57:08:0a,10.0.0.2
dhcp-host=8a:a0:33:57:08:0b,10.0.0.3
dhcp-host=8a:a0:33:57:08:0c,10.0.0.4
dhcp-host=8a:a0:33:57:08:0d,10.0.0.5
dhcp-host=8a:a0:33:57:08:0e,10.0.0.6

# Set this to at least the total number of addresses in DHCP-enabled subnets.
dhcp-lease-max=1000

# File to write DHCP lease information to.
dhcp-leasefile=/var/lib/dnsmasq/virbr10/leases
# File to read DHCP host information from.
dhcp-hostsfile=/var/lib/dnsmasq/virbr10/hostsfile
# Avoid problems with old or broken clients.
dhcp-no-override
# https://www.redhat.com/archives/libvir-list/2010-March/msg00038.html
strict-order
EOF

cat &gt; /etc/systemd/system/dnsmasq@.service &lt;&lt; EOF
# &#39;%i&#39; becomes &#39;virbr10&#39; when running `systemctl start dnsmasq@virbr10.service`
# Remember to run `systemctl daemon-reload` after creating or editing this file.

[Unit]
Description=DHCP and DNS caching server for %i.
After=network.target

[Service]
ExecStart=/usr/sbin/dnsmasq -k --conf-file=/var/lib/dnsmasq/%i/dnsmasq.conf
ExecReload=/bin/kill -HUP $MAINPID
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
systemctl start dnsmasq@virbr10.service

echo &#39;&#39;&#39;Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    User root&#39;&#39;&#39; &gt; /root/.ssh/config

export PATH=~/go/bin:$PATH
export PATH=/usr/libexec:$PATH

echo &#39;&#39;&#39;export PATH=~/go/bin:$PATH
export PATH=/usr/libexec:$PATH&#39;&#39;&#39; &gt;&gt; ~/.bashrc

git clone https://github.com/leoh0/kubernetes

go get -u github.com/linuxkit/linuxkit/src/cmd/linuxkit

echo -e &quot;\n\n\n&quot; | ssh-keygen -t rsa -N &quot;&quot;

echo &#39;&#39;&#39;
# cd /root/kubernetes
make all
KUBE_CLEAR_STATE=true KUBE_MAC=8a:a0:33:57:08:0a KUBE_NETWORKING=&quot;bridge,virbr10&quot; ./boot.sh
KUBE_CLEAR_STATE=true KUBE_MAC=8a:a0:33:57:08:0b KUBE_NETWORKING=&quot;bridge,virbr10&quot; ./boot.sh 1 10.0.0.2:6443 --token 3wkfov.fj3ywmkva55nr4p7 --discovery-token-ca-cert-hash sha256:ee14b16af5775cfa65215cff0f6fe2807d35b23a4a3dd8a72507e93292fcd8f1
&#39;&#39;&#39;</code></pre></noscript></div>


<p>이와 같은 설치시 내부 네트워크 조작등 가장 강력하게 테스트를 해볼수 있다.
다만 큰 메모리에 하이퍼바이저를 구하기가 쉽지 않을 수 있다. 현재로서는 gce에서 요새 <a href="https://cloud.google.com/compute/docs/instances/enable-nested-virtualization-vm-instances">nested-virtualization</a>
을 지원하는 vm을 만들 수 있어서 이곳이 가장 용의 할 것 같다.</p>

<h3>gcp</h3>

<p>구글 클라우드 플랫폼은 설정만 다 되면 쓰기에 좋은 편이다. 현재 커널 4.14.x가 동작하지 않는것만 알면 우선 작동이 어렵진 않다. 다만 작은 문제들이 있는데 예를 들면 다음과 같다.</p>

<ol>
<li><p>linuxkit에서는 현재 이미지이름과 같은 vm을 생성한다. gcp에서는 호스트네임이 유니크 해야되서 이때문에 node들은 일부러 이미지를 이름을 다르게 해서 올려야 한다. 예를 들어 아래처럼 01 02 03 과 같이 이름을 다르게 써야 한다.</p>

<p> <div class='showyourterms'>
     <div class='command'>linuxkit push gcp -project alproj -bucket linuxkital -img-name cilium-kube-node01 cilium-kube-node.img.tar.gz</div>
     <div class='command'>linuxkit run gcp -project alproj -keys &lsquo;key.json&rsquo; -zone asia-east1-c -machine n1-standard-2 -disk 10 cilium-kube-node01</div>
     <div class='command'></div>
     <div class='command'>linuxkit push gcp -project alproj -bucket linuxkital -img-name cilium-kube-node02 cilium-kube-node.img.tar.gz</div>
     <div class='command'>linuxkit run gcp -project alproj -keys &lsquo;key.json&rsquo; -zone asia-east1-c -machine n1-standard-2 -disk 10 cilium-kube-node02</div>
 </div></p></li>
<li><p>생성할때 disk를 추가해 줘야 한다. 이건 문제라기 보단 당연한 건데 gcp, aws들은 이미지를 raw타입을 쓰고 이미지의 사이즈에서 resize(<a href="https://github.com/linuxkit/linuxkit/tree/master/pkg/extend">extend</a> 하지 않으면 디스크 사이즈가 아예 없다고 봐도 된다. 그래서 추가디스크(eg. sdb)로 용량을 확보(eg. docker image가 저장되는 /var/lib 등)해서 사용 할 수 있다.</p></li>
<li><p>metadata를 linuxkit command로 넣을 수 없다.. 아직 기능부족으로 문제가 된다. 수동으로 <code>kubeadm join</code> 커맨드를 돌려서 작동 시킬 수 있다. 하지만 <code>kubeadm join</code>커맨드를 돌리면 <code>/etc/kubernetes/bootstrap-kubelet.conf</code> 만 생성된다. 원래 kubelet이 떠있으면 이 파일이 생성되면서 자동으로 kubelet이 이파일로 노드 등록을 하게 되나 linuxkit은 kubelet service가 systemd 등과 같은 툴로 실패해도 지속적으로 구동되도록 트라이 하지 못함으로 특정 파일이 생길때까지 wait을 해놓은 상태이다. 그래서 특정 파일을 생성해 줘야 kubelet 서비스가 뜰 수 있다. 이걸 코드로 표현 하면 다음과 같다.</p></li>
</ol>


<div class='showyourterms'>
    <div class='command'>kubeadm join 10.140.0.2:6443 &#8211;ignore-preflight-errors=all &#8211;token gitpj4.gtok7zsm3tfrlh64 &#8211;discovery-token-ca-cert-hash sha256:773e83472b9809473cde237246227dfc2cd795a5848f127de11b3a5fb6550fb9</div>
    <div class='command'>touch /etc/kubernetes/kubelet.conf</div>
</div>


<h3>aws</h3>

<p>aws는 결론만 놓고 이야기 했을때 현재 성공하지 못했다. 마지막으로 확인한것은 모든 network acl을 풀었으나 kubelet 노드의 apiserver에 대한 request들이 실패하는 로그들과 함께 실패했다. 다만 4.14.x 대역의 커널도 지원하고 있어서 삽질을 더 하면 사용가능 할 듯 하다. 여기도 추가적인 문제점은 다음과 같다.</p>

<ol>
<li><p>image의 overwrite가 안된다. 옵션으로 풀수 있을지 모르지만 AMI를 등록 취소시키고 다시 하는 방법만으로 사용했다.</p></li>
<li><p>gcp와 같이 디스크 추가가 반듯이 필요하다.</p></li>
<li><p>metadata도 현재 사용 불가능 하다.</p></li>
</ol>


<h2>사용가능한 네트워크 구조들</h2>

<h3>weave</h3>

<p>weave는 아무런 준비없이 사용하기 좋은 터널링 네트워크이다. 다만 현재 <a href="https://github.com/linuxkit/kubernetes/issues/80">4.14.39 커널까지는 vxlan interface에 문제가 있어서 멀티노드로 띄울 시 문제</a>가 있다. 그래서 현재 패치를 제출한 상태인데 아직 머지는 안된 상태이다. 커널을 4.14.40 이상이면 vxlan 문제는 해결 된다.</p>

<h3>calico</h3>

<p>calico는 역시 weave 다음으로 설정이 간단하다. 다만 weave와 달리 calico 부터는 네트워크의 메터데이터 저장이 필요하고 이 때문에 <code>etcd</code> 혹은 <code>K8S Custom resource definition</code>가 필요하다. 이 때문에 모든 노드에서 접근 가능한 etcd 설정이 필요하다. 하지만 kubeadm으로 설정시 아직은 127.0.0.1과 같이 etcd가 설치되기때문에 <a href="https://github.com/leoh0/kubernetes/blob/master/pkg/kubelet/kubeadm-init.sh#L17-L59">멀티노드에서 접근 가능한 etcd가 미리 준비</a>되어야 한다. 이걸 staticpod으로 생성시켜 kubeadm 에서 생성되지 않고 bypass 하도록 구성시켜야 한다. 이후엔 메모리도 적은 간편하고 성능 좋은 네트워크를 갖을 수 있다.</p>

<h3>cilium</h3>

<p>cilium은 eBPF를 구동시켜보고 싶은 분들에게는 아주 희망적이고 간단한 테스트 방법이 될거라고 생각한다. 다만 노드당 4G이상의 메모리가 필요하다는것 그리고 cilium의 docker 이미지가 ubuntu base 이기 때문에 <a href="https://github.com/leoh0/cilium/commit/3c71dec31e970a9e48bfa4f80f2fd30cc13f24c4">alpine base 의 이미지</a>의 바이너리가 필요하다. 왜냐하면 이 바이너리를 cilium-node에서 node로 복사해서 해당 cni를 사용할 수 있게 해주기 때문이다. 또한 etcd가 필요하기에 etcd를 멀티노드에서 접근 가능한 방법으로 구성해야 한다.</p>

<h1>demo</h1>

<p>linuxkit + kubernetes + cilium을 mac에서 테스트한 것 입니다.</p>

<p><a href="https://asciinema.org/a/182500?autoplay=1"><img src="https://asciinema.org/a/182500.png" alt="demo" /></a></p>

<h1>마지막으로</h1>

<p>사실 아직까지 production에 사용하는 것은 여러가지로 한계들이 충분히 있습니다. 왜냐하면 저희가 가지고 있는 환경들도 제약적인 부분들이 많기에 힘든부분들이 많다고 생각합니다. 하지만 조금더 후엔 기존에 rpm으로 kubernetes package가 나오는것들이 이런 이미지 형태로 kubernetes 에서 제공될것이라고 생각합니다. 그때에서도 이런 부분들이 충분히 실험적일 수도 있지만 인프라가 가야하는 방향중에 한가지라고 생각하기에 제가 한달간 조사하고 삽질 한것을 많은 분들게 공유하려고 정리 했습니다.</p>

<p>개인적으로 기존 제가 테스트 할때 사용하는 클러스터는 이런 방식으로 전환해서 사용하려고 계획하고 있습니다. 사용하면 할 수록 매력적인 부분들이 있는것 같네요. 다른 분들도 이런 즐거움을 느낄 수 있었으면 좋겠습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to make unofficial kubernetes pdf documents 2]]></title>
    <link href="http://leoh0.github.io/blog/2018/04/07/how-to-make-unofficial-kubernetes-pdf-documents-2/"/>
    <updated>2018-04-07T01:15:37+09:00</updated>
    <id>http://leoh0.github.io/blog/2018/04/07/how-to-make-unofficial-kubernetes-pdf-documents-2</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/kubernetes-production-grade-container-orchestration.png" alt="kubernetes" /></p>

<h3><a href="http://leoh0.github.io/images/kubernetes-documents-1.10.pdf">download k8s 1.10 pdf</a></h3>

<hr />

<h3>이전 포스팅과 뭐가 다른가?</h3>

<p>이전에 해보고 더이상 안할거라 생각했다가 우연히 다시 포스팅을 읽었다가 너무 복잡한거 같아서 docker로 제작했다.</p>

<p>아래와 같이 사용할시 pdf를 뽑아 낼 수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -ti -v $PWD:/out3 leoh0/k8s-website-to-pdf</span></code></pre></td></tr></table></div></figure>


<p>아니면 아래 dockerfile로 새로 제작해서 뽑아내면 된다. <a href="https://github.com/leoh0/k8s-website-to-pdf">참고</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t k8s-website-to-pdf .
</span><span class='line'>docker run -ti -v $PWD:/out3 k8s-website-to-pdf</span></code></pre></td></tr></table></div></figure>


<p>우선 전체 dockerfile은 아래와 같다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 참고 https://github.com/leoh0/k8s-website-to-pdf/blob/master/Dockerfile
</span><span class='line'>FROM alpine/git as source
</span><span class='line'>
</span><span class='line'>ARG BRANCH=master
</span><span class='line'>WORKDIR /app
</span><span class='line'>
</span><span class='line'>RUN git clone https://github.com/kubernetes/website && cd website && git checkout ${BRANCH}
</span><span class='line'>
</span><span class='line'>RUN sed -i '/{% include header.html %}/d;/{% include_cached footer.html %}/d;/{% include footer-scripts.html %}/d;/^&lt;!--  HERO  --&gt;/,/^&lt;\/section&gt;/d;s/&lt;div id="docsToc"&gt;/&lt;div id="docsToc" style="display: none;"&gt;/g;/editPageButton/d;s/&lt;div id="docsContent"&gt;/&lt;div id="docsContent" style="width: 100%;"&gt;/g;/&lt;p&gt;&lt;a href=""&gt;&lt;img src="https:\/\/kubernetes-site/,/{% endif %}/d' /app/website/_layouts/docwithnav.html
</span><span class='line'>
</span><span class='line'>FROM jekyll/jekyll as build
</span><span class='line'>
</span><span class='line'>COPY --from=source /app/website /srv/jekyll
</span><span class='line'>
</span><span class='line'>ARG TARGET=/build
</span><span class='line'>
</span><span class='line'>RUN mkdir -p ${TARGET} && chown jekyll.jekyll ${TARGET}
</span><span class='line'>
</span><span class='line'>RUN jekyll build --destination ${TARGET}/_site && cat ${TARGET}/_site/docs/home/index.html ${TARGET}/_site/docs/setup/index.html ${TARGET}/_site/docs/concepts/index.html \
</span><span class='line'>  ${TARGET}/_site/docs/tasks/index.html ${TARGET}/_site/docs/tutorials/index.html | \
</span><span class='line'>  grep 'a class="item"' | grep 'href="/docs' | \
</span><span class='line'>  uniq | cut -d'"' -f6 &gt; ${TARGET}/_site/list
</span><span class='line'>
</span><span class='line'>FROM madnight/docker-alpine-wkhtmltopdf as pdfs
</span><span class='line'>
</span><span class='line'>ARG TARGET=/build
</span><span class='line'>
</span><span class='line'>COPY --from=build ${TARGET}/_site /_site
</span><span class='line'>
</span><span class='line'>WORKDIR /_site
</span><span class='line'>
</span><span class='line'>RUN mkdir -p /out /out2 && apk add --no-cache ghostscript
</span><span class='line'>
</span><span class='line'>RUN count=1 ; for l in $(cat list); do sed -i 's|/css/|/_site/css/|g;s|/js/|/_site/js/|g;s|/images/|/_site/images/|g' /_site${l}index.html || : ; wkhtmltopdf /_site${l}index.html /out/$(printf "%03d" $count)-$(echo $l | sed 's/^.\(.*\).$/\1/;s|/|-|g').pdf || : ; count=$((count+1)) ; done
</span><span class='line'>
</span><span class='line'>WORKDIR /out
</span><span class='line'>
</span><span class='line'>RUN gs -q -sPAPERSIZE=letter -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=/out2/out.pdf $(ls /out)
</span><span class='line'>
</span><span class='line'>VOLUME /out3
</span><span class='line'>
</span><span class='line'>ENTRYPOINT ["sh"]
</span><span class='line'>
</span><span class='line'>CMD ["-c", "cp /out2/out.pdf /out3/"]</span></code></pre></td></tr></table></div></figure>


<p>위의 파일을 크게 2가지로 분류해서 보면 다음과 같다.</p>

<p>우선 아래까지는 이전에도 설명한것과 비슷하게 website repository를 가져와서 필요없는 부분을 적당히 제거하고 jekyll로 빌드하고 빌드할 document의 list를 제작한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 참고 https://github.com/leoh0/k8s-website-to-pdf/blob/master/Dockerfile
</span><span class='line'>FROM alpine/git as source
</span><span class='line'>
</span><span class='line'>ARG BRANCH=master
</span><span class='line'>WORKDIR /app
</span><span class='line'>
</span><span class='line'>RUN git clone https://github.com/kubernetes/website && cd website && git checkout ${BRANCH}
</span><span class='line'>
</span><span class='line'>RUN sed -i '/{% include header.html %}/d;/{% include_cached footer.html %}/d;/{% include footer-scripts.html %}/d;/^&lt;!--  HERO  --&gt;/,/^&lt;\/section&gt;/d;s/&lt;div id="docsToc"&gt;/&lt;div id="docsToc" style="display: none;"&gt;/g;/editPageButton/d;s/&lt;div id="docsContent"&gt;/&lt;div id="docsContent" style="width: 100%;"&gt;/g;/&lt;p&gt;&lt;a href=""&gt;&lt;img src="https:\/\/kubernetes-site/,/{% endif %}/d' /app/website/_layouts/docwithnav.html
</span><span class='line'>
</span><span class='line'>FROM jekyll/jekyll as build
</span><span class='line'>
</span><span class='line'>COPY --from=source /app/website /srv/jekyll
</span><span class='line'>
</span><span class='line'>ARG TARGET=/build
</span><span class='line'>
</span><span class='line'>RUN mkdir -p ${TARGET} && chown jekyll.jekyll ${TARGET}
</span><span class='line'>
</span><span class='line'>RUN jekyll build --destination ${TARGET}/_site && cat ${TARGET}/_site/docs/home/index.html ${TARGET}/_site/docs/setup/index.html ${TARGET}/_site/docs/concepts/index.html \
</span><span class='line'>  ${TARGET}/_site/docs/tasks/index.html ${TARGET}/_site/docs/tutorials/index.html | \
</span><span class='line'>  grep 'a class="item"' | grep 'href="/docs' | \
</span><span class='line'>  uniq | cut -d'"' -f6 &gt; ${TARGET}/_site/list</span></code></pre></td></tr></table></div></figure>


<p>이후엔 각 index.html이 web 기준이므로 로컬 파일 css, js를 참고 할 수 있게 경로 변경하고 wkhtmltopdf 로 pdf 생성한다.</p>

<p>다만 순서를 정렬하기 위해 앞에 숫자를 붙여서 제작한다.</p>

<p>이후에 ghostscript를 이용해서 letter size로 모든 pdf를 합친다. 나중에 합친 결과물 pdf를 뽑아내기 위해 커맨드를 세팅한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM madnight/docker-alpine-wkhtmltopdf as pdfs
</span><span class='line'>
</span><span class='line'>ARG TARGET=/build
</span><span class='line'>
</span><span class='line'>COPY --from=build ${TARGET}/_site /_site
</span><span class='line'>
</span><span class='line'>WORKDIR /_site
</span><span class='line'>
</span><span class='line'>RUN mkdir -p /out /out2 && apk add --no-cache ghostscript
</span><span class='line'>
</span><span class='line'>RUN count=1 ; for l in $(cat list); do sed -i 's|/css/|/_site/css/|g;s|/js/|/_site/js/|g;s|/images/|/_site/images/|g' /_site${l}index.html || : ; wkhtmltopdf /_site${l}index.html /out/$(printf "%03d" $count)-$(echo $l | sed 's/^.\(.*\).$/\1/;s|/|-|g').pdf || : ; count=$((count+1)) ; done
</span><span class='line'>
</span><span class='line'>WORKDIR /out
</span><span class='line'>
</span><span class='line'>RUN gs -q -sPAPERSIZE=letter -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=/out2/out.pdf $(ls /out)
</span><span class='line'>
</span><span class='line'>VOLUME /out3
</span><span class='line'>
</span><span class='line'>ENTRYPOINT ["sh"]
</span><span class='line'>
</span><span class='line'>CMD ["-c", "cp /out2/out.pdf /out3/"]</span></code></pre></td></tr></table></div></figure>


<p>아무튼 이렇게 제작한 pdf는 2016페이지 이고 지난번 보다 200페이지가 증가했다.</p>

<p>역시나 읽지는..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to make unofficial kubernetes pdf documents]]></title>
    <link href="http://leoh0.github.io/blog/2017/10/23/how-to-make-unofficial-kubernetes-pdf-documents/"/>
    <updated>2017-10-23T21:21:47+09:00</updated>
    <id>http://leoh0.github.io/blog/2017/10/23/how-to-make-unofficial-kubernetes-pdf-documents</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/kubernetes-production-grade-container-orchestration.png" alt="kubernetes" /></p>

<h3><a href="http://leoh0.github.io/images/kubernetes-documents.pdf">download pdf</a></h3>

<hr />

<h3>왜?</h3>

<p>밖에서 심심할때 종이로 출력해서 문서를 좀 더 봐야겠다는 생각에 <code>pdf</code> 버전을 구해보려고 했으나. 우선 k8s webpage를 관리하는 <a href="https://github.com/kubernetes/website">website</a>프로젝트에서 아래와 같이 <a href="https://github.com/kubernetes/website/issues/666#issuecomment-271741289">지원을 안한다고 딱잘라서 이야기</a> 하는것을 찾았다.</p>

<blockquote><p>&hellip; we don&rsquo;t plan to make PDFs available.</p></blockquote>

<p>그리고 마땅히 검색했을때 방법이 없기에 만들어야 겠다고 생각했다.</p>

<h3>어떻게 할까?</h3>

<p>외부의 웹사이트를 pdf 로 출력하는 방법들은 여러가지가 있다 그냥 웹 주소를 넣으면 바로 pdf 로 변환해 주는 솔루션이나 사이트들도 많다.(물론 단일 페이지만 렌더링 한다.)</p>

<p>하지만 이럴 경우 footer 와 같이 pdf 로 볼때 불 필요한 부분들이 너무 많아서 좋지 않다. 그래서 이번에 진행할때는 그냥 실제 코드에서 필요없는 부분들을 제거해서 렌더링 시키는 방법으로 하기로 했다.</p>

<p><em>물론 web client를 패치하는 방법이나 adblock 등으로 특정 구문들을 제거하는 방법들도 있으나 지금 방법보다 더 손이 많이 갈것 같았다..</em></p>

<h3>준비 환경</h3>

<p>우선 레포지토리를 받아서 stable중 가장 최신인 1.8버전으로 체크아웃 한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/kubernetes/website
</span><span class='line'>$ cd website
</span><span class='line'>$ git checkout release-1.8</span></code></pre></td></tr></table></div></figure>


<p>jekyll project이니 Gemfile로 디펜던시를 인스톨한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<p>이후 build 해서 md 파일들을 html 로 빌드 한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make build</span></code></pre></td></tr></table></div></figure>


<h3>어떤 페이지들을 pdf로 출력할까?</h3>

<p>아래와 같이 왼쪽 도큐먼트 리스트들 기준으로 출력하고자 해당 페이지만 아래와 같은 스크립트로 추출했다.
여기에 아무래도 api spec과 같은 양이 많은 reference 를 제외하고, 또 포맷이 안맞는 외부링크 제외한 페이지를 필터링 했다.</p>

<p><img src="http://leoh0.github.io/images/k8sdocstoc.png" alt="image" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd _site/docs/
</span><span class='line'>$ cat home/index.html setup/index.html concepts/index.html \
</span><span class='line'>tasks/index.html tutorials/index.html | \
</span><span class='line'>grep 'a class="item"' | grep 'href="/docs' | \
</span><span class='line'>uniq | cut -d'"' -f6
</span><span class='line'>/docs/home/
</span><span class='line'>/docs/tasks/debug-application-cluster/troubleshooting/
</span><span class='line'>/docs/home/contribute/create-pull-request/
</span><span class='line'>/docs/home/contribute/write-new-topic/
</span><span class='line'>/docs/home/contribute/stage-documentation-changes/
</span><span class='line'>/docs/home/contribute/page-templates/
</span><span class='line'>/docs/home/contribute/review-issues/
</span><span class='line'>/docs/home/contribute/style-guide/
</span><span class='line'>/docs/setup/
</span><span class='line'>/docs/setup/pick-right-solution/
</span><span class='line'>/docs/getting-started-guides/minikube/
</span><span class='line'>/docs/setup/independent/install-kubeadm/
</span><span class='line'>/docs/setup/independent/create-cluster-kubeadm/
</span><span class='line'>/docs/getting-started-guides/scratch/
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>출력시키지 않을 부분들을 지우기</h3>

<p>아래와 같이 layout에서 출력시키기 싫은 부분들을 다 지웠다. 기존코드와 비교해 보면 한눈에 알 수 있을 것이다.</p>

<p><a href="https://github.com/leoh0/website/commit/6bde83fce7174f106eb63bbf98af6aacf2a2b0c4">변경된 코드</a></p>

<p>물론 이후에 다시 빌드 한다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make build</span></code></pre></td></tr></table></div></figure>


<h3>여기에 웹페이지 들을 pdf 화 하기</h3>

<p>우선 출력을 위해서 서버를 띄운다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make serve
</span><span class='line'>bundle exec jekyll serve
</span><span class='line'>Configuration file: /Users/al/Projects/k8s/website/_config.yml
</span><span class='line'>Configuration file: /Users/al/Projects/k8s/website/_config.yml
</span><span class='line'>            Source: /Users/al/Projects/k8s/website
</span><span class='line'>       Destination: /Users/al/Projects/k8s/website/_site
</span><span class='line'> Incremental build: enabled
</span><span class='line'>      Generating...
</span><span class='line'>                    done in 7.797 seconds.
</span><span class='line'> Auto-regeneration: enabled for '/Users/al/Projects/k8s/website'
</span><span class='line'>Configuration file: /Users/al/Projects/k8s/website/_config.yml
</span><span class='line'>    Server address: http://127.0.0.1:4000/
</span><span class='line'>  Server running... press ctrl-c to stop.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>그리고 여러가지 방법이 있겠지만 chrome이 깔려있으면 가장 간단할 headless로 pdf 로 출력 시킨다. 아래의 list는 위의 url들 리스트 이다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
</span><span class='line'>
</span><span class='line'>$ for url in $(cat list); do
</span><span class='line'>  echo $url
</span><span class='line'>  # url로 파일이름을 만듬
</span><span class='line'>  file=$(echo $url.pdf | sed 's|/docs/||g;s|/|-|g')
</span><span class='line'>  chrome --headless --disable-gpu --print-to-pdf=$file http://localhost:4000$url
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이하면 각 항목들의 url들이 pdf 화 된다.</p>

<h3>pdf 는 어떻게 합치지?</h3>

<p>py27 기준으로 pdfmerge 를 쓰면 간편하다.
아래와 같이 커맨드로 합치면 된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install pdfmerge
</span><span class='line'>$ pdfmerge -o output.pdf home-.pdf \
</span><span class='line'>tasks-debug-application-cluster-troubleshooting-.pdf \
</span><span class='line'>home-contribute-create-pull-request-.pdf \
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>결론</h3>

<p>이 과정을 거쳐서 pdf를 만들어 보면 왜 pdf를 지원하지 않는지 알게된다.</p>

<p>왜냐하면 나온결과가 1818 페이지의 pdf 이기 때문이다.</p>

<p>그래서 결론적으로 그냥 website에서 보는게 나은 것 같다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k8s tools for watching log and login to multiple containers]]></title>
    <link href="http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers/"/>
    <updated>2017-07-27T00:58:28+09:00</updated>
    <id>http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/showterm-2017-07-27-01-10-29.png" width="780" height="290"></p>

<p>k8s 사용하면서 개인 취향에 맞게 작성한 자작 스크립트 몇가지 소개해 드리려고 합니다.</p>

<h1>watching log</h1>

<p>k8s 에서 pod들의 로그 볼일 들이 많다보니 command 일일치다보니 불편했는데 <code>kubetail</code>이란 프로젝트가 있었습니다.  <br/>
덕분에 잘 쓰고 있었는데 인터페이스가 개인취향에 안맞아서 약간 수정해서 쓰고 있습니다.  <br/>
전반적으로 pod 선택 방법의 변경과 비슷한 이름으로 auto tailing 기능을 추가 했습니다.</p>

<p>아래들이 대표적인 기능 입니다.</p>

<ul>
<li><p>선택된것과 같은 pod들을 전체 log tailing 하고 변화가 있을시 auto reload 함  <br/>
(다만 예외적으로 안되는 케이스 들이 아직 있긴 합니다..)</p>

<pre><code class="bash">$ kt
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/df8a9f96e761012d3bb2c">여기</a>를 참고하시면 됩니다.  <br/>
<img src="http://leoh0.github.io/images/kt.gif" width="800"></li>
</ul>
</li>
<li><p><code>-m</code> 옵션시 자신이 원하는 pod들을 선택해서 log tailing 함. 다만, auto reload는 지원 하지 않음</p>

<pre><code class="bash">$ kt -m
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/f4ab6a8ed080700ece976">여기</a>를 참고하시면 됩니다.  <br/>
<img src="http://leoh0.github.io/images/ktm.gif" width="800"></li>
</ul>
</li>
<li><p><code>-l</code> 옵션시 선택한 pod의 전체 로그를 본다. fzf를 이용해서 log를 탐색 한다.</p>

<pre><code class="bash">$ kt -l
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/6381c317d2e42920c0227">여기</a>를 참고하시면 됩니다.  <br/>
<img src="http://leoh0.github.io/images/ktl.gif" width="800"></li>
</ul>
</li>
</ul>


<p>준비물은 아래와 같습니다.</p>

<ul>
<li><p><strong>fzf</strong></p>

<pre><code class="bash">$ brew install fzf
</code></pre></li>
<li><strong>kubectl</strong>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></li>
</ul>
</li>
</ul>


<p>설치 방법은 아래와 같습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew tap leoh0/kt <span class="o">&amp;&amp;</span> brew install kt
</span></code></pre></td></tr></table></div></figure>


<p>code는 아래에서 확인 가능합니다.</p>

<p><a href="https://github.com/leoh0/kt">https://github.com/leoh0/kt</a></p>

<h1>login container</h1>

<p>pod들 여러개에 동시에 login(bash, sh등) 하여 shell command를 사용하고 싶어서
기존의 cssh 같은 비슷한 메커니즘으로 스크립트 작성해서 사용하고 있습니다.</p>

<ul>
<li>아래는 사용 영상입니다. 자세한 영상은 <a href="http://showterm.io/c58f9999d3ee6db03aa81">여기</a>를 참고하시면 됩니다.
<img src="http://leoh0.github.io/images/kl.gif" width="800"></li>
</ul>


<p>설치 방법은 아래와 같이 rc나 profile에 등록해서 사용하시면 됩니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -s <span class="s1">&#39;https://gist.githubusercontent.com/leoh0/&#39;</span><span class="se">\</span>
</span><span class='line'><span class="s1">&#39;c47dca1c98f998f0d0884c3560afac54/raw/&#39;</span><span class="se">\</span>
</span><span class='line'><span class="s1">&#39;1e1e9fb085d2c1a94293ae87e3922519d8342adb/k8s_login.sh&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    tee -a ~/.bash_profile <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>아래는 전체 소스입니다.
<a href="https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54">https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> kl<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  chkcommand<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">command</span> -v <span class="nv">$1</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> &gt;<span class="p">&amp;</span><span class="m">2</span> <span class="s2">&quot;Plz install $1 first. Aborting.&quot;</span><span class="p">;</span> <span class="k">return</span> 1<span class="p">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  chkcommand fzf <span class="o">||</span> <span class="k">return</span> 1
</span><span class='line'>  chkcommand tmux <span class="o">||</span> <span class="k">return</span> 1
</span><span class='line'>  chkcommand kubectl <span class="o">||</span> <span class="k">return</span> 1
</span><span class='line'>
</span><span class='line'>  <span class="nv">pods</span><span class="o">=</span><span class="k">$(</span>kubectl get pods --all-namespaces <span class="p">|</span> sed <span class="s1">&#39;1d&#39;</span> <span class="p">|</span> fzf -x -m -e +s --reverse --bind<span class="o">=</span>left:page-up,right:page-down --no-mouse <span class="p">|</span> awk <span class="s1">&#39;{print $1&quot;,&quot;$2}&#39;</span><span class="k">)</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$pods</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>      <span class="nv">init</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>      <span class="nv">tmuxname</span><span class="o">=</span>k8s-ns-<span class="k">$(</span>date +%s<span class="k">)</span>
</span><span class='line'>      tmux <span class="nb">kill</span>-session -t <span class="nv">$tmuxname</span> &gt; /dev/null 2&gt; /dev/null <span class="o">||</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">      </span><span class="k">while</span> <span class="nb">read </span>line <span class="p">;</span><span class="k">do</span>
</span><span class='line'>        <span class="nv">NS</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> cut -d<span class="s1">&#39;,&#39;</span> -f1<span class="k">)</span>
</span><span class='line'>        <span class="nv">NAME</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> cut -d<span class="s1">&#39;,&#39;</span> -f2<span class="k">)</span>
</span><span class='line'>        <span class="nv">connect</span><span class="o">=</span><span class="s2">&quot;kubectl exec -ti $NAME -n $NS -- bash || kubectl exec -ti $NAME -n $NS -- sh &quot;</span>
</span><span class='line'>        tmux new-session -d -s <span class="nv">$tmuxname</span> <span class="s2">&quot;export KUBECONFIG=${KUBECONFIG}; $connect&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${init}&quot;</span> <span class="o">==</span> <span class="s2">&quot;true&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span> <span class="k">$(</span>tmux ls 2&gt; /dev/null <span class="p">|</span> grep <span class="s2">&quot;${tmuxname}&quot;</span> <span class="p">|</span> wc -l<span class="k">)</span> &gt; <span class="m">0</span> <span class="o">))</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nv">init</span><span class="o">=</span><span class="s2">&quot;false&quot;</span>
</span><span class='line'>          <span class="k">fi</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          tmux split-window -t <span class="s2">&quot;${tmuxname}&quot;</span> <span class="s2">&quot;${connect}&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>          tmux <span class="k">select</span>-layout -t <span class="s2">&quot;${tmuxname}&quot;</span> <span class="s2">&quot;tiled&quot;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>      <span class="k">done</span> <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;$pods&quot;</span>
</span><span class='line'>      tmux <span class="nb">set</span>-window-option -t <span class="s2">&quot;${tmuxname}&quot;</span> synchronize-panes on
</span><span class='line'>      tmux -2 a -t <span class="nv">$tmuxname</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>참고: <a href="https://github.com/johanhaleby/kubetail">original kubetail</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install openstack on macos Sierra using kolla-kubernetes with xhyve]]></title>
    <link href="http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve/"/>
    <updated>2016-10-13T00:02:06+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve</id>
    <content type="html"><![CDATA[<p><a href="http://showterm.io/404f651b005c52298bc9f"><img src="http://leoh0.github.io/images/2016-10-13_00-04-57.jpg" width="924" height="533"></a>
<a href="http://showterm.io/404f651b005c52298bc9f">클릭해서 과정 보기</a></p>

<p><code>kubernetes</code> 로 <code>openstack mitaka</code>를 설치해 봤습니다.</p>

<p>위의 이미지를 클릭하면 전과정을 보실 수 있습니다. 참고하시면 좋을 것 같습니다.</p>

<p>대략 31분 정도 걸려서 minikube 구성 부터 전체 셋업 및 vm 2개 띄워서 로그인 테스트 합니다.</p>

<p>그리고 저는 <code>macos Sierra</code> 에서 <code>xhyve</code> 로 8G 머신을 만들어서 사용을 했습니다.  <br/>
linux 머신이 있으면 kvm을 이용하시는 것도 좋을것 같습니다.  <br/>
windows 환경에선 xhyve 외에도 virtual box 등을 이용하셔도 좋을 것 같습니다.</p>

<p>셋업할때 <code>kubernetes-cli</code> 는 <code>1.3.6</code> 버전과 <code>minikube</code> 는 <code>0.11.0</code> 버전을 이용합니다.</p>

<p>앞서 말한 2가지 버전만 잘 지키고 bootstraping 이나 container가 올라올때 잘 기다리고 진행하면 크게 어렵게 진행 하실 수 있습니다.</p>

<p>자세한건 <a href="https://github.com/openstack/kolla-kubernetes/blob/master/doc/source/minikube-quickstart.rst">kolla-kubernetes의 도큐먼트</a>를 참고하시면 도움이 되실 겁니다.</p>

<p>kolla-kubernetes 를 이용한 방법으로 기존 kolla 와 비슷한 플로우로 진행합니다.  <br/>
아무튼 그냥 devstack 처럼 테스트 용으로 보시면 좋을겁니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[추가 - edit vagrant box for vagrant-libvirt]]></title>
    <link href="http://leoh0.github.io/blog/2016/09/29/cuga-edit-vagrant-box-for-vagrant-libvirt/"/>
    <updated>2016-09-29T23:39:00+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/09/29/cuga-edit-vagrant-box-for-vagrant-libvirt</id>
    <content type="html"><![CDATA[<h1>copy image and files</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p images
</span><span class='line'>cp ~/.vagrant.d/boxes/<span class="k">${</span><span class="nv">TARGETIMAGE</span><span class="k">}</span>/0/libvirt/* images/
</span><span class='line'><span class="nb">cd </span>images
</span></code></pre></td></tr></table></div></figure>


<h1>init</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install -qqy lvm2
</span><span class='line'>modprobe nbd
</span></code></pre></td></tr></table></div></figure>


<h1>attach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>qemu-nbd -c /dev/nbd0 <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/box.img
</span><span class='line'>vgscan
</span><span class='line'>vgchange -ay
</span><span class='line'>mount /dev/mapper/vagrant--vg-root /mnt
</span></code></pre></td></tr></table></div></figure>


<h1>bind</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">binds</span><span class="o">=</span><span class="s2">&quot;/dev /dev/pts /proc /sys /run&quot;</span>
</span><span class='line'><span class="k">for</span> d in <span class="nv">$binds</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  mkdir -p /mnt<span class="k">${</span><span class="nv">d</span><span class="k">}</span>
</span><span class='line'>  mount --bind <span class="k">${</span><span class="nv">d</span><span class="k">}</span> /mnt<span class="k">${</span><span class="nv">d</span><span class="k">}</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h1>work</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chroot /mnt bash
</span><span class='line'><span class="c"># blah blah blah</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h1>unbind and detach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /
</span><span class='line'><span class="k">for</span> d in <span class="k">$(</span>mount <span class="p">|</span> awk <span class="s1">&#39;/\/mnt/{print $3}&#39;</span> <span class="p">|</span> sort -r<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  umount <span class="nv">$d</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>vgchange -an vagrant-vg
</span><span class='line'>qemu-nbd -d /dev/nbd0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[추가 - Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..]]></title>
    <link href="http://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/"/>
    <updated>2016-09-29T23:30:20+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot</id>
    <content type="html"><![CDATA[<p>예전에 아래글을 그냥 balancing 을 위해 id 를 잘 분배하자 라는식으로 결론 냈지만.</p>

<p><a href="http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/">Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..</a></p>

<p>user의 token리스트를 관리하지 않으면 부담은 훨씬 줄어든다.</p>

<p>물론 user의 password 변경 등으로 기존 모든 token을 revoke 시키는 경우때문에 이런 user 단위로 token리스트를 관리해야 하지만  <br/>
그걸 포기하면 그냥 코드 몇줄 추가로 간단하게 정리할 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/keystone/token/persistence/backends/memcache.py b/keystone/token/persistence/backends/memcache.py</span>
</span><span class='line'><span class="gh">index e6b0fca..3f0de68 100644</span>
</span><span class='line'><span class="gd">--- a/keystone/token/persistence/backends/memcache.py</span>
</span><span class='line'><span class="gi">+++ b/keystone/token/persistence/backends/memcache.py</span>
</span><span class='line'><span class="gu">@@ -37,3 +37,6 @@ class Token(kvs.Token):</span>
</span><span class='line'>         kwargs[&#39;memcached_expire_time&#39;] = CONF.token.expiration
</span><span class='line'>         kwargs[&#39;url&#39;] = CONF.memcache.servers
</span><span class='line'>         super(Token, self).__init__(*args, **kwargs)
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+    def _update_user_token_list(self, user_key, token_id, expires_isotime_str):</span>
</span><span class='line'><span class="gi">+        return []</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac os x - nslookup, host, dig works with /etc/resolv.conf, but ping, ssh doesnt work]]></title>
    <link href="http://leoh0.github.io/blog/2016/05/17/mac-os-x-nslookup/"/>
    <updated>2016-05-17T02:24:09+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/05/17/mac-os-x-nslookup</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/2016-05-17_03-24-13.jpg" width="650" height="167"></p>

<p>Mac os x 는 linux와 다른 resolving을 제공한다.</p>

<p>간단하게만 이야기 하면 /etc/resolv.conf 외에도 /etc/resolver/* 에 원하는 dns명을 기록해 놓으면 해당 domain name을 갖을시 해당하는 nameserver로 쿼리를 할 수가 있다.</p>

<p>예를 들어 아래와 같이 설정했다면 *.local 과 같은 도메인은 10.10.1.65로 dns 서버를 사용가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolver/local
</span><span class='line'>nameserver 10.10.1.65</span></code></pre></td></tr></table></div></figure>


<p>다만 이건 nslookup, host, dig 와 같은 dns lookup command 들에서는 나타나지 않는다. 이런 커맨드는 linux와 같이 /etc/resolv.conf 의 dns 서버를 이용해서 lookup을 하게 된다. (/etc/hosts 도..)</p>

<p>아무튼 이 설명은 아래 커맨드 들의 man page를 보면 알수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man dig
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The dig command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by dig may
</span><span class='line'>       differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS routing
</span><span class='line'>       library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man nslookup
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The nslookup command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by
</span><span class='line'>       nslookup may differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS
</span><span class='line'>       routing library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man host
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The host command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by host may
</span><span class='line'>       differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS routing
</span><span class='line'>       library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>하지만 ssh, ping은 /etc/resolver/* 외에도 설정되어 있는 resolver dns 로 쿼리를 하게 된다. 그렇기 때문에 한쪽에서는(nslookup, dig, host) 되고 한쪽(ping, ssh 외 다수)에서는 안되는 케이스가 발생한다.</p>

<p>그렇다면 이것을 어떻게 확인 할 수 있을까?  <br/>
가장 간단한 방법은 아래와 같다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scutil --dns</span></code></pre></td></tr></table></div></figure>


<p>결과는 아래와 같이 resolver 들과 그들의 순위(order)를 확인 할 수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scutil --dns
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>resolver #2
</span><span class='line'>  domain   : 1015140824.members.btmm.icloud.com
</span><span class='line'>  options  : pdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 150000
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>resolver #4
</span><span class='line'>  domain   : local
</span><span class='line'>  options  : mdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 300000
</span><span class='line'>
</span><span class='line'>resolver #5
</span><span class='line'>  domain   : 254.169.in-addr.arpa
</span><span class='line'>  options  : mdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 300200
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>사족으로 여기에서도 만약에 local 순위가 300000(default) 가 마음에 안들면 아래와 같이 resolver 에 추가 하면 100000으로 변경이 가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolver/local
</span><span class='line'>nameserver 10.10.1.65
</span><span class='line'>search_order 100000</span></code></pre></td></tr></table></div></figure>


<p>이런 설정이 일반적으로는 필요하지 않지만 아래와 같은 vpn을 사용하는 케이스에서 발생했었다.</p>

<p>우선 아래와 같은 커맨드로 /etc/resolv.conf 에 원하는 search domain들을 network interface 당 추가가 가능하다. (아니면 환경 설정에서 추가..)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo networksetup -setsearchdomains 'WI-FI' local</span></code></pre></td></tr></table></div></figure>


<p>이러면 대략 아래와 같이 local 을 search 구문으로 사용가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolv.conf
</span><span class='line'>...
</span><span class='line'>search local
</span><span class='line'>nameserver 8.8.8.8</span></code></pre></td></tr></table></div></figure>


<p>일반적으로 이렇게 사용하는게 문제가 되지 않지만 만약 junos pulse 같은 vpn을 사용시 vpn에서 주어주는 search domain이 아닐시 자신의 기존 search domain 들은 원래 nameserver로 가도록 설정되어 있다.</p>

<p>예를 들면 이렇다.</p>

<p>A, B 라는 search domain을 (가)라는 dns를 사용하는데
만약 vpn에서 B, C 라는 search domain을 (나)라는 dns로 주어지면
아래와 같이 정리된다.</p>

<p>A, B, C search domain을 사용하는 것은 default 로 (나) 로 사용되나.  <br/>
이것보다 높은 order 로 A 가 (가)로 한개 더 설정된다.</p>

<p>이런 케이스에는 A domain은 (나)로 질의 하고 싶어도 (가)로 질의 하게 되는 문제가 있다.</p>

<p>vpn 측에서 모든 search domain을 내려주면 해결할 수 있지만 이런게 힘들 시에는 <a href="https://gist.github.com/b4ldr/f9d6aab4837ae18d908f">여기</a> <a href="http://diaryproducts.net/about/operating_systems/mac_os_x/overriding_dhcp_or_vpn_assigned_dns_servers_in_mac_os_x_leopard">여기</a> 와 같이 직접 scutil 을 통해서 VPN의 DNS 값들을 수정해 줄 수 있다. (아니면 위와 같이 /etc/resolver/local 과 같이 파일을 만들어도 됨)</p>

<p>추가적으로 아래와 같은 커맨드로 debugging 을 가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># enable operation logging.
</span><span class='line'>sudo killall -USR1 mDNSResponder
</span><span class='line'>
</span><span class='line'># enable packet logging.
</span><span class='line'>sudo killall -USR2 mDNSResponder
</span><span class='line'>
</span><span class='line'># clear the DNS cache.
</span><span class='line'>sudo killall -HUP mDNSResponder
</span><span class='line'>
</span><span class='line'># dump mDNSRepsonder's internal state.
</span><span class='line'>sudo killall -INFO mDNSResponder</span></code></pre></td></tr></table></div></figure>


<p>졸려서 두서없이 정리함..
나중에 다시 좀더 자세하게 정리를..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Management multiple openstack cluster with automatic openstack rc file loader script]]></title>
    <link href="http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script/"/>
    <updated>2016-05-10T01:08:56+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/2016-05-10_03-40-27.jpg" width="368" height="272"></p>

<h2>openstack rc file</h2>

<p>여러 openstack 클러스터를 관리하려면 <a href="http://docs.openstack.org/user-guide/common/cli_set_environment_variables_using_openstack_rc.html">openstack rc file</a>(이하 openrc file)을 잘 관리해야한다.  <br/>
이런 관리를 위해서 <a href="http://supernova.readthedocs.io/en/latest/">supernova</a> 와 같은 rc file 관리해주는 툴들을 사용하게 된다.  <br/>
(개인적으로 비슷한 시기에 bash로 비슷한 아이디어로 구현해서 써서 사용하진 않았지만 이러한 관리 툴이 필요하다면 supernova를 참고하면 좋을것같다.)  <br/>
이런 툴들은 기본적으로 shell에 환경변수를 추가하는 방식이기에 폴더가 변경된다고 자동으로 로딩된다기 보다는  <br/>
유저가 어떤 rc file을 사용할지 로딩하여(트리거링하여) 써야한다.</p>

<h2>openstack rc file (normal version)</h2>

<p>예를 들면 아래는 일반적으로 사용하는 익숙 한 예이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span><span class="nb">source </span>stage_v1_openrc
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v1
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v1
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v1.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v1
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v1.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v1
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span><span class="nb">source </span>stage_v2_openrc
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v2
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v2
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v2.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v2
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v2.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v2
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v2
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 <code>source</code>(혹은 <code>.</code>) 을 이용해서 미리 기록해둔 파일(stage_v1_openrc, stage_v2_openrc)를 export 해서 환경변수에 기록해서 사용한다.  <br/>
이런방식은 어째뜬 파일을 관리해야 하고 파일을 항상 사용해야 하기때문에 다른 디렉토리에서 사용하기에 불편함이 있다.</p>

<h2>openstack rc file (advanced version)</h2>

<p>그래서 내가 만들었던 툴은 아래와 같이 사용했다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>al@MacBook-Pro-2:~ O:stage_v2
</span><span class='line'><span class="nv">$ </span>rcvm stage_v1
</span><span class='line'>OPENRC: stage_v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v1
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v1
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v1
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v1.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v1
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v1.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v1
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v1
</span><span class='line'><span class="nv">$ </span>rcvm stage_v2
</span><span class='line'>OPENRC: stage_v2
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v2
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v2
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v2
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v2.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v2
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v2.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v2
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v2
</span></code></pre></td></tr></table></div></figure>


<p>사실 source 같은 커맨드와 지정한 파일을 사용하는거 외에 사용방식은 비슷하다.  <br/>
<code>&lt;커맨드&gt; &lt;구성&gt;</code> 이런 호출을 통해서 rc를 변경한다. (위 보다 디렉토리 제약과 파일 관리의 부담이 조금 줄었다.)</p>

<h2>기존 방법의 불편한 점</h2>

<p>위의 두가지 방법들은 한 클러스터를 집중적으로 관리할때 편리하다.</p>

<p>여기서 만약 다른 클러스터 작업이 필요하면 대략 아래 같은 방법의 옵션들을 사용하게 된다.</p>

<pre><code>1. shell을 추가적으로 띄워서 다른 환경변수를 로딩한다.
2. supernova의 사용법중 하나인매번 `supernova &lt;environment&gt; &lt;command&gt;` 와 같은 형태로 환경변수를 로딩하여 호출해야 한다.
</code></pre>

<p>하지만 이렇게 관리하다보면 여러 클러스터에 간단한 작업을 할때마다 여러창을 띄우던지 아니면 의식적으로 환경을 변경하면서 작업해야한다.</p>

<p><em>그래서 아래 같은 방법을 생각하게 되었다.</em></p>

<h2>디렉토리 기반 openrc 자동 로딩 방법</h2>

<p>그래서 생각한 아이디어는 git 이나 chef 등과 같이 parent directory 에 특정 구성 파일이 있으면  <br/>
이하 디렉토리에서 해당 환경을 자동으로 로딩할 수 있으면 편하겠다고 생각했다.  <br/>
가장 간단한 방법은 아마 nova 와 같은 커맨드에 <code>pwd</code> 등을 확인해서 파일을 로딩하는식으로 구현할까 했었다.  <br/>
하지만 이건 새로운 커맨드가 나올때마다 등 관리가 잘 안될게 뻔하기 때문에 이런 방법을 쓰지않고 있었다.</p>

<p>그러던 와중에 <a href="https://github.com/yyuu/pyenv">pyenv</a>를 잘 쓰고 있었는데 여기에서 python command 들을 사용할때 hook을 걸 수 있는것을 알았다.  <br/>
그리고 해당 hook에 부모 디렉토리에 원하는 파일(openrc)이 있으면 로딩하는 식으로 구성하니 아주 말끔히 원하는식으로 작동하게 되었다.</p>

<p>hook 위치는 아래를 참고하면 된다.</p>

<p>mac에서 brew 로 pyenv를 설치했다면 아래와 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># mac os x</span>
</span><span class='line'><span class="nv">$ </span>cat <span class="k">$(</span>brew --prefix pyenv<span class="k">)</span>/pyenv.d/exec/openstack.bash
</span></code></pre></td></tr></table></div></figure>


<p>ubuntu는 아래와 같다. (non root user시)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ubuntu</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.pyenv/pyenv.d/exec/openstack.bash
</span></code></pre></td></tr></table></div></figure>


<p>해당 파일내용은 아래와 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">openstack_root</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span> -P 2&gt;/dev/null <span class="o">||</span> <span class="nb">command pwd</span><span class="k">)</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> ! -e <span class="s2">&quot;$openstack_root/openrc&quot;</span> <span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">openstack_root</span><span class="o">=</span><span class="k">${</span><span class="nv">openstack_root</span><span class="p">%/*</span><span class="k">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$openstack_root&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">break</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$openstack_root&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">while</span> <span class="nb">read </span>var<span class="p">;</span> <span class="k">do</span> <span class="nb">unset</span> <span class="s2">&quot;$var&quot;</span><span class="p">;</span> <span class="k">done</span>&lt; &lt;<span class="o">(</span>env <span class="p">|</span> awk -F<span class="o">=</span> <span class="s1">&#39;/^OS_/{print $1}&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  . <span class="s2">&quot;$openstack_root/openrc&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>약간에 설명을 하자면 해당 커맨드를 실행하는 해당 디렉토리에 <code>openrc</code> 파일이 있으면 <code>OS_</code>로 시작하는 모든 환경 변수를 초기화(unset)하고 openrc 를 export 한다.  <br/>
만약 해당 디렉토리에 해당 파일(openrc)가 없으면 상위 디렉토리가 존재할때까지 recursive 하게 올라간다.</p>

<h2>디렉토리 기반 openrc 자동 로딩 데모</h2>

<p>아래는 데모이다.  <br/>
천천히 보려면 이 링크에서 커맨드를 확인하면서 볼 수 있다. (<a href="http://showterm.io/112d21ab5f83d5843f7b2">http://showterm.io/112d21ab5f83d5843f7b2</a>)</p>

<div class="embed-video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/r_Hgitz0Tn0" frameborder="0" allowfullscreen></iframe></div>


<p>중간에 보이는바와 같이 <code>env | grep OS_</code> 로 환경변수가 비어 있으나  <br/>
<code>python</code> 커맨드 실행시 안에 환경변수들이 채워져 있는 것을 확인 할 수 있다.  <br/>
아래 커맨드로 python 실행시 해당 환경변수중 <code>OS_</code> 시작하는 변수들의 값을 출력해 본것이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python -c <span class="s2">&quot;import os; print(&#39;\n&#39;.join([str(\&quot;%s=%s\&quot; %(i,j)) for i,j in os.environ.iteritems() if i.startswith(&#39;OS_&#39;)]))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>이런식으로 앞서 말한 방법과 함께 두가지 방법을 이용하면 보다 쾌적한 클러스터 관리를 할 수 있게 된다.</p>

<h2>DIY</h2>

<p>아래 스크립트를 이용하면 ubuntu에서 테스트 설치해서 테스트 가능하다.</p>

<figure class='code'><figcaption><span>install_openrc_changer.sh</span><a href='https://gist.github.com/leoh0/21d61d3bebe394d278e6f18d5465415d'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'>sudo apt-get install -qqy git make build-essential libssl-dev zlib1g-dev libbz2-dev <span class="se">\</span>
</span><span class='line'>  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev <span class="se">\</span>
</span><span class='line'>  libncursesw5-dev libxml2-dev libxslt1-dev libffi-dev
</span><span class='line'>
</span><span class='line'>curl -sL https://raw.github.com/yyuu/pyenv-installer/master/bin/pyenv-installer <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  bash
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;~/.pyenv/bin:$PATH&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(pyenv init -)&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(pyenv virtualenv-init -)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;~/.pyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="nv">PYTHON_CONFIGURE_OPTS</span><span class="o">=</span><span class="s2">&quot;--enable-unicode=ucs4&quot;</span> ~/.pyenv/bin/pyenv install 2.7.9
</span><span class='line'>
</span><span class='line'>~/.pyenv/bin/pyenv global 2.7.9
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt; OPENRC_CHOOSER &gt; ~/.pyenv/pyenv.d/exec/openstack.bash</span>
</span><span class='line'><span class="s">openstack_root=\$(pwd -P 2&gt;/dev/null || command pwd)</span>
</span><span class='line'><span class="s">while [ ! -e &quot;\$openstack_root/openrc&quot; ];</span>
</span><span class='line'><span class="s">do</span>
</span><span class='line'><span class="s">  openstack_root=\${openstack_root%/*}</span>
</span><span class='line'><span class="s">  if [ &quot;\$openstack_root&quot; == &quot;&quot; ]; then</span>
</span><span class='line'><span class="s">    break</span>
</span><span class='line'><span class="s">  fi</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'>
</span><span class='line'><span class="s">if [ &quot;\$openstack_root&quot; != &quot;&quot; ]; then</span>
</span><span class='line'><span class="s">  while read var; do unset &quot;\$var&quot;; done&lt; &lt;(env | awk -F= &#39;/^OS_/{print \$1}&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="s">  . &quot;\$openstack_root/openrc&quot;</span>
</span><span class='line'><span class="s">fi</span>
</span><span class='line'><span class="s">OPENRC_CHOOSER</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;need relogin&#39;</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>결론</h2>

<p>pyenv + 스크립트 한개 = 디렉토리 기반 자동 openrc file loader 제작 가능</p>

<h3>ps</h3>

<p>더 좋은 방법은 언제든지 환영합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keystone에서 token backend로 사용하는 memcached가 unbalanced되었다..]]></title>
    <link href="http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/"/>
    <updated>2016-04-27T00:00:45+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot</id>
    <content type="html"><![CDATA[<p>해당 클러스터는 kilo 버전으로 구성 되었었고 token 을 memcached 에 저장하고 있었다.  <br/>
또한 kilo 부터 dogpile.cache 는 거의 고정으로 들어가 있가 있어서 해당 모듈을 사용했다.  <br/>
이런 상황을 디버깅 했던 경험을 정리해 본다.</p>

<p>아래는 문제가 되었던 memcached host의 in/out bound 그래프이다.  <br/>
수치는 가려서 스케일만 감으로 볼 수 있게 남겼다.</p>

<p><strong>A 서버</strong>
<img src="http://leoh0.github.io/images/2016-04-26_23-50-30.png" width="508" height="122" title="A 서버" ></p>

<p><strong>B 서버</strong>
<img src="http://leoh0.github.io/images/2016-04-26_23-50-41.png" width="499" height="122" title="B 서버" ></p>

<p>최초엔 keystone과 memcached connection 이 unbalance 할것이라고 생각했으나 그런 정황은 없었다.    (connection 개수가 일정) 그리고 특별히 keystone 로그에도 별다른 문제가 보이지 않았다.  <br/>
memcache key 개수는 심지어 <strong>A 서버</strong>가 많았다.</p>

<p>이 외에도 온갖 삽질을 했지만 관련이 없었다.  <br/>
그 후 결국 아래와 같은 방법으로 디버깅 할 수 있었다.</p>

<p>각 호스트에서 아래 같이 memcache slab id 별로 dump를 떠보니 <code>bf81985d70a6416897edbade7a8bfc0a5a579af4</code> 와 같이 유독 큰 (578966 b) 키가 <strong>B 서버</strong>에만 존재 하고 있었다.</p>

<p>대부분의 token 데이터는 <code>3f786850e387550fdab836ed7e6dc881de23001b</code> 정도와 같이 PKI가 아닌 UUID token data여서 10000 b 정도를 구성하고 있었기 때문에 <code>크기</code>가 더 눈에 띈다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for i in $(echo 'stats items' | nc localhost 11211 | cut -d':' -f2 | sort -u | grep -v END); do
</span><span class='line'>    echo "stats cachedump $i 1" | nc localhost 11211
</span><span class='line'>done
</span><span class='line'>...
</span><span class='line'>ITEM 3f786850e387550fdab836ed7e6dc881de23001b [11651 b; 1461686308 s]
</span><span class='line'>END
</span><span class='line'>ITEM 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 [578966 b; 1461688011 s]
</span><span class='line'>END
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>그렇다면 이 키를 열어 보면 아래와 같다.  <br/>
( 참고로 아래 커맨드를 쓰기위해선 <code>dogpile.cache</code> 가 인스톨 되어 있어야 한다. )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo get 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 | nc localhost 11211 | python -c '
</span><span class='line'>import sys
</span><span class='line'>import cPickle
</span><span class='line'>import json
</span><span class='line'>try:
</span><span class='line'>    data=cPickle.load(sys.stdin)
</span><span class='line'>    print json.dumps(data)
</span><span class='line'>except (cPickle.UnpicklingError, EOFError):
</span><span class='line'>    print ""
</span><span class='line'>' | python -mjson.tool
</span><span class='line'>[
</span><span class='line'>    [
</span><span class='line'>        [
</span><span class='line'>            "386c0e0a01bb4069904d9c11771516a2",
</span><span class='line'>            "2016-04-26T15:41:25.000000Z"
</span><span class='line'>        ],
</span><span class='line'>        [
</span><span class='line'>            "9ba06233d0894aa4a06d4302800035c1",
</span><span class='line'>            "2016-04-26T15:41:24.000000Z"
</span><span class='line'>        ],
</span><span class='line'>        [
</span><span class='line'>            "1510940842f943b798f4bb9f7964aa67",
</span><span class='line'>            "2016-04-26T15:41:24.000000Z"
</span><span class='line'>        ],
</span><span class='line'>   
</span><span class='line'>        ...
</span><span class='line'>   
</span><span class='line'>        [
</span><span class='line'>            "d57b2946174c4a4391496a7f9af7e0c5",
</span><span class='line'>            "2016-04-26T16:41:18.000000Z"
</span><span class='line'>        ]
</span><span class='line'>    ],
</span><span class='line'>    {
</span><span class='line'>        "ct": 1461685284.976144,
</span><span class='line'>        "v": 1
</span><span class='line'>    }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 되어 있고 알고 보면 특정 토큰들과 그 토큰이 issue 된 시간이 적혀 있는 <a href="https://github.com/openstack/keystone/blob/stable/kilo/keystone/token/persistence/backends/kvs.py#L155-L188">리스트</a> 이다.  <br/>
이 키의 리스트는 유저별로 token의 expire time을 관리하는 값으로 해당 user에게 token이 발급 되거나 expire 될때마다 해당 리스트를 memcache로 부터 가져와서(<code>get</code>) 다시 업로드(<code>set</code>) 한다.  <br/>
그렇기 때문에 해당 키값이 결국 유저와 관계 있다는 것을 추측할 수 있었다.</p>

<p>예를 들어 아래 처럼 특정 유저를 본다면 아래 처럼 <code>id</code>를 갖고 있을 것이다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openstack user show ceilometer
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| Field    | Value                            |
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| enabled  | True                             |
</span><span class='line'>| id       | eef939600bc111e69aeb57d4fa849231 |
</span><span class='line'>| name     | ceilometer                       |
</span><span class='line'>| username | ceilometer                       |
</span><span class='line'>+----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>eef939600bc111e69aeb57d4fa849231 이값은 아래와 같이 prefix가 붙고 hash 되서 key 값으로 사용된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n 'usertokens-eef939600bc111e69aeb57d4fa849231' | sha1sum
</span><span class='line'>6e49b86a7502dae881f3b9466ecbdfa4743c7eb9  -</span></code></pre></td></tr></table></div></figure>


<p>즉, <code>6e49b86a7502dae881f3b9466ecbdfa4743c7eb9</code>은 가 key이 기때문에 위의 토큰 리스트는 ceilometer의 토큰 리스트인걸 알 수 있다.</p>

<p>마지막으로 아래와 같이 계산해 보면 어떤 멤캐쉬에 들어갈 지 알수 있다. (<a href="https://github.com/linsomniac/python-memcached/blob/master/memcache.py#L63-L66">cmemcache_hash</a> 참고)  <br/>
여기에서는 <code>3065</code> 가 나왔기 때문에 멤캐쉬 서버가 두대이면 두번째(<code>3016%2=1</code>) 서버로 들어가게 된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n '6e49b86a7502dae881f3b9466ecbdfa4743c7eb9' | python -c '
</span><span class='line'>import sys,binascii
</span><span class='line'>print (
</span><span class='line'>    (((binascii.crc32(sys.stdin.read()) & 0xffffffff)
</span><span class='line'>       &gt;&gt; 16) & 0x7fff) or 1)
</span><span class='line'>'
</span><span class='line'>3065</span></code></pre></td></tr></table></div></figure>


<p>나의 케이스는 불운 하게도 이런 많은 토큰을 같은 유저(ceilometer, neutron, nova 등)가 전부 해쉬값이 홀수가 나와서 한 memcached host에 할당되었고, 이때문에 한쪽으로 skew 가 있었다.</p>

<p>이런걸 피할려면 결국 memcached 개수를 늘이던가 토큰이 많은 유저의 uuid를 분배시킬 수 있도록 해야 할것같다.
물론 저런 거대한 토큰 리스트를 관리 안하는 것이 더 나아 보이지만 이 코드는 현재 master(mitaka 이후)까지도 유지되어 있는 상태이다.</p>

<p>우리도 ceilometer 를 쓰기 전까지는 이런 문제가 없었으나 ceilometer를 추가하면서 문제가 발생하기 시작했다.  <br/>
아무래도 ceilometer 상위 버전쪽에서는 토큰의 재활용을 높이는 부분들이 있어야 할것이다.</p>

<p>사족으로 토큰이 어떤 내용을 담고 있는지는 아래 같은 스크립트로 찾으면 편하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MEMCACHES='serverA serverB'
</span><span class='line'>for h in $MEMCACHES; do
</span><span class='line'>  echo $h
</span><span class='line'>  sha=$(echo -n "token-$1" | sha1sum | cut -d' ' -f1)
</span><span class='line'>  echo get $sha | nc $h 11211 | python -c '
</span><span class='line'>import sys
</span><span class='line'>import cPickle
</span><span class='line'>import json
</span><span class='line'>try:
</span><span class='line'>    data=cPickle.load(sys.stdin)
</span><span class='line'>    data[0]["expires"] = data[0]["expires"].strftime("%Y-%m-%d %H:%M:%S")
</span><span class='line'>    print json.dumps(data[0])
</span><span class='line'>except (cPickle.UnpicklingError, EOFError):
</span><span class='line'>    print ''
</span><span class='line'>' | python -mjson.tool
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac에서 ntfs disk에 write 하기]]></title>
    <link href="http://leoh0.github.io/blog/2015/11/03/maceseo-ntfs-diske-write-hagi/"/>
    <updated>2015-11-03T09:38:22+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/11/03/maceseo-ntfs-diske-write-hagi</id>
    <content type="html"><![CDATA[<p>GPT 일때 가능</p>

<div><script src='https://gist.github.com/d07787e9dc635136de6a.js?file=ntfs_mount.sh'></script>
<noscript><pre><code>#!/usr/bin/env bash

if mount | grep -q &#39;ntfs&#39; ; then
  if ! mount | grep -q &#39;read-only&#39; ; then
    echo -e &quot;\033[01;36mExist already in /etc/fstab.\033[00m&quot;
    VOLUME=$(mount | grep &quot;(ntfs, &quot; | sed &#39;s|/dev/disk[0-9]s[0-9] on \(.*\) (ntfs,.*$|\1|g&#39;)
    open &quot;$VOLUME&quot;
    exit
  fi

  DISK=$(mount | grep &#39;read-only&#39; | awk &#39;{print $1}&#39;)
  UUID=$(diskutil info $DISK | grep UUID | awk &#39;{print $3}&#39;)
  echo -e &quot;\033[01;36mRegistry into /etc/fstab.\033[00m&quot;
  echo &quot;UUID=$UUID none ntfs rw,auto,nobrowse&quot; | sudo tee -a /etc/fstab &gt; /dev/null
  diskutil umount $DISK
  diskutil mount $DISK
  VOLUME=$(mount | grep &quot;(ntfs, &quot; | sed &#39;s|/dev/disk[0-9]s[0-9] on \(.*\) (ntfs,.*$|\1|g&#39;)
  open &quot;$VOLUME&quot;
else
  echo -e &quot;\033[01;36mThere is no ntfs disk in here.\033[00m&quot;
fi
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[커맨드로 크롬에 떠 있는 유튜브 플레이중인 음악 mp3로 다운로드 하기]]></title>
    <link href="http://leoh0.github.io/blog/2015/05/19/youtube-chrome-mp3-downloader/"/>
    <updated>2015-05-19T09:49:32+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/05/19/youtube-chrome-mp3-downloader</id>
    <content type="html"><![CDATA[<p>내가 듣는 음악 장르는 보통 스트리밍 서비스에서 찾을 수 가 없어서 보통 유튜브 자동재생을 켜놓고 음악을 듣는 편이다.</p>

<p>그런데 이런 음악을 찾기 귀찮아서 mp3 파일로 다운로드 해두고 싶은일이 생긴다.</p>

<p><img src="http://leoh0.github.io/images/unsun-whispers.png" width="452" height="239" title="unsun - whispers" ></p>

<p><a href="https://www.youtube.com/watch?v=LapknbGS7Os">UNSUN - Whispers Youtube</a></p>

<p>물론 그냥 아래 같이 <code>youtube-dl</code>와 같은 방법을 써도 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install youtube-dl
</span><span class='line'>youtube-dl -t --extract-audio --audio-format mp3 <span class="nv">$YOUTUBEURL</span>
</span></code></pre></td></tr></table></div></figure>


<p>하지만 일하는데 터미널에서 크롬으로 창을 포커스 바꾸고 url을 카피해서 저 커맨드를 넣는건 귀찮은 일이다.</p>

<p>그래서 이런걸 해결해주는 <a href="https://github.com/prasmussen/chrome-cli">chrome-cli</a> 라는 솔루션을 이용한다.</p>

<p>물론 설치는 간단하게..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install chrome-cli
</span></code></pre></td></tr></table></div></figure>


<p>그리고 그냥 아래 같은 방법을 쓰면 chrome 에서 열려 있는 유튜브 페이지들을 전부 조회해서 mp3로 다운로드 할 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> yd<span class="o">(){</span>
</span><span class='line'>  <span class="k">for</span> l in <span class="k">$(</span>chrome-cli list tabs <span class="p">|</span> grep YouTube <span class="p">|</span> cut -d <span class="s1">&#39;[&#39;</span> -f2- <span class="p">|</span> cut -d<span class="s1">&#39;:&#39;</span> -f2- <span class="p">|</span> cut -d<span class="s1">&#39;]&#39;</span> -f1<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nv">url</span><span class="o">=</span><span class="k">$(</span>chrome-cli info -t <span class="nv">$l</span> <span class="p">|</span> grep <span class="s1">&#39;^Url: &#39;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f2<span class="k">)</span>
</span><span class='line'>    <span class="o">(</span><span class="nb">cd</span> /want/to/download/mp3<span class="p">;</span> youtube-dl -t --extract-audio --audio-format mp3 <span class="nv">$url</span><span class="o">)</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[containerize openstack]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/containerize-openstack/"/>
    <updated>2015-04-24T01:08:16+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/containerize-openstack</id>
    <content type="html"><![CDATA[<p>docker 바깥으로 process를 낼 수 있는 방법들로 kvm 프로세스를 docker 바깥 host os 에 배치시키는 방법이 가능하네요.  <br/>
실질적으로 docker안에 kvm이 들어가게 된다면 docker process에 vm이 종속적이게 되어 불안정한 구성이 될테지만  <br/>
이런 방식으로 피해 갈 수도 있는 것을 확인했습니다.</p>

<p><img src="http://leoh0.github.io/images/containerize-openstack.png" width="1440" height="829" title="containerize-openstack" ></p>

<p>아무튼 사진과 같이 기묘한 형태로 (실제 host os 에는 없는 바이너리가 parent 1 을 물고 process 로 뜨게되는) 관리가 가능합니다.  <br/>
물론 보안 적인 결함에 대해서야 아직 끝도없이 이야기할 주제이겠지만 앞으로의 provisioning의 새로운 가능성에 대해서 관심이 가는건 사실인것 같습니다.</p>

<p>아무튼 열심히 삽질하다보니 kolla에서 이미 하고 있었어서 libvirt 를 containerize 하는데 도움을 받았습니다.</p>

<p><a href="https://github.com/stackforge/kolla">https://github.com/stackforge/kolla</a></p>

<p>우선 저는 ubuntu로 kolla 소스가 아니라 따로 구성해서 실험했습니다.  <br/>
fedora와 ubuntu의 미묘한 차이가 있어서 ubuntu로 구성하려면 약간의 차이가 필요한것 같습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[가장 변태적인 linux command]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/gajang-byeontaejeogin-linux-command/"/>
    <updated>2015-04-24T00:28:38+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/gajang-byeontaejeogin-linux-command</id>
    <content type="html"><![CDATA[<p>ip command 는 linux network 쪽을 위해 굉장히 많이 사용되는 커맨드 이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Usage: ip <span class="o">[</span> OPTIONS <span class="o">]</span> OBJECT <span class="o">{</span> COMMAND <span class="p">|</span> <span class="nb">help</span> <span class="o">}</span>
</span><span class='line'>       ip <span class="o">[</span> -force <span class="o">]</span> -batch filename
</span><span class='line'>where  OBJECT :<span class="o">=</span> <span class="o">{</span> link <span class="p">|</span> addr <span class="p">|</span> addrlabel <span class="p">|</span> route <span class="p">|</span> rule <span class="p">|</span> neigh <span class="p">|</span> ntable <span class="p">|</span>
</span><span class='line'>                   tunnel <span class="p">|</span> tuntap <span class="p">|</span> maddr <span class="p">|</span> mroute <span class="p">|</span> mrule <span class="p">|</span> monitor <span class="p">|</span> xfrm <span class="p">|</span>
</span><span class='line'>                   netns <span class="p">|</span> l2tp <span class="p">|</span> tcp_metrics <span class="p">|</span> token <span class="o">}</span>
</span><span class='line'>       OPTIONS :<span class="o">=</span> <span class="o">{</span> -V<span class="o">[</span>ersion<span class="o">]</span> <span class="p">|</span> -s<span class="o">[</span>tatistics<span class="o">]</span> <span class="p">|</span> -d<span class="o">[</span>etails<span class="o">]</span> <span class="p">|</span> -r<span class="o">[</span>esolve<span class="o">]</span> <span class="p">|</span>
</span><span class='line'>                    -f<span class="o">[</span>amily<span class="o">]</span> <span class="o">{</span> inet <span class="p">|</span> inet6 <span class="p">|</span> ipx <span class="p">|</span> dnet <span class="p">|</span> bridge <span class="p">|</span> link <span class="o">}</span> <span class="p">|</span>
</span><span class='line'>                    -4 <span class="p">|</span> -6 <span class="p">|</span> -I <span class="p">|</span> -D <span class="p">|</span> -B <span class="p">|</span> -0 <span class="p">|</span>
</span><span class='line'>                    -l<span class="o">[</span>oops<span class="o">]</span> <span class="o">{</span> maximum-addr-flush-attempts <span class="o">}</span> <span class="p">|</span>
</span><span class='line'>                    -o<span class="o">[</span>neline<span class="o">]</span> <span class="p">|</span> -t<span class="o">[</span>imestamp<span class="o">]</span> <span class="p">|</span> -b<span class="o">[</span>atch<span class="o">]</span> <span class="o">[</span>filename<span class="o">]</span> <span class="p">|</span>
</span><span class='line'>                    -rc<span class="o">[</span>vbuf<span class="o">]</span> <span class="o">[</span>size<span class="o">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이 커맨드의 가장 변태적이라고 생각한 부분은 다음이다..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip a
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip ad
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip add
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addr
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addre
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addres
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip address
</span></code></pre></td></tr></table></div></figure>


<p>전부 동일한 결과가&hellip;</p>

<p><code>link</code>, <code>route</code> 등도 다 저렇게 되있다고 보면된다.</p>

<p>별건 아닌데 참 <code>괴상한</code> <code>친절한</code> 커맨드라는 생각이 들어서 ㅋㅋ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[draw openstack L2 network architecture automatically]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/03/draw-openstack-l2-network-architecture-automatically/"/>
    <updated>2015-04-03T02:29:52+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/03/draw-openstack-l2-network-architecture-automatically</id>
    <content type="html"><![CDATA[<p>iptables를 좀 보기 편하게 할 수 없는가를 이야기하다가 <a href="http://atoato88.hatenablog.com/entry/2014/01/25/133852">여기</a>사이트를 보게되었다. <br/>
그래서 감동을 받아서 이에 뭔가 남기고자 삽질을 했다. (어짜피 요새 deploy 테스트 하다보면 남는게 시간이다 보니..) <br/>
대략 openstack neutron의 L2 architecture 에 구성요소들을 좀 보기 편하게 그린것이다. <br/>
지금 tunnel architecture를 가진건 없어서 br-tun 쪽은 그리려고 테스트 하진 않았다. 다만 ovs 나 bridge 모드에서 대략적인 그림은 맘에 들게 그려지는 것 같다.</p>

<p>ascii 로 그린 architecture 들이다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan.png" width="1312" height="544" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat.png" width="2526" height="780" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan.png" width="2752" height="544" title="openvswitch-vlan" ></p>

<p>이걸 graphviz 로 그리면 다음과 같다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan-g.png" width="757" height="131" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat-g.png" width="1101" height="491" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan-g.png" width="1594" height="131" title="openvswitch-vlan" ></p>

<p>이걸 3D 로 그리면 다음과 같다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan-3d.png" width="2716" height="1564" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat-3d.png" width="2844" height="1668" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan-3d.png" width="2844" height="2032" title="openvswitch-vlan" ></p>

<p>는 사실 그냥 이전에 그려논 그림이다..</p>

<p>아무튼 해당 그림을 그리기 위해 제작한 스크립트 이다. <br/>
아래 스크립트를 컴퓨트 노드에서 돌리면 해당 정보를 수집해서 그리게 된다. (물론 네트워크 노드도 가능..) <br/>
귀찮아서 하드코딩한 부분들은 편하게 고쳐쓰시길..</p>

<div><script src='https://gist.github.com/8499b653f479766378d8.js'></script>
<noscript><pre><code>#!/bin/bash

sudo apt-get install -qqy ethtool libgraph-easy-perl graphviz &gt; /dev/null

EXCEPT=/tmp/exceptlist
echo &#39;&#39; &gt; $EXCEPT
result=&quot;&quot;

function on_exit() {
  rm -f $EXCEPT
}

trap &quot;on_exit&quot; EXIT

# find ovs br &lt;-&gt; port
if [ &quot;x$(which ovs-vsctl)&quot; != &quot;x&quot; ]; then
  for br in $(sudo ovs-vsctl list-br); do
    for port in $(sudo ovs-vsctl list-ports $br); do
      result=$(echo &quot;$result [$port]----&gt;[$br] [$br]----&gt;[$port] &quot;)
    done
  done
fi

# find br &lt;-&gt; port
for br in $(brctl show | sed &#39;1d&#39; | grep &#39;^[a-z]&#39; | awk &#39;{print $1}&#39;); do
  for port in $(brctl show $br | sed &#39;1d&#39; | sed &#39;s/.*\t.*\t.*\t\(.*\)/\1/g&#39;); do
    result=$(echo &quot;$result [$port]----&gt;[$br] [$br]----&gt;[$port] &quot;)
  done
done

# ip namespace veth
for ns in $(ip netns); do
  for interface in $(ip netns exec $ns ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]); do
    index=$(ip netns exec $ns ethtool -S $interface 2&gt; /dev/null | grep peer_ifindex | awk &#39;{print $2}&#39;)
    ifname=$(ip netns exec $ns ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
    if [ &quot;x$ifname&quot; == &quot;x&quot; ]; then
      ifname=$(ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
      if [ &quot;x$ifname&quot; != &quot;x&quot; ]; then
        echo $ifname &gt;&gt; $EXCEPT
        result=$(echo &quot;$result [$interface]----&gt;[$ifname] [$ifname]----&gt;[$interface] &quot;)
      fi
    fi
  done
done

# ip veth
for interface in $(ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]); do
  if cat $EXCEPT | grep -q &quot;^$interface$&quot; ; then continue ; fi
  index=$(ethtool -S $interface 2&gt; /dev/null | grep peer_ifindex | awk &#39;{print $2}&#39;)
  ifname=$(ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
  if [ &quot;x$ifname&quot; != &quot;x&quot; ]; then
    echo $ifname &gt;&gt; $EXCEPT
    result=$(echo &quot;$result [$interface]----&gt;[$ifname] [$ifname]----&gt;[$interface] &quot;)
  fi
done

# vm tap
for tap in $(ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]  | cut -d&#39; &#39; -f2 | grep &#39;^tap&#39;); do
  vmuuid=$(grep -rl &quot;$tap&quot; /var/lib/nova/instances/*/libvirt.xml | cut -d&#39;/&#39; -f6)
  if [ &quot;x$vmuuid&quot; != &quot;x&quot; ]; then
    result=$(echo &quot;$result [$tap]----&gt;[VM-$vmuuid] [VM-$vmuuid]----&gt;[$tap] &quot;)
  fi
done

rm -f $EXCEPT

echo $result | graph-easy
echo $result | graph-easy -as dot | dot -Tpng -o l2path.png
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping openstack vms in specific host]]></title>
    <link href="http://leoh0.github.io/blog/2015/03/31/ping-openstack-vms-in-specific-host/"/>
    <updated>2015-03-31T09:36:44+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/03/31/ping-openstack-vms-in-specific-host</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/261cc772f9bc5ab916b5.js'></script>
<noscript><pre><code>#!/usr/bin/env bash

declare -A vm_ip
declare -A vm_id
declare -A vm_status

while read -r _ id _ name _ ip _ ; do
  ip=$(echo $ip|cut -d&#39;=&#39; -f2)
  vm_ip[$name]=$ip
  vm_id[$name]=$id
  vm_status[$name]=&quot;S&quot;
  ping -c1 -i0.1 -t1 -W100 $ip &gt; /dev/null
  if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
    vm_status[$name]=&quot;N&quot;
  fi
done&lt; &lt;(nova list --all-tenants --fields name,networks --host $1 | grep &quot;=&quot;)

while read -r _ net_id _ id _ _ _ _ ip _ ; do
  ip=$(echo $ip|cut -d&#39;&quot;&#39; -f2)
  net_id_prefix=${net_id:0:11}
  name=&quot;_DHCP_&quot;$net_id_prefix
  vm_ip[$name]=$ip
  vm_id[$name]=$id
  vm_status[$name]=&quot;S&quot;
  ping -c1 -i0.1 -t1 -W100 $ip &gt; /dev/null
  if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
    vm_status[$name]=&quot;N&quot;
  fi
done&lt; &lt;(neutron port-list --device-owner=network:dhcp --binding:host_id $1 -c network_id -c id -c fixed_ips | sed &#39;2d&#39; | grep &#39;|&#39;)

c=${#vm_ip[@]}
if [ &quot;x$c&quot; == &quot;x0&quot; ] ; then
  echo &quot;there is no vm or dhcp servers.. exit!!&quot;
  exit
fi

while true; do
  for h in ${!vm_ip[@]}; do
    ping -c1 -i0.1 -t1 -W100 ${vm_ip[$h]} &gt; /dev/null
    if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
      if [ &quot;x${vm_status[$h]}&quot; != &quot;xN&quot; ] ; then
        vm_status[$h]=&quot;F&quot;
      fi
    else
      vm_status[$h]=&quot;S&quot;
    fi
  done
  for h in ${!vm_ip[@]}; do
    case ${vm_status[$h]} in
      S)
        status=&quot;\033[01;32mOK\033[00m&quot; ;;
      F)
        status=&quot;\033[01;31mFAIL\033[00m&quot; ;;
      N)
        status=&quot;\033[01;33mNOCON\033[00m&quot; ;;
    esac
    pre=$(printf &quot;%-30s  %-15s %-32s %s\n&quot; &quot;${h::30}&quot; &quot;${vm_ip[$h]}&quot; &quot;${vm_id[$h]}&quot; &quot;$status&quot;)
    echo -en &quot;\033[K&quot;
    echo -en &quot;$pre\n&quot;
  done
  sleep 1
  echo -en &quot;\033[${c}A&quot;
done
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[만약 사용자가 ssh password나 key등을 잃어 버려서 도저히 vm instance에 접속할 수 없을때..]]></title>
    <link href="http://leoh0.github.io/blog/2015/03/14/if-you-forget-your-password-or-key/"/>
    <updated>2015-03-14T22:00:57+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/03/14/if-you-forget-your-password-or-key</id>
    <content type="html"><![CDATA[<p>우선은 nbd로 attach 하여 mount 해서 접근 가능하다. <br/>
이후에 아래와 같이 key를 추가해도 되고 각 os 버전에 맞게 패스워드를 새로 해슁하여 <code>/etc/shadow</code> 를 변경해도 된다. <br/>
물론 마지막에 dettach 를 꼭 신경써서 해줘야 한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># attach disk</span>
</span><span class='line'>qemu-nbd -c /dev/nbd0 /var/lib/nova/instances/10794bbb-7856-4ed6-ab39-32afbc01156a/disk
</span><span class='line'>mount /dev/nbd0p1 /mnt
</span><span class='line'>
</span><span class='line'><span class="c"># insert a new key to target user</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;&#39;&#39;NEWKEY&#39;&#39;&#39;</span> &gt;&gt; /mnt/home/USER/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'><span class="c"># dettach disk</span>
</span><span class='line'>umount /mnt
</span><span class='line'>qemu-nbd -d /dev/nbd0p1
</span></code></pre></td></tr></table></div></figure>


<p>하지만 이상하게도 저런 수정을 했을때 아예 접속이 불가능한 경우들이 생긴다. sshd config가 잘못되었는지 고치기 시작하면 아예 ssh 조차도 뜨질 못한다. <br/>
그이유는 아래와 같이 selinux의 보안 설정으로 위변조된 파일 사용시 차단되는 보안이 설정되어 있기 때문이다.</p>

<p>즉, selinux를 살펴 봤을때 아래 같이 selinux가 세팅되어 있을 수 있다. <br/>
그렇다면 위와 같이 edit 했을때 관련 키, 계정들을 접근 못하게 된다.</p>

<figure class='code'><figcaption><span>/etc/selinux/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This file controls the state of SELinux on the system.</span>
</span><span class='line'><span class="c"># SELINUX= can take one of these three values:</span>
</span><span class='line'><span class="c">#     enforcing - SELinux security policy is enforced.</span>
</span><span class='line'><span class="c">#     permissive - SELinux prints warnings instead of enforcing.</span>
</span><span class='line'><span class="c">#     disabled - No SELinux policy is loaded.</span>
</span><span class='line'><span class="nv">SELINUX</span><span class="o">=</span>enforcing
</span><span class='line'><span class="c"># SELINUXTYPE= can take one of these two values:</span>
</span><span class='line'><span class="c">#     targeted - Targeted processes are protected,</span>
</span><span class='line'><span class="c">#     mls - Multi Level Security protection.</span>
</span><span class='line'><span class="nv">SELINUXTYPE</span><span class="o">=</span>targeted
</span></code></pre></td></tr></table></div></figure>


<p>그렇기 때문에 이런 케이스는 아래와 같이 <code>selinux</code>를 <em>disable</em> 해줘야 한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># attach disk</span>
</span><span class='line'>qemu-nbd -c /dev/nbd0 /var/lib/nova/instances/10794bbb-7856-4ed6-ab39-32afbc01156a/disk
</span><span class='line'>mount /dev/nbd0p1 /mnt
</span><span class='line'>
</span><span class='line'><span class="c"># insert a new key to target user</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;&#39;&#39;NEWKEY&#39;&#39;&#39;</span> &gt;&gt; /mnt/home/USER/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'><span class="c"># disable selinux</span>
</span><span class='line'>sed -i <span class="s1">&#39;s/^SELINUX=.*$/SELINUX=disabled/g&#39;</span> /mnt/etc/selinux/config
</span><span class='line'>
</span><span class='line'><span class="c"># dettach disk</span>
</span><span class='line'>umount /mnt
</span><span class='line'>qemu-nbd -d /dev/nbd0p1
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[custom URL for chef server 12]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/24/custom-url-for-chef-server-12/"/>
    <updated>2015-02-24T23:29:19+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/24/custom-url-for-chef-server-12</id>
    <content type="html"><![CDATA[<p>chef server ssl verification 때문에 그냥 domain 인증서를 제대로 적용하려고 했는데 엄청 삽질했다. 아마 chef 11 에서 chef 12 로 올라가면서 config 위치가 변경된거 같다.</p>

<p><a href="http://www.bitlancer.com/2014/10/custom-chef-server-url/">여기</a>에서 관련 정보를 얻을 수 있었는데 차이점은 /etc/chef-server/chef-server.rb 가 아닌 /etc/opscode/chef-server.rb 파일을 수정해서 적용 가능했다.</p>

<p>아래 처럼 해당 파일을 수정한다.</p>

<figure class='code'><figcaption><span>/etc/opscode/chef-server.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">server_name</span> <span class="o">=</span> <span class="s2">&quot;chef.yourdomain.com&quot;</span>
</span><span class='line'><span class="n">api_fqdn</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">bookshelf</span><span class="o">[</span><span class="s1">&#39;vip&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;https://</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;server_name&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;ssl_certificate&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/var/opt/chef-server/nginx/ca/</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">.crt&quot;</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;ssl_certificate_key&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/var/opt/chef-server/nginx/ca/</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">.key&quot;</span>
</span><span class='line'><span class="n">lb</span><span class="o">[</span><span class="s1">&#39;fqdn&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>이후에 해당 컨피그 내용으로 적용한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chef-server-ctl reconfigure
</span></code></pre></td></tr></table></div></figure>


<p>이후 테스트해보면 끝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[edit vagrant box for vagrant-libvirt]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt/"/>
    <updated>2015-02-24T13:22:36+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt</id>
    <content type="html"><![CDATA[<h1>check file</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>file trusty64_vagrant_box_image.img
</span><span class='line'>trusty64_vagrant_box_image.img: QEMU QCOW Image <span class="o">(</span>unknown version<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>init</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install -qqy lvm2
</span><span class='line'>modprobe nbd
</span></code></pre></td></tr></table></div></figure>


<h1>attach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /var/lib/libvirt/images
</span><span class='line'>qemu-nbd -c /dev/nbd0 <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/trusty64_vagrant_box_image.img
</span><span class='line'>vgscan
</span><span class='line'>vgchange -ay
</span><span class='line'>mount /dev/mapper/vagrant--vg-root /mnt
</span></code></pre></td></tr></table></div></figure>


<h1>detach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /
</span><span class='line'>umount /mnt
</span><span class='line'>vgchange -an vagrant-vg
</span><span class='line'>qemu-nbd -d /dev/nbd0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NIC 1개로 compute node를 vlan type으로 neutron을 사용하여 구성하기 위한 팁]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/11/build-openstack-node-using-just-1-nic/"/>
    <updated>2015-02-11T17:12:39+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/11/build-openstack-node-using-just-1-nic</id>
    <content type="html"><![CDATA[<p>gre 같은 tunnel 을 사용한다면 NIC 하나로 구성 할 수 있겠지만 그게 아니라면 일반적으로는 management 용 NIC 한개와 service 용 NIC 한개가 필요하다.</p>

<p>우선 아래와 같은 상태가 2 NIC을 사용하는 일반적인 구성이다.</p>

<p>그림 처럼 eth0은 management를 위한 ip로 이용되며 eth1을 guest interface(vlan 이라면 0.0.0.0)로 사용할 수 있다.</p>

<p><img src="http://leoh0.github.io/images/1nic-neutron-1.png" width="449" height="487"></p>

<p>단도직입적으로 ethernet 한개로는 아래와 같이 구성하면 된다.</p>

<p>우선 eth0은 0.0.0.0 으로 ip를 사용안하는 대신 br0 부분에서 기존의 management용 ip를 가져간다.</p>

<p><img src="http://leoh0.github.io/images/1nic-neutron-2.png" width="449" height="487"></p>

<p>아래와 같은 흐름으로 진행하면 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># br0 switch 추가 (자동으로 br0 switch 에는 br0 interface가 달려있는 상태로 생성됨)</span>
</span><span class='line'>ovs-vsctl add-br br0
</span><span class='line'><span class="c"># br0 switch 에 eth0 interface를 추가 시켜줌</span>
</span><span class='line'>ovs-vsctl add-port br0 eth0
</span><span class='line'><span class="c"># ip 및 route 세팅</span>
</span><span class='line'>/sbin/ifconfig eth0 0.0.0.0 up
</span><span class='line'>/sbin/ifconfig br0 x.x.x.x/xx up
</span><span class='line'>
</span><span class='line'><span class="c"># br-eth0 인터페이스를 생성 (br-ex 도 비슷)</span>
</span><span class='line'>ovs-vsctl add-br br-eth0
</span><span class='line'><span class="c"># br0 switch와 br-eth0 을 연결 시킬 veth 생성</span>
</span><span class='line'>ip link add br0-veth <span class="nb">type </span>veth peer name br-eth0-veth
</span><span class='line'>ovs-vsctl add-port br0 br0-veth
</span><span class='line'>ovs-vsctl add-port br-eth0 br-eth0-veth
</span></code></pre></td></tr></table></div></figure>


<p>만약 network node 라면 br-eth0 대신 br-ex 를 사용하고 추가적으로 nat 를 사용하기 위한 ip 하나만 할당하면 된다.</p>
]]></content>
  </entry>
  
</feed>
