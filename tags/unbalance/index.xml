<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unbalance on &gt; /dev/null</title>
    <link>https://leoh0.github.io/tags/unbalance/</link>
    <description>Recent content in Unbalance on &gt; /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 29 Sep 2016 23:30:20 +0900</lastBuildDate>
    
	<atom:link href="https://leoh0.github.io/tags/unbalance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>추가 - Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..</title>
      <link>https://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/</link>
      <pubDate>Thu, 29 Sep 2016 23:30:20 +0900</pubDate>
      
      <guid>https://leoh0.github.io/blog/2016/09/29/cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/</guid>
      <description>예전에 아래글을 그냥 balancing 을 위해 id 를 잘 분배하자 라는식으로 결론 냈지만.
Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..
user의 token리스트를 관리하지 않으면 부담은 훨씬 줄어든다.
물론 user의 password 변경 등으로 기존 모든 token을 revoke 시키는 경우때문에 이런 user 단위로 token리스트를 관리해야 하지만
그걸 포기하면 그냥 코드 몇줄 추가로 간단하게 정리할 수 있다.
diff --git a/keystone/token/persistence/backends/memcache.py b/keystone/token/persistence/backends/memcache.py index e6b0fca..3f0de68 100644 --- a/keystone/token/persistence/backends/memcache.py +++ b/keystone/token/persistence/backends/memcache.py @@ -37,3 +37,6 @@ class Token(kvs.Token):  kwargs[&amp;#39;memcached_expire_time&amp;#39;] = CONF.</description>
    </item>
    
    <item>
      <title>추가 - Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..</title>
      <link>https://leoh0.github.io/post/2016-09-29-cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/</link>
      <pubDate>Thu, 29 Sep 2016 23:30:20 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2016-09-29-cuga-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossda-dot/</guid>
      <description>예전에 아래글을 그냥 balancing 을 위해 id 를 잘 분배하자 라는식으로 결론 냈지만.
Keystone에서 Token Backend로 사용하는 Memcached가 Unbalanced되었다..
user의 token리스트를 관리하지 않으면 부담은 훨씬 줄어든다.
물론 user의 password 변경 등으로 기존 모든 token을 revoke 시키는 경우때문에 이런 user 단위로 token리스트를 관리해야 하지만
그걸 포기하면 그냥 코드 몇줄 추가로 간단하게 정리할 수 있다.
diff --git a/keystone/token/persistence/backends/memcache.py b/keystone/token/persistence/backends/memcache.py index e6b0fca..3f0de68 100644 --- a/keystone/token/persistence/backends/memcache.py +++ b/keystone/token/persistence/backends/memcache.py @@ -37,3 +37,6 @@ class Token(kvs.Token):  kwargs[&amp;#39;memcached_expire_time&amp;#39;] = CONF.</description>
    </item>
    
    <item>
      <title>keystone에서 token backend로 사용하는 memcached가 unbalanced되었다..</title>
      <link>https://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:45 +0900</pubDate>
      
      <guid>https://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/</guid>
      <description>해당 클러스터는 kilo 버전으로 구성 되었었고 token 을 memcached 에 저장하고 있었다.
또한 kilo 부터 dogpile.cache 는 거의 고정으로 들어가 있가 있어서 해당 모듈을 사용했다.
이런 상황을 디버깅 했던 경험을 정리해 본다.
아래는 문제가 되었던 memcached host의 in/out bound 그래프이다.
수치는 가려서 스케일만 감으로 볼 수 있게 남겼다.
A 서버   A 서버  
B 서버   B 서버  
최초엔 keystone과 memcached connection 이 unbalance 할것이라고 생각했으나 그런 정황은 없었다.</description>
    </item>
    
    <item>
      <title>keystone에서 token backend로 사용하는 memcached가 unbalanced되었다..</title>
      <link>https://leoh0.github.io/post/2016-04-27-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:45 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2016-04-27-keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/</guid>
      <description>해당 클러스터는 kilo 버전으로 구성 되었었고 token 을 memcached 에 저장하고 있었다.
또한 kilo 부터 dogpile.cache 는 거의 고정으로 들어가 있가 있어서 해당 모듈을 사용했다.
이런 상황을 디버깅 했던 경험을 정리해 본다.
아래는 문제가 되었던 memcached host의 in/out bound 그래프이다.
수치는 가려서 스케일만 감으로 볼 수 있게 남겼다.
A 서버   A 서버  
B 서버   B 서버  
최초엔 keystone과 memcached connection 이 unbalance 할것이라고 생각했으나 그런 정황은 없었다.</description>
    </item>
    
  </channel>
</rss>