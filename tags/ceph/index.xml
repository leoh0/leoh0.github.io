<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ceph on &gt; /dev/null</title>
    <link>https://leoh0.github.io/tags/ceph/</link>
    <description>Recent content in ceph on &gt; /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Sep 2018 11:43:14 +0900</lastBuildDate>
    
	<atom:link href="https://leoh0.github.io/tags/ceph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Migrate Ceph RBD to CSI Ceph RBD in K8S</title>
      <link>https://leoh0.github.io/post/2018-09-09-how-to-migrate-ceph-rbd-to-csi-ceph-rbd-in-k8s/</link>
      <pubDate>Sun, 09 Sep 2018 11:43:14 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2018-09-09-how-to-migrate-ceph-rbd-to-csi-ceph-rbd-in-k8s/</guid>
      <description>Container Storage Interface가 왜 필요한가 Container Storage Interface(이하 CSI)는 k8s에서 확장 가능한 볼륨 사용을 위한 현존하는 최고의 방법입니다. 기존에 방법이 무엇이 문제였는지는 2가지로 접근 가능합니다.
 볼륨을 생성(or 삭제)할때
 볼륨을 생성할때는 기존에는 controller manager중에 controller가 볼륨을 생성하는식이였습니다. 예를 들어 Persistent volume claim(이하 PVC)이 들어올시 PVC를 watch 하는 controller가 이 변화를 감지하며 volume을 생성(provisioning) 했습니다. 하지만 대부분의 볼륨들을 생성 하려면 이를 위한 바이너리가 있어야 합니다.(예를 들어 ceph같은 경우 rbd 바이너리) 하지만 이런 바이너리들이 in-tree volume type들이 추가될때마다 같이 추가되면 용량이나 버전 관리에 힘든점이 있기때문에 이를 밖으로 빼서 관리하려고 했습니다.</description>
    </item>
    
    <item>
      <title>ceph pg incomplete: rbd image-format 2 data recovery</title>
      <link>https://leoh0.github.io/blog/2015/01/16/jiogyi-ceph-rbd-image-format-2-data-recovering/</link>
      <pubDate>Fri, 16 Jan 2015 00:54:53 +0900</pubDate>
      
      <guid>https://leoh0.github.io/blog/2015/01/16/jiogyi-ceph-rbd-image-format-2-data-recovering/</guid>
      <description>ceph: pg incomplete is worst nightmare   2014 open user survey block storage   2014년 유저 설문조사에서 찾을 수 있듯이 ceph은 openstack의 block storage의 de facto standard 라고 말할 수 있다.
ceph을 사용한지 조금 되었지만 큰 문제가 한번도 없어서 일명 믿음의 ceph이라고 칭송하며 내부구조도 살필일 없이 블랙박스로 두고 잘 쓰고 있었었다.
하지만 근래에 급작스런 몇가지 문제로 ceph의 placement group(pg) 들이 incomplete 상태로 떨어졌고..
말그대로 절망했다.
왜냐하면 incomplete 상태로 떨어진 pg들이 절대 다른 상태로 돌아올수 없으며 해당 pg에 접근하는 모든 request는 slow request화 되며 응답을 주지 않는다.</description>
    </item>
    
    <item>
      <title>ceph pg incomplete: rbd image-format 2 data recovery</title>
      <link>https://leoh0.github.io/post/2015-01-16-jiogyi-ceph-rbd-image-format-2-data-recovering/</link>
      <pubDate>Fri, 16 Jan 2015 00:54:53 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2015-01-16-jiogyi-ceph-rbd-image-format-2-data-recovering/</guid>
      <description>ceph: pg incomplete is worst nightmare   2014 open user survey block storage   2014년 유저 설문조사에서 찾을 수 있듯이 ceph은 openstack의 block storage의 de facto standard 라고 말할 수 있다.
ceph을 사용한지 조금 되었지만 큰 문제가 한번도 없어서 일명 믿음의 ceph이라고 칭송하며 내부구조도 살필일 없이 블랙박스로 두고 잘 쓰고 있었었다.
하지만 근래에 급작스런 몇가지 문제로 ceph의 placement group(pg) 들이 incomplete 상태로 떨어졌고..
말그대로 절망했다.
왜냐하면 incomplete 상태로 떨어진 pg들이 절대 다른 상태로 돌아올수 없으며 해당 pg에 접근하는 모든 request는 slow request화 되며 응답을 주지 않는다.</description>
    </item>
    
  </channel>
</rss>