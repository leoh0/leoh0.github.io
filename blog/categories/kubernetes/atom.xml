<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kubernetes | > /dev/null]]></title>
  <link href="http://leoh0.github.io/blog/categories/kubernetes/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2017-10-23T21:30:20+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[how to make unofficial kubernetes pdf documents]]></title>
    <link href="http://leoh0.github.io/blog/2017/10/23/how-to-make-unofficial-kubernetes-pdf-documents/"/>
    <updated>2017-10-23T21:21:47+09:00</updated>
    <id>http://leoh0.github.io/blog/2017/10/23/how-to-make-unofficial-kubernetes-pdf-documents</id>
    <content type="html"><![CDATA[<p><img src="/images/kubernetes-production-grade-container-orchestration.png" alt="kubernetes" /></p>

<h3><a href="/images/kubernetes-documents.pdf">download pdf</a></h3>

<hr />

<h3>왜?</h3>

<p>밖에서 심심할때 종이로 출력해서 문서를 좀 더 봐야겠다는 생각에 <code>pdf</code> 버전을 구해보려고 했으나. 우선 k8s webpage를 관리하는 <a href="https://github.com/kubernetes/website">website</a>프로젝트에서 아래와 같이 <a href="https://github.com/kubernetes/website/issues/666#issuecomment-271741289">지원을 안한다고 딱잘라서 이야기</a> 하는것을 찾았다.</p>

<blockquote><p>&hellip; we don&rsquo;t plan to make PDFs available.</p></blockquote>

<p>그리고 마땅히 검색했을때 방법이 없기에 만들어야 겠다고 생각했다.</p>

<h3>어떻게 할까?</h3>

<p>외부의 웹사이트를 pdf 로 출력하는 방법들은 여러가지가 있다 그냥 웹 주소를 넣으면 바로 pdf 로 변환해 주는 솔루션이나 사이트들도 많다.(물론 단일 페이지만 렌더링 한다.)</p>

<p>하지만 이럴 경우 footer 와 같이 pdf 로 볼때 불 필요한 부분들이 너무 많아서 좋지 않다. 그래서 이번에 진행할때는 그냥 실제 코드에서 필요없는 부분들을 제거해서 렌더링 시키는 방법으로 하기로 했다.</p>

<p><em>물론 web client를 패치하는 방법이나 adblock 등으로 특정 구문들을 제거하는 방법들도 있으나 지금 방법보다 더 손이 많이 갈것 같았다..</em></p>

<h3>준비 환경</h3>

<p>우선 레포지토리를 받아서 stable중 가장 최신인 1.8버전으로 체크아웃 한다.</p>

<pre><code>$ git clone https://github.com/kubernetes/website
$ cd website
$ git checkout release-1.8
</code></pre>

<p>jekyll project이니 Gemfile로 디펜던시를 인스톨한다.</p>

<pre><code>$ bundle install
</code></pre>

<p>이후 build 해서 md 파일들을 html 로 빌드 한다.</p>

<pre><code>$ make build
</code></pre>

<h3>어떤 페이지들을 pdf로 출력할까?</h3>

<p>아래와 같이 왼쪽 도큐먼트 리스트들 기준으로 출력하고자 해당 페이지만 아래와 같은 스크립트로 추출했다.
여기에 아무래도 api spec과 같은 양이 많은 reference 를 제외하고, 또 포맷이 안맞는 외부링크 제외한 페이지를 필터링 했다.</p>

<p><img src="/images/k8sdocstoc.png" alt="image" /></p>

<pre><code>$ cd _site/docs/
$ cat home/index.html setup/index.html concepts/index.html \
tasks/index.html tutorials/index.html | \
grep 'a class="item"' | grep 'href="/docs' | \
uniq | cut -d'"' -f6
/docs/home/
/docs/tasks/debug-application-cluster/troubleshooting/
/docs/home/contribute/create-pull-request/
/docs/home/contribute/write-new-topic/
/docs/home/contribute/stage-documentation-changes/
/docs/home/contribute/page-templates/
/docs/home/contribute/review-issues/
/docs/home/contribute/style-guide/
/docs/setup/
/docs/setup/pick-right-solution/
/docs/getting-started-guides/minikube/
/docs/setup/independent/install-kubeadm/
/docs/setup/independent/create-cluster-kubeadm/
/docs/getting-started-guides/scratch/
...
</code></pre>

<h3>출력시키지 않을 부분들을 지우기</h3>

<p>아래와 같이 layout에서 출력시키기 싫은 부분들을 다 지웠다. 기존코드와 비교해 보면 한눈에 알 수 있을 것이다.</p>

<p><a href="https://github.com/leoh0/website/commit/6bde83fce7174f106eb63bbf98af6aacf2a2b0c4">변경된 코드</a></p>

<p>물론 이후에 다시 빌드 한다.</p>

<pre><code>$ make build
</code></pre>

<h3>여기에 웹페이지 들을 pdf 화 하기</h3>

<p>우선 출력을 위해서 서버를 띄운다.</p>

<pre><code>$ make serve
bundle exec jekyll serve
Configuration file: /Users/al/Projects/k8s/website/_config.yml
Configuration file: /Users/al/Projects/k8s/website/_config.yml
            Source: /Users/al/Projects/k8s/website
       Destination: /Users/al/Projects/k8s/website/_site
 Incremental build: enabled
      Generating...
                    done in 7.797 seconds.
 Auto-regeneration: enabled for '/Users/al/Projects/k8s/website'
Configuration file: /Users/al/Projects/k8s/website/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
...
</code></pre>

<p>그리고 여러가지 방법이 있겠지만 chrome이 깔려있으면 가장 간단할 headless로 pdf 로 출력 시킨다. 아래의 list는 위의 url들 리스트 이다.</p>

<pre><code>$ alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

$ for url in $(cat list); do
  echo $url
  # url로 파일이름을 만듬
  file=$(echo $url.pdf | sed 's|/docs/||g;s|/|-|g')
  chrome --headless --disable-gpu --print-to-pdf=$file http://localhost:4000$url
done
</code></pre>

<p>위와 같이하면 각 항목들의 url들이 pdf 화 된다.</p>

<h3>pdf 는 어떻게 합치지?</h3>

<p>py27 기준으로 pdfmerge 를 쓰면 간편하다.
아래와 같이 커맨드로 합치면 된다.</p>

<pre><code>$ pip install pdfmerge
$ pdfmerge -o output.pdf home-.pdf \
tasks-debug-application-cluster-troubleshooting-.pdf \
home-contribute-create-pull-request-.pdf \
...
</code></pre>

<h3>결론</h3>

<p>이 과정을 거쳐서 pdf를 만들어 보면 왜 pdf를 지원하지 않는지 알게된다.</p>

<p>왜냐하면 나온결과가 1818 페이지의 pdf 이기 때문이다.</p>

<p>그래서 결론적으로 그냥 website에서 보는게 나은 것 같다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k8s tools for watching log and login to multiple containers]]></title>
    <link href="http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers/"/>
    <updated>2017-07-27T00:58:28+09:00</updated>
    <id>http://leoh0.github.io/blog/2017/07/27/k8s-tools-for-watching-log-and-login-multiple-containers</id>
    <content type="html"><![CDATA[<p><img src="/images/showterm-2017-07-27-01-10-29.png" width="780" height="290"></p>

<p>k8s 사용하면서 개인 취향에 맞게 작성한 자작 스크립트 몇가지 소개해 드리려고 합니다.</p>

<h1>watching log</h1>

<p>k8s 에서 pod들의 로그 볼일 들이 많다보니 command 일일치다보니 불편했는데 <code>kubetail</code>이란 프로젝트가 있었습니다.  <br/>
덕분에 잘 쓰고 있었는데 인터페이스가 개인취향에 안맞아서 약간 수정해서 쓰고 있습니다.  <br/>
전반적으로 pod 선택 방법의 변경과 비슷한 이름으로 auto tailing 기능을 추가 했습니다.</p>

<p>아래들이 대표적인 기능 입니다.</p>

<ul>
<li><p>선택된것과 같은 pod들을 전체 log tailing 하고 변화가 있을시 auto reload 함  <br/>
(다만 예외적으로 안되는 케이스 들이 아직 있긴 합니다..)</p>

<pre><code class="bash">$ kt
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/df8a9f96e761012d3bb2c">여기</a>를 참고하시면 됩니다.  <br/>
<img src="/images/kt.gif" width="800"></li>
</ul>
</li>
<li><p><code>-m</code> 옵션시 자신이 원하는 pod들을 선택해서 log tailing 함. 다만, auto reload는 지원 하지 않음</p>

<pre><code class="bash">$ kt -m
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/f4ab6a8ed080700ece976">여기</a>를 참고하시면 됩니다.  <br/>
<img src="/images/ktm.gif" width="800"></li>
</ul>
</li>
<li><p><code>-l</code> 옵션시 선택한 pod의 전체 로그를 본다. fzf를 이용해서 log를 탐색 한다.</p>

<pre><code class="bash">$ kt -l
</code></pre>

<ul>
<li>자세한 영상은 <a href="http://showterm.io/6381c317d2e42920c0227">여기</a>를 참고하시면 됩니다.  <br/>
<img src="/images/ktl.gif" width="800"></li>
</ul>
</li>
</ul>


<p>준비물은 아래와 같습니다.</p>

<ul>
<li><p><strong>fzf</strong></p>

<pre><code class="bash">$ brew install fzf
</code></pre></li>
<li><strong>kubectl</strong>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></li>
</ul>
</li>
</ul>


<p>설치 방법은 아래와 같습니다.</p>

<pre><code class="bash">$ brew tap leoh0/kt &amp;&amp; brew install kt
</code></pre>

<p>code는 아래에서 확인 가능합니다.</p>

<p><a href="https://github.com/leoh0/kt">https://github.com/leoh0/kt</a></p>

<h1>login container</h1>

<p>pod들 여러개에 동시에 login(bash, sh등) 하여 shell command를 사용하고 싶어서
기존의 cssh 같은 비슷한 메커니즘으로 스크립트 작성해서 사용하고 있습니다.</p>

<ul>
<li>아래는 사용 영상입니다. 자세한 영상은 <a href="http://showterm.io/c58f9999d3ee6db03aa81">여기</a>를 참고하시면 됩니다.
<img src="/images/kl.gif" width="800"></li>
</ul>


<p>설치 방법은 아래와 같이 rc나 profile에 등록해서 사용하시면 됩니다.
<code>bash
curl -s 'https://gist.githubusercontent.com/leoh0/'\
'c47dca1c98f998f0d0884c3560afac54/raw/'\
'1e1e9fb085d2c1a94293ae87e3922519d8342adb/k8s_login.sh' | \
    tee -a ~/.bash_profile &amp;&amp; source ~/.bash_profile
</code></p>

<p>아래는 전체 소스입니다.
<a href="https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54">https://gist.github.com/leoh0/c47dca1c98f998f0d0884c3560afac54</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> kl<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  chkcommand<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">command</span> -v <span class="nv">$1</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span>amp<span class="p">;</span><span class="m">1</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> &gt;<span class="p">&amp;</span>amp<span class="p">;</span><span class="m">2</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Plz install <span class="nv">$1</span> first. Aborting.<span class="p">&amp;</span>rdquo<span class="p">;;</span> <span class="k">return</span> 1<span class="p">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  chkcommand fzf <span class="o">||</span> <span class="k">return</span> 1
</span><span class='line'>  chkcommand tmux <span class="o">||</span> <span class="k">return</span> 1
</span><span class='line'>  chkcommand kubectl <span class="o">||</span> <span class="k">return</span> 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="nv">pods</span><span class="o">=</span><span class="k">$(</span>kubectl get pods <span class="p">&amp;</span>ndash<span class="p">;</span>all-namespaces <span class="p">|</span> sed <span class="p">&amp;</span>lsquo<span class="p">;</span>1d<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> fzf -x -m -e +s <span class="p">&amp;</span>ndash<span class="p">;</span>reverse <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nb">bind</span><span class="o">=</span>left:page-up,right:page-down <span class="p">&amp;</span>ndash<span class="p">;</span>no-mouse <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="s2">&quot;,&amp;ldquo;$2}&amp;rsquo;);</span>
</span><span class='line'><span class="s2">  if [[ $pods != &amp;rdquo;&amp;ldquo; ]]; then</span>
</span><span class='line'><span class="s2">      init=&quot;</span><span class="nb">true</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>      <span class="nv">tmuxname</span><span class="o">=</span>k8s-ns-<span class="k">$(</span>date +%s<span class="k">)</span>
</span><span class='line'>      tmux <span class="nb">kill</span>-session -t <span class="nv">$tmuxname</span> &gt; /dev/null 2&gt; /dev/null <span class="o">||</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">      </span><span class="k">while</span> <span class="nb">read </span>line <span class="p">;</span><span class="k">do</span>
</span><span class='line'>        <span class="nv">NS</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> cut -d<span class="err">&#39;</span>,<span class="p">&amp;</span>lsquo<span class="p">;</span> -f1<span class="k">)</span>
</span><span class='line'>        <span class="nv">NAME</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> cut -d<span class="p">&amp;</span>rsquo<span class="p">;</span>,<span class="p">&amp;</span>lsquo<span class="p">;</span> -f2<span class="k">)</span>
</span><span class='line'>        <span class="nv">connect</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>kubectl <span class="nb">exec</span> -ti <span class="nv">$NAME</span> -n <span class="nv">$NS</span> <span class="p">&amp;</span>ndash<span class="p">;</span> bash <span class="o">||</span> kubectl <span class="nb">exec</span> -ti <span class="nv">$NAME</span> -n <span class="nv">$NS</span> <span class="p">&amp;</span>ndash<span class="p">;</span> sh <span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        tmux new-session -d -s <span class="nv">$tmuxname</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span><span class="k">${</span><span class="nv">KUBECONFIG</span><span class="k">}</span><span class="p">;</span> <span class="nv">$connect</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">init</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">==</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">true</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span> <span class="k">$(</span>tmux ls 2&gt; /dev/null <span class="p">|</span> grep <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">tmuxname</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">|</span> wc -l<span class="k">)</span> &gt; <span class="m">0</span> <span class="k">)</span><span class="o">)</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>            <span class="nv">init</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">false</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>          <span class="k">fi</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          tmux split-window -t <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">tmuxname</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">connect</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>          tmux <span class="k">select</span>-layout -t <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">tmuxname</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>tiled<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'>      <span class="k">done</span> <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$pods</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>      tmux <span class="nb">set</span>-window-option -t <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">tmuxname</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> synchronize-panes on
</span><span class='line'>      tmux -2 a -t <span class="nv">$tmuxname</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>참고: <a href="https://github.com/johanhaleby/kubetail">original kubetail</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install openstack on macos Sierra using kolla-kubernetes with xhyve]]></title>
    <link href="http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve/"/>
    <updated>2016-10-13T00:02:06+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/10/13/install-openstack-on-macos-sierra-using-kolla-kubernetes-and-xhyve</id>
    <content type="html"><![CDATA[<p><a href="http://showterm.io/404f651b005c52298bc9f"><img src="/images/2016-10-13_00-04-57.jpg" width="924" height="533"></a>
<a href="http://showterm.io/404f651b005c52298bc9f">클릭해서 과정 보기</a></p>

<p><code>kubernetes</code> 로 <code>openstack mitaka</code>를 설치해 봤습니다.</p>

<p>위의 이미지를 클릭하면 전과정을 보실 수 있습니다. 참고하시면 좋을 것 같습니다.</p>

<p>대략 31분 정도 걸려서 minikube 구성 부터 전체 셋업 및 vm 2개 띄워서 로그인 테스트 합니다.</p>

<p>그리고 저는 <code>macos Sierra</code> 에서 <code>xhyve</code> 로 8G 머신을 만들어서 사용을 했습니다.  <br/>
linux 머신이 있으면 kvm을 이용하시는 것도 좋을것 같습니다.  <br/>
windows 환경에선 xhyve 외에도 virtual box 등을 이용하셔도 좋을 것 같습니다.</p>

<p>셋업할때 <code>kubernetes-cli</code> 는 <code>1.3.6</code> 버전과 <code>minikube</code> 는 <code>0.11.0</code> 버전을 이용합니다.</p>

<p>앞서 말한 2가지 버전만 잘 지키고 bootstraping 이나 container가 올라올때 잘 기다리고 진행하면 크게 어렵게 진행 하실 수 있습니다.</p>

<p>자세한건 <a href="https://github.com/openstack/kolla-kubernetes/blob/master/doc/source/minikube-quickstart.rst">kolla-kubernetes의 도큐먼트</a>를 참고하시면 도움이 되실 겁니다.</p>

<p>kolla-kubernetes 를 이용한 방법으로 기존 kolla 와 비슷한 플로우로 진행합니다.  <br/>
아무튼 그냥 devstack 처럼 테스트 용으로 보시면 좋을겁니다.</p>
]]></content>
  </entry>
  
</feed>
