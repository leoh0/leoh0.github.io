<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[> /dev/null]]></title>
  <link href="http://leoh0.github.io/atom.xml" rel="self"/>
  <link href="http://leoh0.github.io/"/>
  <updated>2016-05-17T03:18:22+09:00</updated>
  <id>http://leoh0.github.io/</id>
  <author>
    <name><![CDATA[leoh0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac os x - nslookup, host, dig works with /etc/resolv.conf, but ping, ssh doesnt work]]></title>
    <link href="http://leoh0.github.io/blog/2016/05/17/mac-os-x-nslookup/"/>
    <updated>2016-05-17T02:24:09+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/05/17/mac-os-x-nslookup</id>
    <content type="html"><![CDATA[<p>Mac os x 는 linux와 다른 resolving을 제공한다.</p>

<p>간단하게만 이야기 하면 /etc/resolv.conf 외에도 /etc/resolver/* 에 원하는 dns명을 기록해 놓으면 해당 domain name을 갖을시 해당하는 nameserver로 쿼리를 할 수가 있다.</p>

<p>예를 들어 아래와 같이 설정했다면 *.local 과 같은 도메인은 10.10.1.65로 dns 서버를 사용가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolver/local
</span><span class='line'>nameserver 10.10.1.65</span></code></pre></td></tr></table></div></figure>


<p>다만 이건 nslookup, host, dig 와 같은 dns lookup command 들에서는 나타나지 않는다. 이런 커맨드는 linux와 같이 /etc/resolv.conf 의 dns 서버를 이용해서 lookup을 하게 된다. (/etc/hosts 도..)</p>

<p>아무튼 이 설명은 아래 커맨드 들의 man page를 보면 알수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man dig
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The dig command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by dig may
</span><span class='line'>       differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS routing
</span><span class='line'>       library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man nslookup
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The nslookup command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by
</span><span class='line'>       nslookup may differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS
</span><span class='line'>       routing library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ man host
</span><span class='line'>...
</span><span class='line'>Mac OS X NOTICE
</span><span class='line'>       The host command does not use the host name and address resolution or the DNS query routing mechanisms used by other processes running on Mac OS X.  The results of name or address queries printed by host may
</span><span class='line'>       differ from those found by other processes that use the Mac OS X native name and address resolution mechanisms.  The results of DNS queries may also differ from queries that use the Mac OS X DNS routing
</span><span class='line'>       library.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>하지만 ssh, ping은 /etc/resolver/* 외에도 설정되어 있는 resolver dns 로 쿼리를 하게 된다. 그렇기 때문에 한쪽에서는(nslookup, dig, host) 되고 한쪽(ping, ssh 외 다수)에서는 안되는 케이스가 발생한다.</p>

<p>그렇다면 이것을 어떻게 확인 할 수 있을까?  <br/>
가장 간단한 방법은 아래와 같다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scutil --dns</span></code></pre></td></tr></table></div></figure>


<p>결과는 아래와 같이 resolver 들과 그들의 순위(order)를 확인 할 수 있다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scutil --dns
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>resolver #2
</span><span class='line'>  domain   : 1015140824.members.btmm.icloud.com
</span><span class='line'>  options  : pdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 150000
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>resolver #4
</span><span class='line'>  domain   : local
</span><span class='line'>  options  : mdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 300000
</span><span class='line'>
</span><span class='line'>resolver #5
</span><span class='line'>  domain   : 254.169.in-addr.arpa
</span><span class='line'>  options  : mdns
</span><span class='line'>  timeout  : 5
</span><span class='line'>  flags    : Request A records
</span><span class='line'>Not Reachable
</span><span class='line'>  order    : 300200
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>사족으로 여기에서도 만약에 local 순위가 300000(default) 가 마음에 안들면 아래와 같이 resolver 에 추가 하면 100000으로 변경이 가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolver/local
</span><span class='line'>nameserver 10.10.1.65
</span><span class='line'>search_order 100000</span></code></pre></td></tr></table></div></figure>


<p>이런 설정이 일반적으로는 필요하지 않지만 아래와 같은 vpn을 사용하는 케이스에서 발생했었다.</p>

<p>우선 아래와 같은 커맨드로 /etc/resolv.conf 에 원하는 search domain들을 network interface 당 추가가 가능하다. (아니면 환경 설정에서 추가..)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo networksetup -setsearchdomains 'WI-FI' local</span></code></pre></td></tr></table></div></figure>


<p>이러면 대략 아래와 같이 local 을 search 구문으로 사용가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /etc/resolv.conf
</span><span class='line'>...
</span><span class='line'>search local
</span><span class='line'>nameserver 8.8.8.8</span></code></pre></td></tr></table></div></figure>


<p>일반적으로 이렇게 사용하는게 문제가 되지 않지만 만약 junos pulse 같은 vpn을 사용시 vpn에서 주어주는 search domain이 아닐시 자신의 기존 search domain 들은 원래 nameserver로 가도록 설정되어 있다.</p>

<p>예를 들면 이렇다.</p>

<p>A, B 라는 search domain을 (가)라는 dns를 사용하는데
만약 vpn에서 B, C 라는 search domain을 (나)라는 dns로 주어지면
아래와 같이 정리된다.</p>

<p>A, B, C search domain을 사용하는 것은 default 로 (나) 로 사용되나.  <br/>
이것보다 높은 order 로 A 가 (가)로 한개 더 설정된다.</p>

<p>이런 케이스에는 A domain은 (나)로 질의 하고 싶어도 (가)로 질의 하게 되는 문제가 있다.</p>

<p>vpn 측에서 모든 search domain을 내려주면 해결할 수 있지만 이런게 힘들 시에는 <a href="https://gist.github.com/b4ldr/f9d6aab4837ae18d908f">여기</a> <a href="http://diaryproducts.net/about/operating_systems/mac_os_x/overriding_dhcp_or_vpn_assigned_dns_servers_in_mac_os_x_leopard">여기</a> 와 같이 직접 scutil 을 통해서 VPN의 DNS 값들을 수정해 줄 수 있다. (아니면 위와 같이 /etc/resolver/local 과 같이 파일을 만들어도 됨)</p>

<p>추가적으로 아래와 같은 커맨드로 debugging 을 가능하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># enable operation logging.
</span><span class='line'>sudo killall -USR1 mDNSResponder
</span><span class='line'>
</span><span class='line'># enable packet logging.
</span><span class='line'>sudo killall -USR2 mDNSResponder
</span><span class='line'>
</span><span class='line'># clear the DNS cache.
</span><span class='line'>sudo killall -HUP mDNSResponder
</span><span class='line'>
</span><span class='line'># dump mDNSRepsonder's internal state.
</span><span class='line'>sudo killall -INFO mDNSResponder</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Management multiple openstack cluster with automatic openstack rc file loader script]]></title>
    <link href="http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script/"/>
    <updated>2016-05-10T01:08:56+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/05/10/management-multiple-openstack-cluster-with-automatic-openstack-rc-file-loader-script</id>
    <content type="html"><![CDATA[<p><img src="http://leoh0.github.io/images/2016-05-10_03-40-27.jpg" width="368" height="272"></p>

<h2>openstack rc file</h2>

<p>여러 openstack 클러스터를 관리하려면 <a href="http://docs.openstack.org/user-guide/common/cli_set_environment_variables_using_openstack_rc.html">openstack rc file</a>(이하 openrc file)을 잘 관리해야한다.  <br/>
이런 관리를 위해서 <a href="http://supernova.readthedocs.io/en/latest/">supernova</a> 와 같은 rc file 관리해주는 툴들을 사용하게 된다.  <br/>
(개인적으로 비슷한 시기에 bash로 비슷한 아이디어로 구현해서 써서 사용하진 않았지만 이러한 관리 툴이 필요하다면 supernova를 참고하면 좋을것같다.)  <br/>
이런 툴들은 기본적으로 shell에 환경변수를 추가하는 방식이기에 폴더가 변경된다고 자동으로 로딩된다기 보다는  <br/>
유저가 어떤 rc file을 사용할지 로딩하여(트리거링하여) 써야한다.</p>

<h2>openstack rc file (normal version)</h2>

<p>예를 들면 아래는 일반적으로 사용하는 익숙 한 예이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span><span class="nb">source </span>stage_v1_openrc
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v1
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v1
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v1.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v1
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v1.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v1
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span><span class="nb">source </span>stage_v2_openrc
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v2
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v2
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v2.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v2
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v2.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v2
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v2
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 <code>source</code>(혹은 <code>.</code>) 을 이용해서 미리 기록해둔 파일(stage_v1_openrc, stage_v2_openrc)를 export 해서 환경변수에 기록해서 사용한다.  <br/>
이런방식은 어째뜬 파일을 관리해야 하고 파일을 항상 사용해야 하기때문에 다른 디렉토리에서 사용하기에 불편함이 있다.</p>

<h2>openstack rc file (advanced version)</h2>

<p>그래서 내가 만들었던 툴은 아래와 같이 사용했다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>al@MacBook-Pro-2:~ O:stage_v2
</span><span class='line'><span class="nv">$ </span>rcvm stage_v1
</span><span class='line'>OPENRC: stage_v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v1
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v1
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v1
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v1.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v1
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v1.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v1
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v1
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v1
</span><span class='line'><span class="nv">$ </span>rcvm stage_v2
</span><span class='line'>OPENRC: stage_v2
</span><span class='line'>
</span><span class='line'>al@MacBook-Pro-2:~ O:stage_v2
</span><span class='line'><span class="nv">$ </span>env <span class="p">|</span> grep OS_
</span><span class='line'><span class="nv">OS_SERVICE_TOKEN</span><span class="o">=</span>token4service4v2
</span><span class='line'><span class="nv">OS_REGION_NAME</span><span class="o">=</span>stage-v2
</span><span class='line'><span class="nv">OS_SERVICE_ENDPOINT</span><span class="o">=</span>https://stage-v2.example.com/v2.0
</span><span class='line'><span class="nv">OS_PASSWORD</span><span class="o">=</span>password4admin4v2
</span><span class='line'><span class="nv">OS_AUTH_URL</span><span class="o">=</span>https://stage-v2.example.com/v2.0/
</span><span class='line'><span class="nv">OS_USERNAME</span><span class="o">=</span>admin-v2
</span><span class='line'><span class="nv">OS_TENANT_NAME</span><span class="o">=</span>admin-v2
</span></code></pre></td></tr></table></div></figure>


<p>사실 source 같은 커맨드와 지정한 파일을 사용하는거 외에 사용방식은 비슷하다.  <br/>
<code>&lt;커맨드&gt; &lt;구성&gt;</code> 이런 호출을 통해서 rc를 변경한다. (위 보다 디렉토리 제약과 파일 관리의 부담이 조금 줄었다.)</p>

<h2>기존 방법의 불편한 점</h2>

<p>위의 두가지 방법들은 한 클러스터를 집중적으로 관리할때 편리하다.</p>

<p>여기서 만약 다른 클러스터 작업이 필요하면 대략 아래 같은 방법의 옵션들을 사용하게 된다.</p>

<pre><code>1. shell을 추가적으로 띄워서 다른 환경변수를 로딩한다.
2. supernova의 사용법중 하나인매번 `supernova &lt;environment&gt; &lt;command&gt;` 와 같은 형태로 환경변수를 로딩하여 호출해야 한다.
</code></pre>

<p>하지만 이렇게 관리하다보면 여러 클러스터에 간단한 작업을 할때마다 여러창을 띄우던지 아니면 의식적으로 환경을 변경하면서 작업해야한다.</p>

<p><em>그래서 아래 같은 방법을 생각하게 되었다.</em></p>

<h2>디렉토리 기반 openrc 자동 로딩 방법</h2>

<p>그래서 생각한 아이디어는 git 이나 chef 등과 같이 parent directory 에 특정 구성 파일이 있으면  <br/>
이하 디렉토리에서 해당 환경을 자동으로 로딩할 수 있으면 편하겠다고 생각했다.  <br/>
가장 간단한 방법은 아마 nova 와 같은 커맨드에 <code>pwd</code> 등을 확인해서 파일을 로딩하는식으로 구현할까 했었다.  <br/>
하지만 이건 새로운 커맨드가 나올때마다 등 관리가 잘 안될게 뻔하기 때문에 이런 방법을 쓰지않고 있었다.</p>

<p>그러던 와중에 <a href="https://github.com/yyuu/pyenv">pyenv</a>를 잘 쓰고 있었는데 여기에서 python command 들을 사용할때 hook을 걸 수 있는것을 알았다.  <br/>
그리고 해당 hook에 부모 디렉토리에 원하는 파일(openrc)이 있으면 로딩하는 식으로 구성하니 아주 말끔히 원하는식으로 작동하게 되었다.</p>

<p>hook 위치는 아래를 참고하면 된다.</p>

<p>mac에서 brew 로 pyenv를 설치했다면 아래와 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># mac os x</span>
</span><span class='line'><span class="nv">$ </span>cat <span class="k">$(</span>brew --prefix pyenv<span class="k">)</span>/pyenv.d/exec/openstack.bash
</span></code></pre></td></tr></table></div></figure>


<p>ubuntu는 아래와 같다. (non root user시)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ubuntu</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.pyenv/pyenv.d/exec/openstack.bash
</span></code></pre></td></tr></table></div></figure>


<p>해당 파일내용은 아래와 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">openstack_root</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span> -P 2&gt;/dev/null <span class="o">||</span> <span class="nb">command pwd</span><span class="k">)</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> ! -e <span class="s2">&quot;$openstack_root/openrc&quot;</span> <span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">openstack_root</span><span class="o">=</span><span class="k">${</span><span class="nv">openstack_root</span><span class="p">%/*</span><span class="k">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$openstack_root&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">break</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$openstack_root&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">while</span> <span class="nb">read </span>var<span class="p">;</span> <span class="k">do</span> <span class="nb">unset</span> <span class="s2">&quot;$var&quot;</span><span class="p">;</span> <span class="k">done</span>&lt; &lt;<span class="o">(</span>env <span class="p">|</span> awk -F<span class="o">=</span> <span class="s1">&#39;/^OS_/{print $1}&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  . <span class="s2">&quot;$openstack_root/openrc&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>약간에 설명을 하자면 해당 커맨드를 실행하는 해당 디렉토리에 <code>openrc</code> 파일이 있으면 <code>OS_</code>로 시작하는 모든 환경 변수를 초기화(unset)하고 openrc 를 export 한다.  <br/>
만약 해당 디렉토리에 해당 파일(openrc)가 없으면 상위 디렉토리가 존재할때까지 recursive 하게 올라간다.</p>

<h2>디렉토리 기반 openrc 자동 로딩 데모</h2>

<p>아래는 데모이다.  <br/>
천천히 보려면 이 링크에서 커맨드를 확인하면서 볼 수 있다. (<a href="http://showterm.io/112d21ab5f83d5843f7b2">http://showterm.io/112d21ab5f83d5843f7b2</a>)</p>

<div class="embed-video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/r_Hgitz0Tn0" frameborder="0" allowfullscreen></iframe></div>


<p>중간에 보이는바와 같이 <code>env | grep OS_</code> 로 환경변수가 비어 있으나  <br/>
<code>python</code> 커맨드 실행시 안에 환경변수들이 채워져 있는 것을 확인 할 수 있다.  <br/>
아래 커맨드로 python 실행시 해당 환경변수중 <code>OS_</code> 시작하는 변수들의 값을 출력해 본것이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python -c <span class="s2">&quot;import os; print(&#39;\n&#39;.join([str(\&quot;%s=%s\&quot; %(i,j)) for i,j in os.environ.iteritems() if i.startswith(&#39;OS_&#39;)]))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>이런식으로 앞서 말한 방법과 함께 두가지 방법을 이용하면 보다 쾌적한 클러스터 관리를 할 수 있게 된다.</p>

<h2>DIY</h2>

<p>아래 스크립트를 이용하면 ubuntu에서 테스트 설치해서 테스트 가능하다.</p>

<figure class='code'><figcaption><span>install_openrc_changer.sh</span><a href='https://gist.github.com/leoh0/21d61d3bebe394d278e6f18d5465415d'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'>sudo apt-get install -qqy git make build-essential libssl-dev zlib1g-dev libbz2-dev <span class="se">\</span>
</span><span class='line'>  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev <span class="se">\</span>
</span><span class='line'>  libncursesw5-dev libxml2-dev libxslt1-dev libffi-dev
</span><span class='line'>
</span><span class='line'>curl -sL https://raw.github.com/yyuu/pyenv-installer/master/bin/pyenv-installer <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>  bash
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;~/.pyenv/bin:$PATH&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(pyenv init -)&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(pyenv virtualenv-init -)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;~/.pyenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="nv">PYTHON_CONFIGURE_OPTS</span><span class="o">=</span><span class="s2">&quot;--enable-unicode=ucs4&quot;</span> ~/.pyenv/bin/pyenv install 2.7.9
</span><span class='line'>
</span><span class='line'>~/.pyenv/bin/pyenv global 2.7.9
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt; OPENRC_CHOOSER &gt; ~/.pyenv/pyenv.d/exec/openstack.bash</span>
</span><span class='line'><span class="s">openstack_root=\$(pwd -P 2&gt;/dev/null || command pwd)</span>
</span><span class='line'><span class="s">while [ ! -e &quot;\$openstack_root/openrc&quot; ];</span>
</span><span class='line'><span class="s">do</span>
</span><span class='line'><span class="s">  openstack_root=\${openstack_root%/*}</span>
</span><span class='line'><span class="s">  if [ &quot;\$openstack_root&quot; == &quot;&quot; ]; then</span>
</span><span class='line'><span class="s">    break</span>
</span><span class='line'><span class="s">  fi</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'>
</span><span class='line'><span class="s">if [ &quot;\$openstack_root&quot; != &quot;&quot; ]; then</span>
</span><span class='line'><span class="s">  while read var; do unset &quot;\$var&quot;; done&lt; &lt;(env | awk -F= &#39;/^OS_/{print \$1}&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="s">  . &quot;\$openstack_root/openrc&quot;</span>
</span><span class='line'><span class="s">fi</span>
</span><span class='line'><span class="s">OPENRC_CHOOSER</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;need relogin&#39;</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>결론</h2>

<p>pyenv + 스크립트 한개 = 디렉토리 기반 자동 openrc file loader 제작 가능</p>

<h3>ps</h3>

<p>더 좋은 방법은 언제든지 환영합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keystone에서 token backend로 사용하는 memcached가 unbalanced되었다..]]></title>
    <link href="http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot/"/>
    <updated>2016-04-27T00:00:45+09:00</updated>
    <id>http://leoh0.github.io/blog/2016/04/27/keystoneeseo-token-backendro-sayonghaneun-memcachedga-unbalanceddoeeossdamyeon-dot</id>
    <content type="html"><![CDATA[<p>해당 클러스터는 kilo 버전으로 구성 되었었고 token 을 memcached 에 저장하고 있었다.  <br/>
또한 kilo 부터 dogpile.cache 는 거의 고정으로 들어가 있가 있어서 해당 모듈을 사용했다.  <br/>
이런 상황을 디버깅 했던 경험을 정리해 본다.</p>

<p>아래는 문제가 되었던 memcached host의 in/out bound 그래프이다.  <br/>
수치는 가려서 스케일만 감으로 볼 수 있게 남겼다.</p>

<p><strong>A 서버</strong>
<img src="http://leoh0.github.io/images/2016-04-26_23-50-30.png" width="508" height="122" title="A 서버" ></p>

<p><strong>B 서버</strong>
<img src="http://leoh0.github.io/images/2016-04-26_23-50-41.png" width="499" height="122" title="B 서버" ></p>

<p>최초엔 keystone과 memcached connection 이 unbalance 할것이라고 생각했으나 그런 정황은 없었다.    (connection 개수가 일정) 그리고 특별히 keystone 로그에도 별다른 문제가 보이지 않았다.  <br/>
memcache key 개수는 심지어 <strong>A 서버</strong>가 많았다.</p>

<p>이 외에도 온갖 삽질을 했지만 관련이 없었다.  <br/>
그 후 결국 아래와 같은 방법으로 디버깅 할 수 있었다.</p>

<p>각 호스트에서 아래 같이 memcache slab id 별로 dump를 떠보니 <code>bf81985d70a6416897edbade7a8bfc0a5a579af4</code> 와 같이 유독 큰 (578966 b) 키가 <strong>B 서버</strong>에만 존재 하고 있었다.</p>

<p>대부분의 token 데이터는 <code>3f786850e387550fdab836ed7e6dc881de23001b</code> 정도와 같이 PKI가 아닌 UUID token data여서 10000 b 정도를 구성하고 있었기 때문에 <code>크기</code>가 더 눈에 띈다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ for i in $(echo 'stats items' | nc localhost 11211 | cut -d':' -f2 | sort -u | grep -v END); do
</span><span class='line'>    echo "stats cachedump $i 1" | nc localhost 11211
</span><span class='line'>done
</span><span class='line'>...
</span><span class='line'>ITEM 3f786850e387550fdab836ed7e6dc881de23001b [11651 b; 1461686308 s]
</span><span class='line'>END
</span><span class='line'>ITEM 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 [578966 b; 1461688011 s]
</span><span class='line'>END
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>그렇다면 이 키를 열어 보면 아래와 같다.  <br/>
( 참고로 아래 커맨드를 쓰기위해선 <code>dogpile.cache</code> 가 인스톨 되어 있어야 한다. )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo get 6e49b86a7502dae881f3b9466ecbdfa4743c7eb9 | nc localhost 11211 | python -c '
</span><span class='line'>import sys
</span><span class='line'>import cPickle
</span><span class='line'>import json
</span><span class='line'>try:
</span><span class='line'>    data=cPickle.load(sys.stdin)
</span><span class='line'>    print json.dumps(data)
</span><span class='line'>except (cPickle.UnpicklingError, EOFError):
</span><span class='line'>    print ""
</span><span class='line'>' | python -mjson.tool
</span><span class='line'>[
</span><span class='line'>    [
</span><span class='line'>        [
</span><span class='line'>            "386c0e0a01bb4069904d9c11771516a2",
</span><span class='line'>            "2016-04-26T15:41:25.000000Z"
</span><span class='line'>        ],
</span><span class='line'>        [
</span><span class='line'>            "9ba06233d0894aa4a06d4302800035c1",
</span><span class='line'>            "2016-04-26T15:41:24.000000Z"
</span><span class='line'>        ],
</span><span class='line'>        [
</span><span class='line'>            "1510940842f943b798f4bb9f7964aa67",
</span><span class='line'>            "2016-04-26T15:41:24.000000Z"
</span><span class='line'>        ],
</span><span class='line'>   
</span><span class='line'>        ...
</span><span class='line'>   
</span><span class='line'>        [
</span><span class='line'>            "d57b2946174c4a4391496a7f9af7e0c5",
</span><span class='line'>            "2016-04-26T16:41:18.000000Z"
</span><span class='line'>        ]
</span><span class='line'>    ],
</span><span class='line'>    {
</span><span class='line'>        "ct": 1461685284.976144,
</span><span class='line'>        "v": 1
</span><span class='line'>    }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 되어 있고 알고 보면 특정 토큰들과 그 토큰이 issue 된 시간이 적혀 있는 <a href="https://github.com/openstack/keystone/blob/stable/kilo/keystone/token/persistence/backends/kvs.py#L155-L188">리스트</a> 이다.  <br/>
이 키의 리스트는 유저별로 token의 expire time을 관리하는 값으로 해당 user에게 token이 발급 되거나 expire 될때마다 해당 리스트를 memcache로 부터 가져와서(<code>get</code>) 다시 업로드(<code>set</code>) 한다.  <br/>
그렇기 때문에 해당 키값이 결국 유저와 관계 있다는 것을 추측할 수 있었다.</p>

<p>예를 들어 아래 처럼 특정 유저를 본다면 아래 처럼 <code>id</code>를 갖고 있을 것이다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openstack user show ceilometer
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| Field    | Value                            |
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| enabled  | True                             |
</span><span class='line'>| id       | eef939600bc111e69aeb57d4fa849231 |
</span><span class='line'>| name     | ceilometer                       |
</span><span class='line'>| username | ceilometer                       |
</span><span class='line'>+----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>eef939600bc111e69aeb57d4fa849231 이값은 아래와 같이 prefix가 붙고 hash 되서 key 값으로 사용된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n 'usertokens-eef939600bc111e69aeb57d4fa849231' | sha1sum
</span><span class='line'>6e49b86a7502dae881f3b9466ecbdfa4743c7eb9  -</span></code></pre></td></tr></table></div></figure>


<p>즉, <code>6e49b86a7502dae881f3b9466ecbdfa4743c7eb9</code>은 가 key이 기때문에 위의 토큰 리스트는 ceilometer의 토큰 리스트인걸 알 수 있다.</p>

<p>마지막으로 아래와 같이 계산해 보면 어떤 멤캐쉬에 들어갈 지 알수 있다. (<a href="https://github.com/linsomniac/python-memcached/blob/master/memcache.py#L63-L66">cmemcache_hash</a> 참고)  <br/>
여기에서는 <code>3065</code> 가 나왔기 때문에 멤캐쉬 서버가 두대이면 두번째(<code>3016%2=1</code>) 서버로 들어가게 된다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo -n '6e49b86a7502dae881f3b9466ecbdfa4743c7eb9' | python -c '
</span><span class='line'>import sys,binascii
</span><span class='line'>print (
</span><span class='line'>    (((binascii.crc32(sys.stdin.read()) & 0xffffffff)
</span><span class='line'>       &gt;&gt; 16) & 0x7fff) or 1)
</span><span class='line'>'
</span><span class='line'>3065</span></code></pre></td></tr></table></div></figure>


<p>나의 케이스는 불운 하게도 이런 많은 토큰을 같은 유저(ceilometer, neutron, nova 등)가 전부 해쉬값이 홀수가 나와서 한 memcached host에 할당되었고, 이때문에 한쪽으로 skew 가 있었다.</p>

<p>이런걸 피할려면 결국 memcached 개수를 늘이던가 토큰이 많은 유저의 uuid를 분배시킬 수 있도록 해야 할것같다.
물론 저런 거대한 토큰 리스트를 관리 안하는 것이 더 나아 보이지만 이 코드는 현재 master(mitaka 이후)까지도 유지되어 있는 상태이다.</p>

<p>우리도 ceilometer 를 쓰기 전까지는 이런 문제가 없었으나 ceilometer를 추가하면서 문제가 발생하기 시작했다.  <br/>
아무래도 ceilometer 상위 버전쪽에서는 토큰의 재활용을 높이는 부분들이 있어야 할것이다.</p>

<p>사족으로 토큰이 어떤 내용을 담고 있는지는 아래 같은 스크립트로 찾으면 편하다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MEMCACHES='serverA serverB'
</span><span class='line'>for h in $MEMCACHES; do
</span><span class='line'>  echo $h
</span><span class='line'>  sha=$(echo -n "token-$1" | sha1sum | cut -d' ' -f1)
</span><span class='line'>  echo get $sha | nc $h 11211 | python -c '
</span><span class='line'>import sys
</span><span class='line'>import cPickle
</span><span class='line'>import json
</span><span class='line'>try:
</span><span class='line'>    data=cPickle.load(sys.stdin)
</span><span class='line'>    data[0]["expires"] = data[0]["expires"].strftime("%Y-%m-%d %H:%M:%S")
</span><span class='line'>    print json.dumps(data[0])
</span><span class='line'>except (cPickle.UnpicklingError, EOFError):
</span><span class='line'>    print ''
</span><span class='line'>' | python -mjson.tool
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac에서 ntfs disk에 write 하기]]></title>
    <link href="http://leoh0.github.io/blog/2015/11/03/maceseo-ntfs-diske-write-hagi/"/>
    <updated>2015-11-03T09:38:22+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/11/03/maceseo-ntfs-diske-write-hagi</id>
    <content type="html"><![CDATA[<p>GPT 일때 가능</p>

<div><script src='https://gist.github.com/d07787e9dc635136de6a.js?file=ntfs_mount.sh'></script>
<noscript><pre><code>#!/usr/bin/env bash

if mount | grep -q &#39;ntfs&#39; ; then
  if ! mount | grep -q &#39;read-only&#39; ; then
    echo -e &quot;\033[01;36mExist already in /etc/fstab.\033[00m&quot;
    VOLUME=$(mount | grep &quot;(ntfs, &quot; | sed &#39;s|/dev/disk[0-9]s[0-9] on \(.*\) (ntfs,.*$|\1|g&#39;)
    open &quot;$VOLUME&quot;
    exit
  fi

  DISK=$(mount | grep &#39;read-only&#39; | awk &#39;{print $1}&#39;)
  UUID=$(diskutil info $DISK | grep UUID | awk &#39;{print $3}&#39;)
  echo -e &quot;\033[01;36mRegistry into /etc/fstab.\033[00m&quot;
  echo &quot;UUID=$UUID none ntfs rw,auto,nobrowse&quot; | sudo tee -a /etc/fstab &gt; /dev/null
  diskutil umount $DISK
  diskutil mount $DISK
  VOLUME=$(mount | grep &quot;(ntfs, &quot; | sed &#39;s|/dev/disk[0-9]s[0-9] on \(.*\) (ntfs,.*$|\1|g&#39;)
  open &quot;$VOLUME&quot;
else
  echo -e &quot;\033[01;36mThere is no ntfs disk in here.\033[00m&quot;
fi
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[커맨드로 크롬에 떠 있는 유튜브 플레이중인 음악 mp3로 다운로드 하기]]></title>
    <link href="http://leoh0.github.io/blog/2015/05/19/youtube-chrome-mp3-downloader/"/>
    <updated>2015-05-19T09:49:32+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/05/19/youtube-chrome-mp3-downloader</id>
    <content type="html"><![CDATA[<p>내가 듣는 음악 장르는 보통 스트리밍 서비스에서 찾을 수 가 없어서 보통 유튜브 자동재생을 켜놓고 음악을 듣는 편이다.</p>

<p>그런데 이런 음악을 찾기 귀찮아서 mp3 파일로 다운로드 해두고 싶은일이 생긴다.</p>

<p><img src="http://leoh0.github.io/images/unsun-whispers.png" width="452" height="239" title="unsun - whispers" ></p>

<p><a href="https://www.youtube.com/watch?v=LapknbGS7Os">UNSUN - Whispers Youtube</a></p>

<p>물론 그냥 아래 같이 <code>youtube-dl</code>와 같은 방법을 써도 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install youtube-dl
</span><span class='line'>youtube-dl -t --extract-audio --audio-format mp3 <span class="nv">$YOUTUBEURL</span>
</span></code></pre></td></tr></table></div></figure>


<p>하지만 일하는데 터미널에서 크롬으로 창을 포커스 바꾸고 url을 카피해서 저 커맨드를 넣는건 귀찮은 일이다.</p>

<p>그래서 이런걸 해결해주는 <a href="https://github.com/prasmussen/chrome-cli">chrome-cli</a> 라는 솔루션을 이용한다.</p>

<p>물론 설치는 간단하게..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install chrome-cli
</span></code></pre></td></tr></table></div></figure>


<p>그리고 그냥 아래 같은 방법을 쓰면 chrome 에서 열려 있는 유튜브 페이지들을 전부 조회해서 mp3로 다운로드 할 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function</span> yd<span class="o">(){</span>
</span><span class='line'>  <span class="k">for</span> l in <span class="k">$(</span>chrome-cli list tabs <span class="p">|</span> grep YouTube <span class="p">|</span> cut -d <span class="s1">&#39;[&#39;</span> -f2- <span class="p">|</span> cut -d<span class="s1">&#39;:&#39;</span> -f2- <span class="p">|</span> cut -d<span class="s1">&#39;]&#39;</span> -f1<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nv">url</span><span class="o">=</span><span class="k">$(</span>chrome-cli info -t <span class="nv">$l</span> <span class="p">|</span> grep <span class="s1">&#39;^Url: &#39;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f2<span class="k">)</span>
</span><span class='line'>    <span class="o">(</span><span class="nb">cd</span> /want/to/download/mp3<span class="p">;</span> youtube-dl -t --extract-audio --audio-format mp3 <span class="nv">$url</span><span class="o">)</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[containerize openstack]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/containerize-openstack/"/>
    <updated>2015-04-24T01:08:16+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/containerize-openstack</id>
    <content type="html"><![CDATA[<p>docker 바깥으로 process를 낼 수 있는 방법들로 kvm 프로세스를 docker 바깥 host os 에 배치시키는 방법이 가능하네요.  <br/>
실질적으로 docker안에 kvm이 들어가게 된다면 docker process에 vm이 종속적이게 되어 불안정한 구성이 될테지만  <br/>
이런 방식으로 피해 갈 수도 있는 것을 확인했습니다.</p>

<p><img src="http://leoh0.github.io/images/containerize-openstack.png" width="1440" height="829" title="containerize-openstack" ></p>

<p>아무튼 사진과 같이 기묘한 형태로 (실제 host os 에는 없는 바이너리가 parent 1 을 물고 process 로 뜨게되는) 관리가 가능합니다.  <br/>
물론 보안 적인 결함에 대해서야 아직 끝도없이 이야기할 주제이겠지만 앞으로의 provisioning의 새로운 가능성에 대해서 관심이 가는건 사실인것 같습니다.</p>

<p>아무튼 열심히 삽질하다보니 kolla에서 이미 하고 있었어서 libvirt 를 containerize 하는데 도움을 받았습니다.</p>

<p><a href="https://github.com/stackforge/kolla">https://github.com/stackforge/kolla</a></p>

<p>우선 저는 ubuntu로 kolla 소스가 아니라 따로 구성해서 실험했습니다.  <br/>
fedora와 ubuntu의 미묘한 차이가 있어서 ubuntu로 구성하려면 약간의 차이가 필요한것 같습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[가장 변태적인 linux command]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/24/gajang-byeontaejeogin-linux-command/"/>
    <updated>2015-04-24T00:28:38+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/24/gajang-byeontaejeogin-linux-command</id>
    <content type="html"><![CDATA[<p>ip command 는 linux network 쪽을 위해 굉장히 많이 사용되는 커맨드 이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Usage: ip <span class="o">[</span> OPTIONS <span class="o">]</span> OBJECT <span class="o">{</span> COMMAND <span class="p">|</span> <span class="nb">help</span> <span class="o">}</span>
</span><span class='line'>       ip <span class="o">[</span> -force <span class="o">]</span> -batch filename
</span><span class='line'>where  OBJECT :<span class="o">=</span> <span class="o">{</span> link <span class="p">|</span> addr <span class="p">|</span> addrlabel <span class="p">|</span> route <span class="p">|</span> rule <span class="p">|</span> neigh <span class="p">|</span> ntable <span class="p">|</span>
</span><span class='line'>                   tunnel <span class="p">|</span> tuntap <span class="p">|</span> maddr <span class="p">|</span> mroute <span class="p">|</span> mrule <span class="p">|</span> monitor <span class="p">|</span> xfrm <span class="p">|</span>
</span><span class='line'>                   netns <span class="p">|</span> l2tp <span class="p">|</span> tcp_metrics <span class="p">|</span> token <span class="o">}</span>
</span><span class='line'>       OPTIONS :<span class="o">=</span> <span class="o">{</span> -V<span class="o">[</span>ersion<span class="o">]</span> <span class="p">|</span> -s<span class="o">[</span>tatistics<span class="o">]</span> <span class="p">|</span> -d<span class="o">[</span>etails<span class="o">]</span> <span class="p">|</span> -r<span class="o">[</span>esolve<span class="o">]</span> <span class="p">|</span>
</span><span class='line'>                    -f<span class="o">[</span>amily<span class="o">]</span> <span class="o">{</span> inet <span class="p">|</span> inet6 <span class="p">|</span> ipx <span class="p">|</span> dnet <span class="p">|</span> bridge <span class="p">|</span> link <span class="o">}</span> <span class="p">|</span>
</span><span class='line'>                    -4 <span class="p">|</span> -6 <span class="p">|</span> -I <span class="p">|</span> -D <span class="p">|</span> -B <span class="p">|</span> -0 <span class="p">|</span>
</span><span class='line'>                    -l<span class="o">[</span>oops<span class="o">]</span> <span class="o">{</span> maximum-addr-flush-attempts <span class="o">}</span> <span class="p">|</span>
</span><span class='line'>                    -o<span class="o">[</span>neline<span class="o">]</span> <span class="p">|</span> -t<span class="o">[</span>imestamp<span class="o">]</span> <span class="p">|</span> -b<span class="o">[</span>atch<span class="o">]</span> <span class="o">[</span>filename<span class="o">]</span> <span class="p">|</span>
</span><span class='line'>                    -rc<span class="o">[</span>vbuf<span class="o">]</span> <span class="o">[</span>size<span class="o">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이 커맨드의 가장 변태적이라고 생각한 부분은 다음이다..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip a
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip ad
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip add
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addr
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addre
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip addres
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ip address
</span></code></pre></td></tr></table></div></figure>


<p>전부 동일한 결과가&hellip;</p>

<p><code>link</code>, <code>route</code> 등도 다 저렇게 되있다고 보면된다.</p>

<p>별건 아닌데 참 <code>괴상한</code> <code>친절한</code> 커맨드라는 생각이 들어서 ㅋㅋ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[draw openstack L2 network architecture automatically]]></title>
    <link href="http://leoh0.github.io/blog/2015/04/03/draw-openstack-l2-network-architecture-automatically/"/>
    <updated>2015-04-03T02:29:52+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/04/03/draw-openstack-l2-network-architecture-automatically</id>
    <content type="html"><![CDATA[<p>iptables를 좀 보기 편하게 할 수 없는가를 이야기하다가 <a href="http://atoato88.hatenablog.com/entry/2014/01/25/133852">여기</a>사이트를 보게되었다. <br/>
그래서 감동을 받아서 이에 뭔가 남기고자 삽질을 했다. (어짜피 요새 deploy 테스트 하다보면 남는게 시간이다 보니..) <br/>
대략 openstack neutron의 L2 architecture 에 구성요소들을 좀 보기 편하게 그린것이다. <br/>
지금 tunnel architecture를 가진건 없어서 br-tun 쪽은 그리려고 테스트 하진 않았다. 다만 ovs 나 bridge 모드에서 대략적인 그림은 맘에 들게 그려지는 것 같다.</p>

<p>ascii 로 그린 architecture 들이다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan.png" width="1312" height="544" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat.png" width="2526" height="780" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan.png" width="2752" height="544" title="openvswitch-vlan" ></p>

<p>이걸 graphviz 로 그리면 다음과 같다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan-g.png" width="757" height="131" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat-g.png" width="1101" height="491" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan-g.png" width="1594" height="131" title="openvswitch-vlan" ></p>

<p>이걸 3D 로 그리면 다음과 같다.</p>

<h1>bridge-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-bridge-vlan-3d.png" width="2716" height="1564" title="bridge-vlan" ></p>

<h1>openvswitch-flat</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-flat-3d.png" width="2844" height="1668" title="openvswitch-flat" ></p>

<h1>openvswitch-vlan</h1>

<p><img src="http://leoh0.github.io/images/draw-ovs-vlan-3d.png" width="2844" height="2032" title="openvswitch-vlan" ></p>

<p>는 사실 그냥 이전에 그려논 그림이다..</p>

<p>아무튼 해당 그림을 그리기 위해 제작한 스크립트 이다. <br/>
아래 스크립트를 컴퓨트 노드에서 돌리면 해당 정보를 수집해서 그리게 된다. (물론 네트워크 노드도 가능..) <br/>
귀찮아서 하드코딩한 부분들은 편하게 고쳐쓰시길..</p>

<div><script src='https://gist.github.com/8499b653f479766378d8.js'></script>
<noscript><pre><code>#!/bin/bash

sudo apt-get install -qqy ethtool libgraph-easy-perl graphviz &gt; /dev/null

EXCEPT=/tmp/exceptlist
echo &#39;&#39; &gt; $EXCEPT
result=&quot;&quot;

function on_exit() {
  rm -f $EXCEPT
}

trap &quot;on_exit&quot; EXIT

# find ovs br &lt;-&gt; port
if [ &quot;x$(which ovs-vsctl)&quot; != &quot;x&quot; ]; then
  for br in $(sudo ovs-vsctl list-br); do
    for port in $(sudo ovs-vsctl list-ports $br); do
      result=$(echo &quot;$result [$port]----&gt;[$br] [$br]----&gt;[$port] &quot;)
    done
  done
fi

# find br &lt;-&gt; port
for br in $(brctl show | sed &#39;1d&#39; | grep &#39;^[a-z]&#39; | awk &#39;{print $1}&#39;); do
  for port in $(brctl show $br | sed &#39;1d&#39; | sed &#39;s/.*\t.*\t.*\t\(.*\)/\1/g&#39;); do
    result=$(echo &quot;$result [$port]----&gt;[$br] [$br]----&gt;[$port] &quot;)
  done
done

# ip namespace veth
for ns in $(ip netns); do
  for interface in $(ip netns exec $ns ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]); do
    index=$(ip netns exec $ns ethtool -S $interface 2&gt; /dev/null | grep peer_ifindex | awk &#39;{print $2}&#39;)
    ifname=$(ip netns exec $ns ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
    if [ &quot;x$ifname&quot; == &quot;x&quot; ]; then
      ifname=$(ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
      if [ &quot;x$ifname&quot; != &quot;x&quot; ]; then
        echo $ifname &gt;&gt; $EXCEPT
        result=$(echo &quot;$result [$interface]----&gt;[$ifname] [$ifname]----&gt;[$interface] &quot;)
      fi
    fi
  done
done

# ip veth
for interface in $(ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]); do
  if cat $EXCEPT | grep -q &quot;^$interface$&quot; ; then continue ; fi
  index=$(ethtool -S $interface 2&gt; /dev/null | grep peer_ifindex | awk &#39;{print $2}&#39;)
  ifname=$(ip a | grep &quot;^$index:&quot; | awk &#39;{print $2}&#39; | cut -d&#39;:&#39; -f1)
  if [ &quot;x$ifname&quot; != &quot;x&quot; ]; then
    echo $ifname &gt;&gt; $EXCEPT
    result=$(echo &quot;$result [$interface]----&gt;[$ifname] [$ifname]----&gt;[$interface] &quot;)
  fi
done

# vm tap
for tap in $(ip a | cut -d&#39;:&#39; -f-2 | grep ^[1-9]  | cut -d&#39; &#39; -f2 | grep &#39;^tap&#39;); do
  vmuuid=$(grep -rl &quot;$tap&quot; /var/lib/nova/instances/*/libvirt.xml | cut -d&#39;/&#39; -f6)
  if [ &quot;x$vmuuid&quot; != &quot;x&quot; ]; then
    result=$(echo &quot;$result [$tap]----&gt;[VM-$vmuuid] [VM-$vmuuid]----&gt;[$tap] &quot;)
  fi
done

rm -f $EXCEPT

echo $result | graph-easy
echo $result | graph-easy -as dot | dot -Tpng -o l2path.png
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping openstack vms in specific host]]></title>
    <link href="http://leoh0.github.io/blog/2015/03/31/ping-openstack-vms-in-specific-host/"/>
    <updated>2015-03-31T09:36:44+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/03/31/ping-openstack-vms-in-specific-host</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/261cc772f9bc5ab916b5.js'></script>
<noscript><pre><code>#!/usr/bin/env bash

declare -A vm_ip
declare -A vm_id
declare -A vm_status

while read -r _ id _ name _ ip _ ; do
  ip=$(echo $ip|cut -d&#39;=&#39; -f2)
  vm_ip[$name]=$ip
  vm_id[$name]=$id
  vm_status[$name]=&quot;S&quot;
  ping -c1 -i0.1 -t1 -W100 $ip &gt; /dev/null
  if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
    vm_status[$name]=&quot;N&quot;
  fi
done&lt; &lt;(nova list --all-tenants --fields name,networks --host $1 | grep &quot;=&quot;)

while read -r _ net_id _ id _ _ _ _ ip _ ; do
  ip=$(echo $ip|cut -d&#39;&quot;&#39; -f2)
  net_id_prefix=${net_id:0:11}
  name=&quot;_DHCP_&quot;$net_id_prefix
  vm_ip[$name]=$ip
  vm_id[$name]=$id
  vm_status[$name]=&quot;S&quot;
  ping -c1 -i0.1 -t1 -W100 $ip &gt; /dev/null
  if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
    vm_status[$name]=&quot;N&quot;
  fi
done&lt; &lt;(neutron port-list --device-owner=network:dhcp --binding:host_id $1 -c network_id -c id -c fixed_ips | sed &#39;2d&#39; | grep &#39;|&#39;)

c=${#vm_ip[@]}
if [ &quot;x$c&quot; == &quot;x0&quot; ] ; then
  echo &quot;there is no vm or dhcp servers.. exit!!&quot;
  exit
fi

while true; do
  for h in ${!vm_ip[@]}; do
    ping -c1 -i0.1 -t1 -W100 ${vm_ip[$h]} &gt; /dev/null
    if [ &quot;x$?&quot; == &quot;x2&quot; ]; then
      if [ &quot;x${vm_status[$h]}&quot; != &quot;xN&quot; ] ; then
        vm_status[$h]=&quot;F&quot;
      fi
    else
      vm_status[$h]=&quot;S&quot;
    fi
  done
  for h in ${!vm_ip[@]}; do
    case ${vm_status[$h]} in
      S)
        status=&quot;\033[01;32mOK\033[00m&quot; ;;
      F)
        status=&quot;\033[01;31mFAIL\033[00m&quot; ;;
      N)
        status=&quot;\033[01;33mNOCON\033[00m&quot; ;;
    esac
    pre=$(printf &quot;%-30s  %-15s %-32s %s\n&quot; &quot;${h::30}&quot; &quot;${vm_ip[$h]}&quot; &quot;${vm_id[$h]}&quot; &quot;$status&quot;)
    echo -en &quot;\033[K&quot;
    echo -en &quot;$pre\n&quot;
  done
  sleep 1
  echo -en &quot;\033[${c}A&quot;
done
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[만약 사용자가 ssh password나 key등을 잃어 버려서 도저히 vm instance에 접속할 수 없을때..]]></title>
    <link href="http://leoh0.github.io/blog/2015/03/14/if-you-forget-your-password-or-key/"/>
    <updated>2015-03-14T22:00:57+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/03/14/if-you-forget-your-password-or-key</id>
    <content type="html"><![CDATA[<p>우선은 nbd로 attach 하여 mount 해서 접근 가능하다. <br/>
이후에 아래와 같이 key를 추가해도 되고 각 os 버전에 맞게 패스워드를 새로 해슁하여 <code>/etc/shadow</code> 를 변경해도 된다. <br/>
물론 마지막에 dettach 를 꼭 신경써서 해줘야 한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># attach disk</span>
</span><span class='line'>qemu-nbd -c /dev/nbd0 /var/lib/nova/instances/10794bbb-7856-4ed6-ab39-32afbc01156a/disk
</span><span class='line'>mount /dev/nbd0p1 /mnt
</span><span class='line'>
</span><span class='line'><span class="c"># insert a new key to target user</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;&#39;&#39;NEWKEY&#39;&#39;&#39;</span> &gt;&gt; /mnt/home/USER/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'><span class="c"># dettach disk</span>
</span><span class='line'>umount /mnt
</span><span class='line'>qemu-nbd -d /dev/nbd0p1
</span></code></pre></td></tr></table></div></figure>


<p>하지만 이상하게도 저런 수정을 했을때 아예 접속이 불가능한 경우들이 생긴다. sshd config가 잘못되었는지 고치기 시작하면 아예 ssh 조차도 뜨질 못한다. <br/>
그이유는 아래와 같이 selinux의 보안 설정으로 위변조된 파일 사용시 차단되는 보안이 설정되어 있기 때문이다.</p>

<p>즉, selinux를 살펴 봤을때 아래 같이 selinux가 세팅되어 있을 수 있다. <br/>
그렇다면 위와 같이 edit 했을때 관련 키, 계정들을 접근 못하게 된다.</p>

<figure class='code'><figcaption><span>/etc/selinux/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This file controls the state of SELinux on the system.</span>
</span><span class='line'><span class="c"># SELINUX= can take one of these three values:</span>
</span><span class='line'><span class="c">#     enforcing - SELinux security policy is enforced.</span>
</span><span class='line'><span class="c">#     permissive - SELinux prints warnings instead of enforcing.</span>
</span><span class='line'><span class="c">#     disabled - No SELinux policy is loaded.</span>
</span><span class='line'><span class="nv">SELINUX</span><span class="o">=</span>enforcing
</span><span class='line'><span class="c"># SELINUXTYPE= can take one of these two values:</span>
</span><span class='line'><span class="c">#     targeted - Targeted processes are protected,</span>
</span><span class='line'><span class="c">#     mls - Multi Level Security protection.</span>
</span><span class='line'><span class="nv">SELINUXTYPE</span><span class="o">=</span>targeted
</span></code></pre></td></tr></table></div></figure>


<p>그렇기 때문에 이런 케이스는 아래와 같이 <code>selinux</code>를 <em>disable</em> 해줘야 한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># attach disk</span>
</span><span class='line'>qemu-nbd -c /dev/nbd0 /var/lib/nova/instances/10794bbb-7856-4ed6-ab39-32afbc01156a/disk
</span><span class='line'>mount /dev/nbd0p1 /mnt
</span><span class='line'>
</span><span class='line'><span class="c"># insert a new key to target user</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;&#39;&#39;NEWKEY&#39;&#39;&#39;</span> &gt;&gt; /mnt/home/USER/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'><span class="c"># disable selinux</span>
</span><span class='line'>sed -i <span class="s1">&#39;s/^SELINUX=.*$/SELINUX=disabled/g&#39;</span> /mnt/etc/selinux/config
</span><span class='line'>
</span><span class='line'><span class="c"># dettach disk</span>
</span><span class='line'>umount /mnt
</span><span class='line'>qemu-nbd -d /dev/nbd0p1
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[custom URL for chef server 12]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/24/custom-url-for-chef-server-12/"/>
    <updated>2015-02-24T23:29:19+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/24/custom-url-for-chef-server-12</id>
    <content type="html"><![CDATA[<p>chef server ssl verification 때문에 그냥 domain 인증서를 제대로 적용하려고 했는데 엄청 삽질했다. 아마 chef 11 에서 chef 12 로 올라가면서 config 위치가 변경된거 같다.</p>

<p><a href="http://www.bitlancer.com/2014/10/custom-chef-server-url/">여기</a>에서 관련 정보를 얻을 수 있었는데 차이점은 /etc/chef-server/chef-server.rb 가 아닌 /etc/opscode/chef-server.rb 파일을 수정해서 적용 가능했다.</p>

<p>아래 처럼 해당 파일을 수정한다.</p>

<figure class='code'><figcaption><span>/etc/opscode/chef-server.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">server_name</span> <span class="o">=</span> <span class="s2">&quot;chef.yourdomain.com&quot;</span>
</span><span class='line'><span class="n">api_fqdn</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">bookshelf</span><span class="o">[</span><span class="s1">&#39;vip&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;https://</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;server_name&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;ssl_certificate&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/var/opt/chef-server/nginx/ca/</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">.crt&quot;</span>
</span><span class='line'><span class="n">nginx</span><span class="o">[</span><span class="s1">&#39;ssl_certificate_key&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/var/opt/chef-server/nginx/ca/</span><span class="si">#{</span><span class="n">server_name</span><span class="si">}</span><span class="s2">.key&quot;</span>
</span><span class='line'><span class="n">lb</span><span class="o">[</span><span class="s1">&#39;fqdn&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">server_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>이후에 해당 컨피그 내용으로 적용한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chef-server-ctl reconfigure
</span></code></pre></td></tr></table></div></figure>


<p>이후 테스트해보면 끝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[edit vagrant box for vagrant-libvirt]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt/"/>
    <updated>2015-02-24T13:22:36+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/24/edit-vagrant-box-for-vagrant-libvirt</id>
    <content type="html"><![CDATA[<h1>check file</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>file trusty64_vagrant_box_image.img
</span><span class='line'>trusty64_vagrant_box_image.img: QEMU QCOW Image <span class="o">(</span>unknown version<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>init</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install -qqy lvm2
</span><span class='line'>modprobe nbd
</span></code></pre></td></tr></table></div></figure>


<h1>attach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /var/lib/libvirt/images
</span><span class='line'>qemu-nbd -c /dev/nbd0 <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/trusty64_vagrant_box_image.img
</span><span class='line'>vgscan
</span><span class='line'>vgchange -ay
</span><span class='line'>mount /dev/mapper/vagrant--vg-root /mnt
</span></code></pre></td></tr></table></div></figure>


<h1>detach</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /
</span><span class='line'>umount /mnt
</span><span class='line'>vgchange -an vagrant-vg
</span><span class='line'>qemu-nbd -d /dev/nbd0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NIC 1개로 compute node를 vlan type으로 neutron을 사용하여 구성하기 위한 팁]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/11/build-openstack-node-using-just-1-nic/"/>
    <updated>2015-02-11T17:12:39+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/11/build-openstack-node-using-just-1-nic</id>
    <content type="html"><![CDATA[<p>gre 같은 tunnel 을 사용한다면 NIC 하나로 구성 할 수 있겠지만 그게 아니라면 일반적으로는 management 용 NIC 한개와 service 용 NIC 한개가 필요하다.</p>

<p>우선 아래와 같은 상태가 2 NIC을 사용하는 일반적인 구성이다.</p>

<p>그림 처럼 eth0은 management를 위한 ip로 이용되며 eth1을 guest interface(vlan 이라면 0.0.0.0)로 사용할 수 있다.</p>

<p><img src="http://leoh0.github.io/images/1nic-neutron-1.png" width="449" height="487"></p>

<p>단도직입적으로 ethernet 한개로는 아래와 같이 구성하면 된다.</p>

<p>우선 eth0은 0.0.0.0 으로 ip를 사용안하는 대신 br0 부분에서 기존의 management용 ip를 가져간다.</p>

<p><img src="http://leoh0.github.io/images/1nic-neutron-2.png" width="449" height="487"></p>

<p>아래와 같은 흐름으로 진행하면 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># br0 switch 추가 (자동으로 br0 switch 에는 br0 interface가 달려있는 상태로 생성됨)</span>
</span><span class='line'>ovs-vsctl add-br br0
</span><span class='line'><span class="c"># br0 switch 에 eth0 interface를 추가 시켜줌</span>
</span><span class='line'>ovs-vsctl add-port br0 eth0
</span><span class='line'><span class="c"># ip 및 route 세팅</span>
</span><span class='line'>/sbin/ifconfig eth0 0.0.0.0 up
</span><span class='line'>/sbin/ifconfig br0 x.x.x.x/xx up
</span><span class='line'>
</span><span class='line'><span class="c"># br-eth0 인터페이스를 생성 (br-ex 도 비슷)</span>
</span><span class='line'>ovs-vsctl add-br br-eth0
</span><span class='line'><span class="c"># br0 switch와 br-eth0 을 연결 시킬 veth 생성</span>
</span><span class='line'>ip link add br0-veth <span class="nb">type </span>veth peer name br-eth0-veth
</span><span class='line'>ovs-vsctl add-port br0 br0-veth
</span><span class='line'>ovs-vsctl add-port br-eth0 br-eth0-veth
</span></code></pre></td></tr></table></div></figure>


<p>만약 network node 라면 br-eth0 대신 br-ex 를 사용하고 추가적으로 nat 를 사용하기 위한 ip 하나만 할당하면 된다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef 12: node attribute style problem - feature or bug?]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/05/chef-12-feature-or-bug/"/>
    <updated>2015-02-05T17:21:56+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/05/chef-12-feature-or-bug</id>
    <content type="html"><![CDATA[<p>chef 12 client를 이용하면서 기존 recipe 들을 사용중 갑자기 작동 안하는 문제가 있었다. <br/>
chef 12로 변화되며 추가된 기능인가 싶어 <a href="https://docs.chef.io/release_notes.html">chef 12 release note</a>를 뒤져보았지만 사실 관련된 부분을 찾지 못했다.</p>

<p>대략 현상은 아래와 같다..</p>

<figure class='code'><figcaption><span>chef12</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef</span> <span class="o">&gt;</span> <span class="n">attributes_mode</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="n">default</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">aa</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="ss">:haproxy</span><span class="o">][</span><span class="ss">:conf_dir</span><span class="o">]</span>
</span><span class='line'><span class="n">aa</span>
</span><span class='line'>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">bb</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="ss">:haproxy</span><span class="o">][</span><span class="ss">:conf_dir</span><span class="o">]</span>
</span><span class='line'><span class="n">aa</span>
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 <code>string</code>으로 된 hash와 <code>symbol</code>로 된 hash의 값이 merge가 안되는 문제이다.</p>

<p>chef 11까지는 아래와 같이 둘중 어떤 것을 사용해도 같은 변수로 관리됐다.</p>

<figure class='code'><figcaption><span>chef11</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef</span> <span class="o">&gt;</span> <span class="n">attributes_mode</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="n">default</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">aa</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="ss">:haproxy</span><span class="o">][</span><span class="ss">:conf_dir</span><span class="o">]</span>
</span><span class='line'><span class="n">aa</span>
</span><span class='line'>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;haproxy&#39;</span><span class="o">][</span><span class="s1">&#39;conf_dir&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">bb</span>
</span><span class='line'><span class="ss">chef</span><span class="p">:</span><span class="n">attributes</span> <span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">node</span><span class="o">[</span><span class="ss">:haproxy</span><span class="o">][</span><span class="ss">:conf_dir</span><span class="o">]</span>
</span><span class='line'><span class="n">bb</span>
</span></code></pre></td></tr></table></div></figure>


<p>옛날 부터 <a href="http://www.foodcritic.io/#FC019">foodcritic에서도 둘중에 한 포맷으로 정해서 사용하라는 룰</a>이 있었지만 정리를 안했더니 이런 일이 생긴건가 라고 반성을 하면서..
(사실 현재도 안돌리고 있긴한.. 안돌리다 돌리려니 너무 고칠게 많아서 차라리 리팩토링 하고 돌려야지 하다보니&hellip;.. ㅠㅠ)</p>

<p>그렇다면 어느쪽으로 style을 모는게 좋을까&hellip;??</p>

<h2>string vs symbol (for node attribute style)</h2>

<blockquote><p>개인적으로나 chef에서는 string을 선호</p></blockquote>

<p>물론 사실 개인적인 생각엔 아직까지도 어느정도 취향(?)의 영역이 있다.
foodcritic(chef lint tool)에서는 <a href="http://www.foodcritic.io/#FC001">string을 사용을 규정</a>하고는 있긴하다.
하지만 아래와 같이 빼고 사용하면 그만인 부분이다.</p>

<figure class='code'><figcaption><span>rule FC001</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>foodcritic -t ~FC001 .
</span></code></pre></td></tr></table></div></figure>


<p>그렇다면 사용자들이 선호하는 것은 어떨까? <br/>
아래와 같이 3종류의 attribute 사용법에 대한 <a href="https://www.evernote.com/shard/s5/sh/1fc5a0c9-bdd0-44f4-8f5a-ed2ddc9d2cfd/a13f36acd7cfa2a468f7829e5549209f">user survey</a>에 대한 조사는 아래와 같이 symbol이 우세하다.
<img src="http://leoh0.github.io/images/fc001-survey-20121029-144804.jpg" width="1524"></p>

<p>그리고 실제 <a href="https://github.com/bbatsov/ruby-style-guide">ruby style guide</a>에서도 물론 특정한 규정은 없어서.. <br/>
그렇다고 괜히 <code>string</code>을 선호하는 건 아니다. 자세한 이유는 <a href="https://github.com/acrmp/foodcritic/issues/1">여기1</a> <a href="https://github.com/acrmp/foodcritic/issues/86">여기2</a> 를 읽어 보면 도움이 될듯 하다.</p>

<h2>그래서 내 recipe를 지금이라도 당장 다 뜯어 고쳐야 하는건가요?</h2>

<blockquote><p>아니요</p></blockquote>

<p>위의 style 문제는 사실 feature가 아닌 bug 이다. (<a href="https://github.com/chef/chef/commit/097d5eb1bf4b3cbcc9bfc937c5e3441dee5c9f5c">이때 추가된..</a>)</p>

<p><a href="https://github.com/chef/chef/pull/2753">deep_merge_cache fixes for bugs in 12.0.0</a></p>

<p>22일 전에 이미 패치는 된 상태이나 chef 11에 대해 followup하느라 12.1.0이 나오질 않고 있는것 같다. <br/>
그렇기 때문에 chef-client를 12.0.0 이상으로 쓸 생각이라면 잠깐 보류하는게 좋을듯 하다.</p>

<p>하지만 이번 기회에 이런 문제를 야기 할 수 있는 <code>symbol</code>을 <code>string</code>으로 바꿔야 하지 않을까하는 교훈(?)을 주는 일이지 않을까 싶다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[make l2 network for vm without neutron]]></title>
    <link href="http://leoh0.github.io/blog/2015/02/02/make-l2-network-for-vm-without-neutron/"/>
    <updated>2015-02-02T09:20:23+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/02/02/make-l2-network-for-vm-without-neutron</id>
    <content type="html"><![CDATA[<p>우선 아래와 같은 컨피그를 이용할때..</p>

<h2>nova</h2>

<ul>
<li>linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver</li>
</ul>


<h2>neutron</h2>

<ul>
<li>type_drivers = vlan</li>
<li>mechanism_drivers = openvswitch</li>
<li>firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</li>
</ul>


<h2>1. 기본 상태:</h2>

<p>우선 실제 물리 머신에 아래와 같이 vm을 위한 ethernet인 eth1이 존재한다.</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-1.jpg" width="497" height="395"></p>

<h3>변수 생성</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">vmuuid</span><span class="o">=</span>9ee8db25-6a13-4ca8-8a4e-495db24492ca
</span><span class='line'><span class="nv">vlan</span><span class="o">=</span>2001
</span><span class='line'><span class="nv">localvlan</span><span class="o">=</span>1
</span><span class='line'><span class="nv">ip</span><span class="o">=</span><span class="k">$(</span>nova show <span class="nv">$vmuuid</span> <span class="p">|</span> grep <span class="s1">&#39; network&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">interfaceid</span><span class="o">=</span><span class="k">$(</span>neutron port-list <span class="p">|</span> grep <span class="s2">&quot;\&quot;$ip\&quot;&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">mac</span><span class="o">=</span><span class="k">$(</span>neutron port-list <span class="p">|</span> grep <span class="s2">&quot;\&quot;$ip\&quot;&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">ovsid</span><span class="o">=</span><span class="k">${</span><span class="nv">interfaceid</span><span class="p">:</span><span class="nv">0</span><span class="p">:</span><span class="nv">11</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 유저 생성 단계:</h2>

<p>eth1에 연결된 br-eth1 bridge를 생성한다.
또한 gre, vlan등의 다양한 type들의 네트워크를 연결시켜 줄 수 있는 br-int bridge를 생성한다.</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-2.jpg" width="497" height="395"></p>

<h3>user가 생성 필요</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --may-exist add-br br-eth1
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --may-exist add-port br-eth1 eth1
</span></code></pre></td></tr></table></div></figure>


<h2>3. neutron openvswitch plugin 시작:</h2>

<p>br-eth1과 br-int간의 bridge 연결을 위한 port를 생성하며 veth로 해당 port를 연결하고 해당 bridge에 기본적인 flow를 추가해 준다.</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-3.jpg" width="497" height="395"></p>

<h3>neutron - br-int setup</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --may-exist add-br br-int
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- <span class="nb">set</span>-fail-mode br-int secure
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --if-exists del-port br-int patch-tun
</span><span class='line'>ovs-ofctl del-flows br-int
</span><span class='line'>ovs-ofctl add-flow br-int <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>1,actions<span class="o">=</span>normal
</span><span class='line'>ovs-ofctl add-flow br-int <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>0,table<span class="o">=</span>22,actions<span class="o">=</span>drop
</span></code></pre></td></tr></table></div></figure>


<h3>neutron - physical bridge setup</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-ofctl del-flows br-eth1
</span><span class='line'>ovs-ofctl add-flow br-eth1 <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>1,actions<span class="o">=</span>normal
</span></code></pre></td></tr></table></div></figure>


<h3>neutron - int <-> phy setup</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --if-exists del-port br-int int-br-eth1
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --if-exists del-port br-eth1 phy-br-eth1
</span><span class='line'>ip link delete int-br-eth1
</span><span class='line'>ip link delete phy-br-eth1
</span><span class='line'>udevadm settle --timeout<span class="o">=</span>10
</span><span class='line'>ip link add int-br-eth1 <span class="nb">type </span>veth peer name phy-br-eth1
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --may-exist add-port br-int int-br-eth1
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> -- --may-exist add-port br-eth1 phy-br-eth1
</span><span class='line'><span class="nv">intport</span><span class="o">=</span><span class="k">$(</span>ovs-ofctl show br-int <span class="p">|</span> grep int-br-eth1 <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> cut -d<span class="s1">&#39;(&#39;</span> -f1<span class="k">)</span>
</span><span class='line'><span class="nv">phyport</span><span class="o">=</span><span class="k">$(</span>ovs-ofctl show br-eth1 <span class="p">|</span> grep phy-br-eth1 <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> cut -d<span class="s1">&#39;(&#39;</span> -f1<span class="k">)</span>
</span><span class='line'>ovs-ofctl add-flow br-int <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>2,in_port<span class="o">=</span><span class="k">${</span><span class="nv">intport</span><span class="k">}</span>,actions<span class="o">=</span>drop
</span><span class='line'>ovs-ofctl add-flow br-eth1 <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>2,in_port<span class="o">=</span><span class="k">${</span><span class="nv">phyport</span><span class="k">}</span>,actions<span class="o">=</span>drop
</span><span class='line'>ip link <span class="nb">set </span>int-br-eth1 up
</span><span class='line'>ip link <span class="nb">set </span>phy-br-eth1 up
</span></code></pre></td></tr></table></div></figure>


<h2>4. nova에서 인스턴스 생성:</h2>

<p>nova에서는 qbr bridge를 생성하며 해당 bridge에 qvb port를 생성하고 br-int에 qvo port를 생성하여 두 port를 veth로 연결한다.(xml에 관련해서 여기에서 생성된다.)</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-4.jpg" width="497" height="395"></p>

<h3>nova - instance up</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brctl addbr qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span>
</span><span class='line'>brctl setfd qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> 0
</span><span class='line'>brctl stp qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> off
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;0&#39;</span> &gt; /sys/class/net/qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span>/bridge/multicast_snooping
</span><span class='line'>
</span><span class='line'>ip link add qvb<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> <span class="nb">type </span>veth peer name qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span>
</span><span class='line'>ip link <span class="nb">set </span>qvb<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> up
</span><span class='line'>ip link <span class="nb">set </span>qvb<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> promisc on
</span><span class='line'>ip link <span class="nb">set </span>qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> up
</span><span class='line'>ip link <span class="nb">set </span>qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> promisc on
</span><span class='line'>
</span><span class='line'>ip link <span class="nb">set </span>qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> up
</span><span class='line'>brctl addif qbr<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> qvb<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span>
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">120</span> -- --if-exists del-port qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> -- add-port br-int qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> -- <span class="nb">set </span>Interface qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> external-ids:iface-id<span class="o">=</span><span class="k">${</span><span class="nv">interfaceid</span><span class="k">}</span> external-ids:iface-status<span class="o">=</span>active external-ids:attached-mac<span class="o">=</span><span class="k">${</span><span class="nv">mac</span><span class="k">}</span> external-ids:vm-uuid<span class="o">=</span><span class="k">${</span><span class="nv">vmuuid</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. neutron openvswitch plugin에서 ovsdb-client monitoring을 통한 풀링:</h2>

<p>br-int의 변화를 감지하여 해당 qvo port를 위한 vlan tagging을 해주며 이를 위한 flow를 br-int와 br-eth1에 추가한다.</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-5.jpg" width="497" height="395"></p>

<h3>neutron - instance up</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ovs-ofctl add-flow br-int <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>3,in_port<span class="o">=</span><span class="k">${</span><span class="nv">intport</span><span class="k">}</span>,dl_vlan<span class="o">=</span><span class="k">${</span><span class="nv">vlan</span><span class="k">}</span>,actions<span class="o">=</span>mod_vlan_vid:<span class="k">${</span><span class="nv">localvlan</span><span class="k">}</span>,normal
</span><span class='line'>ovs-ofctl add-flow br-eth1 <span class="nv">hard_timeout</span><span class="o">=</span>0,idle_timeout<span class="o">=</span>0,priority<span class="o">=</span>4,in_port<span class="o">=</span><span class="k">${</span><span class="nv">phyport</span><span class="k">}</span>,dl_vlan<span class="o">=</span><span class="k">${</span><span class="nv">localvlan</span><span class="k">}</span>,actions<span class="o">=</span>mod_vlan_vid:<span class="k">${</span><span class="nv">vlan</span><span class="k">}</span>,normal
</span><span class='line'>
</span><span class='line'>ovs-vsctl --timeout<span class="o">=</span><span class="m">10</span> <span class="nb">set </span>Port qvo<span class="k">${</span><span class="nv">ovsid</span><span class="k">}</span> <span class="nv">tag</span><span class="o">=</span><span class="k">${</span><span class="nv">localvlan</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6. vm 부팅:</h2>

<p>vm이 시작하면서  libvirt의 xml파일안에 정의 되어 있는 qbr bridge에 tap port가 생성되어서 vm까지 네트워크가 완성된다.(이 xml은 이미 4번 단계에서 완성되어 있다.)</p>

<p><img src="http://leoh0.github.io/images/neutron-nova-network-6.jpg" width="497" height="395"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ceph pg incomplete: rbd image-format 2 data recovery]]></title>
    <link href="http://leoh0.github.io/blog/2015/01/16/jiogyi-ceph-rbd-image-format-2-data-recovering/"/>
    <updated>2015-01-16T00:54:53+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/01/16/jiogyi-ceph-rbd-image-format-2-data-recovering</id>
    <content type="html"><![CDATA[<h2>ceph: pg incomplete is worst nightmare</h2>

<p><img src="http://a1.res.cloudinary.com/hqq9ey1mh/image/upload/c_limit,w_793/v1414983220/z3vn1zndif6v7q2u08w1.png" width="500" height="500" title="&#34;2014 open user survey block storage&#34;" alt="&#34;2014 open user survey block storage&#34;"></p>

<p><a href="http://superuser.openstack.org/articles/openstack-user-survey-insights-november-2014">2014년 유저 설문조사</a>에서 찾을 수 있듯이 <strong>ceph</strong>은 openstack의 block storage의 de facto standard 라고 말할 수 있다.</p>

<p>ceph을 사용한지 조금 되었지만 큰 문제가 한번도 없어서 일명 <strong>믿음의 ceph</strong>이라고 칭송하며 내부구조도 살필일 없이 블랙박스로 두고 잘 쓰고 있었었다.</p>

<p>하지만 근래에 급작스런 몇가지 문제로 ceph의 <code>placement group(pg)</code> 들이 <code>incomplete</code> 상태로 떨어졌고..</p>

<p>말그대로 절망했다.</p>

<p>왜냐하면 <code>incomplete</code> 상태로 떨어진 pg들이 절대 다른 상태로 돌아올수 없으며 해당 pg에 접근하는 모든 request는 slow request화 되며 응답을 주지 않는다. 그렇기 때문에 해당 pg가 있는 pool은 모든 request가 hang에 걸릴 수 있게 되어 pool 전체가 사용불능 상태로 변하게 된다.</p>

<h2>incomplete?</h2>

<p>조금 더 <code>incomplete</code>가 어떤 상태인지를 잠깐 이해해야 할것 같다. 우선 <code>incomplete</code>의 정의를 살펴보면 ceph documents의 <a href="http://ceph.com/docs/master/rados/operations/pg-states/">pg-states</a>에서 찾아볼 수 있다.</p>

<blockquote><p>Ceph detects that a placement group is missing a necessary period of history from its log.
If you see this state, report a bug, and try to start any failed OSDs that may contain the needed information.</p></blockquote>

<p>즉, 해당 pg 가 log에서 특정 부분 히스토리를 잃어 버렸을때 발생하는 것이고, 만약 이 일이 일어나면 해당 정보를 가지고 있을만한 실패한 OSD들을 시작하라고 설명이 되어 있다.(버그 리포트는 덤..)   <br/>
그래서 위의 설명처럼 <code>incomplete</code> 상태는 OSD를 중지했을때도 잠깐 발생할 수 있는데 여기서 말하는 <code>incomplete</code>는 그런게 아니라 무슨짓을 해도 다시 <code>incomplete</code>로 돌아오는 상태를 말한다..</p>

<p>이 의미를 조금 더 의미있게 해석하면 pg가 <code>incomplete</code> 상태로 떨어졌을때 <code>peering</code>을 할 수 있는 상태로 돌아오지 못한다는 것은 이미 복구 불가능한 pg가 생겼고 이는 복구 불가능한 조각이 생겼다는 것을 의미한다. <br/>
그러므로 전체 파일중 특정 조각이 문제가 되고 이 파일을 접근하는 모든 client request는 hang이 걸리게 된다. <br/>
볼륨같은 큰 데이터(많은 조각을 갖는 데이터)는 몇 개의 pg만 <code>incomplete</code>로 떨어져도 결국 모든 client의 request가 hang이 걸리게 된다.</p>

<p><img src="http://leoh0.github.io/images/ceph.png" width="1688" height="264" title="&#34;ceph logical flow&#34;" alt="&#34;ceph logical flow&#34;"></p>

<p>그러므로 <code>incomplete</code> 된 pg가 있으면 pool 전체를 사용할 수 가 없다.(pool을 초기화 하기 전까지..) <br/>
왜냐하면 어떠한 rbd object는 rados object로 분할되고 rados object들은 해당 pool에 분할 되어져서 들어간다. <br/>
해당 pool은 pg 들로 이루어 지는데 그중 한 pg 조각만 문제가 있어도 그 pg 조각에 들어간 한 rados object에 접근이 안되고 그렇기 때문에 rbd object 자체를 쓸수가 없게 되기 때문에 해당 pool을 쓸 수 없게 된다. <br/>
온갖 메일링 리스트와 구글에서 검색한 방법을 사용했지만 효과는 없었고 <br/>
다음에 이 상태로 빠지지 않을 수 있는 교훈만 얻을 수 있었다.</p>

<p>이 글을 보면 이게 얼마나 간단하지 않은 일인지 알게 된다.. <br/>
<a href="https://www.mail-archive.com/ceph-users@lists.ceph.com/msg15916.html">Ceph PG Incomplete = Cluster unusable</a></p>

<p>현재로서는 여기 <a href="http://tracker.ceph.com/issues/10098">feature 요청</a> 같이 데이터를 포기하더라도 pg를 재생성할 수 있는 기능이 추가되기를 기대해야 하는 상황이다. <br/>
(현재는 <code>ceph pg force_create_pg</code>를 사용해도 <code>creating</code> 상태에서 <code>incomplete</code> 상태로 되돌아 온다..)</p>

<p>물론 이상태까지 오게 하지 않는게 최선의 방법이지만 이미 이런 복구 불가능한 데이터가 생기면 <br/>
그리고 그 데이터가 볼륨인데 pg 한조각이 유실되면 해당 데이터를 사용할 수 없게 된다.(read write중 hang) <br/>
그렇기 때문에 결국 이런 볼륨을 살려내기 위해서는 강제로 볼륨 데이터를 <code>export</code>하고 이를 바탕으로 새로운 풀을 제작해서 다시 <code>import</code>할 수 밖에 없다.<br/>
물론 볼륨 데이터를 <code>export</code> 하면 hang이 걸려서 이 내용과 같이 특수한 방법이 필요하다.</p>

<p>그래서 오늘의 주제는 <code>incomplete</code> 와 같이 pool 전체를 사용할 수 없는 상태에서 최대한 데이터를 복구해 내는 방법을 소개하고자 한다.</p>

<h2>image format</h2>

<p>우선 이 방법을 이해하기 위해서는 기본적으로 <code>rbd image format</code>을 이해해야한다. <br/>
우선 <a href="http://blog.bit-isle.jp/bird/2014/06/10">Ceph 아키텍처 해설</a>에서 기본적인 지식을 습득할 수 있다. <br/>
우선 <code>rbd image format</code>의 종류는 아래와 같이 2가지 종류이고 위의 글에서 2가지 포맷의 제한점을 알 수 있다.</p>

<h3>rbd image format 1</h3>

<figure class='code'><figcaption><span>ceph/src/include/rbd_types.h</span><a href='https://github.com/ceph/ceph/blob/master/src/include/rbd_types.h#L36-46'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * old-style rbd image &#39;foo&#39; consists of objects</span>
</span><span class='line'><span class="cm"> *   foo.rbd      - image metadata</span>
</span><span class='line'><span class="cm"> *   rb.&lt;idhi&gt;.&lt;idlo&gt;.00000000</span>
</span><span class='line'><span class="cm"> *   rb.&lt;idhi&gt;.&lt;idlo&gt;.00000001</span>
</span><span class='line'><span class="cm"> *   ...          - data</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define RBD_SUFFIX       &quot;.rbd&quot;</span>
</span><span class='line'><span class="cp">#define RBD_DIRECTORY           &quot;rbd_directory&quot;</span>
</span><span class='line'><span class="cp">#define RBD_INFO                &quot;rbd_info&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>rbd image format 2</h3>

<figure class='code'><figcaption><span>ceph/src/include/rbd_types.h</span><a href='https://github.com/ceph/ceph/blob/master/src/include/rbd_types.h#L24-34'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* New-style rbd image &#39;foo&#39; consists of objects</span>
</span><span class='line'><span class="cm"> *   rbd_id.foo              - id of image</span>
</span><span class='line'><span class="cm"> *   rbd_header.&lt;id&gt;         - image metadata</span>
</span><span class='line'><span class="cm"> *   rbd_data.&lt;id&gt;.00000000</span>
</span><span class='line'><span class="cm"> *   rbd_data.&lt;id&gt;.00000001</span>
</span><span class='line'><span class="cm"> *   ...                     - data</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define RBD_HEADER_PREFIX      &quot;rbd_header.&quot;</span>
</span><span class='line'><span class="cp">#define RBD_DATA_PREFIX        &quot;rbd_data.&quot;</span>
</span><span class='line'><span class="cp">#define RBD_ID_PREFIX          &quot;rbd_id.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>우선 이글은 현재 사용중인 <code>rbd image format 2</code>의 포맷의 복구 방법에 대해서 설명할 계획이다.</p>

<h2>image format 2 분석</h2>

<p>만약 당신이 glance나 cinder를 사용중이라면 uuid 형태의 이름을 갖는 image와 volume들이 있을 것이다. <br/>
이 정보는 ceph rbd 안에서는 아래와 같이 조회 가능하다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rbd -p images ls</span>
</span><span class='line'>08909734-66fa-48e3-ab5e-2e2b8bb3a58c
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 image나 volume이 사용하고 있는 pool의 list를 조회해 보면 uuid 들이 나오는데 이 리스트 데이터들이 실제 image와 volume의 uuid 이다.
그렇다면 이런 image와 volume을 조회하면 다음과 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rbd -p images info 08909734-66fa-48e3-ab5e-2e2b8bb3a58c</span>
</span><span class='line'>rbd image <span class="s1">&#39;08909734-66fa-48e3-ab5e-2e2b8bb3a58c&#39;</span>:
</span><span class='line'>    size <span class="m">810</span> MB in <span class="m">102</span> objects
</span><span class='line'>    order <span class="m">23</span> <span class="o">(</span><span class="m">8192</span> kB objects<span class="o">)</span>
</span><span class='line'>    block_name_prefix: rbd_data.5a57484353d0cd
</span><span class='line'>    format: 2
</span><span class='line'>    features: layering
</span></code></pre></td></tr></table></div></figure>


<p>이 내용은 실제 rbd에 저장된 uuid의 데이터가 어떤지 정보를 보여주는데 <br/>
여기에서 <code>08909734-66fa-48e3-ab5e-2e2b8bb3a58c</code> 라는 uuid의 이미지는 <code>810 MB</code>의 크기를 가지며 <code>102</code>개의 조각이다. <br/>
그리고 <code>2**23=8192kB</code>의 크기로 쪼개져 있다. 즉, <code>810 MB</code>는 <code>약 8192kB * 102</code> 이다. <br/>
다음으로 <code>block_name_prefix: rbd_data.5a57484353d0cd</code>에서 <code>5a57484353d0cd</code>가 prefix 값이다. <br/>
format: 2 는 말그대로 image format 2 이고 features은 default값이다.</p>

<p>rbd는 rados object들로 이루어져 있으며 위의 정보를 바탕으로 아래와 같이 3종류의 object로 구성된다.</p>

<ul>
<li><strong>rbd_id.08909734-66fa-48e3-ab5e-2e2b8bb3a58c</strong></li>
<li><strong>rbd_header.5a57484353d0cd</strong></li>
<li><strong>rbd_data.5a57484353d0cd.0000000000000000 ~ rbd_data.5a57484353d0cd.0000000000000021 (102개)</strong></li>
</ul>


<h3>rbd_id.08909734-66fa-48e3-ab5e-2e2b8bb3a58c</h3>

<p>rbd_id.&lt;uuid> 파일을 다운받아서 열어보면 그 안에 <code>prefix</code> 값이 저장되어 있는 것을 알 수 있다. <br/>
저 값은 random 값이 들어 있어서 이 방법이 아니면 찾을 수가 없는 값이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat rbd_id.08909734-66fa-48e3-ab5e-2e2b8bb3a58c</span>
</span><span class='line'>5a57484353d0cd
</span></code></pre></td></tr></table></div></figure>


<h3>rbd_header.5a57484353d0cd</h3>

<p>rbd_header.&lt;prefix> 파일은 아무것도 내용이 없다. 실제 파일 내용이며 xattr 정보도 쓸만 한게 없다. <br/>
하지만 이정보는 파일로 관리하기 위해 존재하는 가상의 정보이지 실제는 leveldb에 저장되어 있다.(구버전은 테스트를 못해서 구버전엔 xattr을 썻을 지도..)
아무튼 이 안에서 features, object_prefix, order, size, snap_seq 를 뽑아 낼 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rados listomapvals -p images rbd_header.5a57484353d0cd</span>
</span><span class='line'>features
</span><span class='line'>value: <span class="o">(</span><span class="m">8</span> bytes<span class="o">)</span> :
</span><span class='line'><span class="m">0000</span> : <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>                         : ........
</span><span class='line'>object_prefix
</span><span class='line'>value: <span class="o">(</span><span class="m">27</span> bytes<span class="o">)</span> :
</span><span class='line'><span class="m">0000</span> : <span class="m">17</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">72</span> <span class="m">62</span> <span class="m">64</span> 5f <span class="m">64</span> <span class="m">61</span> <span class="m">74</span> <span class="m">61</span> 2e <span class="m">35</span> <span class="m">61</span> <span class="m">35</span> : ....rbd_data.5a5
</span><span class='line'><span class="m">0010</span> : <span class="m">37</span> <span class="m">34</span> <span class="m">38</span> <span class="m">34</span> <span class="m">33</span> <span class="m">35</span> <span class="m">33</span> <span class="m">64</span> <span class="m">30</span> <span class="m">63</span> <span class="m">64</span>                : 7484353d0cd
</span><span class='line'>order
</span><span class='line'>value: <span class="o">(</span><span class="m">1</span> bytes<span class="o">)</span> :
</span><span class='line'><span class="m">0000</span> : <span class="m">17</span>                                              : .
</span><span class='line'>size
</span><span class='line'>value: <span class="o">(</span><span class="m">8</span> bytes<span class="o">)</span> :
</span><span class='line'><span class="m">0000</span> : <span class="m">00</span> 8c a3 <span class="m">32</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>                         : ...2....
</span><span class='line'>snap_seq
</span><span class='line'>value: <span class="o">(</span><span class="m">8</span> bytes<span class="o">)</span> :
</span><span class='line'><span class="m">0000</span> : <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>                         : ........
</span></code></pre></td></tr></table></div></figure>


<h3>rbd_data.5a57484353d0cd.0000000000000000 ~ rbd_data.5a57484353d0cd.0000000000000021 (102개)</h3>

<p>실제 데이터이며 이 정보를 이어 붙이면 우리가 원하는 데이터를 얻을 수 있다. <br/>
하지만 이 정보 들은 존재하지 않는 파일들도 있을 수도 있다.(안쓰는 블럭부분의 오브젝트는 생성안되어 있음)
아무튼 뒤의 16진수 16자리 개수 만큼 데이터를 생성할 수 있다.
우리는 102개의 오브젝트 인걸 알고 있으니 0000000000000000 ~ 0000000000000021 까지해서 102개 이다.</p>

<h4>Q. 왜 <code>rados -p image ls</code> 같은 커맨드로 오브젝트의 정확한 리스트를 검사하지 않는가?</h4>

<p>만약 incomplete 상태가 되면 <code>rados ls</code> 같은 커맨드는 incomplete 인 pg 에 request 를 던지고 그 request는 hang이 되기때문에 응답을 받기가 힘들것이다.. <br/>
그렇기 때문에 이런 작업으로 실제 존재할 데이터를 추정해야 한다.</p>

<h2>작업 순서</h2>

<p>image나 volume 의 <code>uuid</code>이름과 <code>pool</code>의 이름을 알고 있으면 시작할 수 있다.</p>

<h3>1. pool 이름 -> pool 번호, pg 개수</h3>

<p>아래와 같은 정보에서 보면 <code>pool 35</code>와 <code>pg_num 512</code> 정보로 pool 번호가 <code>35</code>인것 그리고 pg 개수가 <code>512</code> 인것을 알 수 있다.
추가로 <code>object_hash rjenkins</code>로 <code>rjenkins</code> 해쉬를 사용함을 알 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ceph osd dump</span>
</span><span class='line'>...
</span><span class='line'>pool <span class="m">35</span> <span class="s1">&#39;images&#39;</span> replicated size <span class="m">2</span> min_size <span class="m">1</span> crush_ruleset <span class="m">0</span> object_hash rjenkins pg_num <span class="m">512</span> pgp_num <span class="m">512</span> last_change <span class="m">46681</span> flags hashpspool stripe_width 0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h3>2. rbd -p &lt;pool> info &lt;uuid> -> prefix, 파일 개수, 사이즈</h3>

<p>앞에서 한번 설명했지만 다시 정리하면 아래와 같은 상황에서 prefix는 <code>5a57484353d0cd</code> 파일 개수는 <code>102</code> 파일 사이즈는 <code>8192 kB</code> 이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># rbd -p images info 08909734-66fa-48e3-ab5e-2e2b8bb3a58c</span>
</span><span class='line'>rbd image <span class="s1">&#39;08909734-66fa-48e3-ab5e-2e2b8bb3a58c&#39;</span>:
</span><span class='line'>    size <span class="m">810</span> MB in <span class="m">102</span> objects
</span><span class='line'>    order <span class="m">23</span> <span class="o">(</span><span class="m">8192</span> kB objects<span class="o">)</span>
</span><span class='line'>    block_name_prefix: rbd_data.5a57484353d0cd
</span><span class='line'>    format: 2
</span><span class='line'>    features: layering
</span></code></pre></td></tr></table></div></figure>


<p>물론 incomplete pg에 해당 header가 들어 있다면.. 그 파일은 포기해야 한다.</p>

<h3>3. rbd_data.&lt;prefix>.&lt;seq> 파일 찾기</h3>

<p>실제 데이터는 rbd_data.&lt;prefix>.&lt;seq> 파일을 연결하면 복구 할 수 있다.
그렇다면 어떻게 저 파일들을 찾을 수 있을까..</p>

<p>우선 아래 커맨드로 찾을 수 있다. 저 아래정보에서 <code>-&gt;</code> 뒤편의 정보를 참고 하면 된다. <br/>
pg 35.9f6e4c67 는 35번 풀의 9f6e4c67 해쉬 값을 갖는 데이터를 말하며 <br/>
9f6e4c67 값이 rbd_data.b0e882ae8944a.0000000000000134 를 해쉬 한 값이다. <br/>
그렇다면 67은 무엇이냐면 9f6e4c67 를 pg_num으로 <code>modular</code> 연산 해서 나온 값이다. <br/>
우리는 실제 디렉토리는 35.67을 사용하니까 저 값을 알 고 있으면 된다. <br/>
또한 뒤의 up 3,11 에서 3번 osd 11번 osd가 가지고 있는 것을 알 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ceph osd map images rbd_data.b0e882ae8944a.0000000000000134</span>
</span><span class='line'>osdmap e53074 pool <span class="s1">&#39;images&#39;</span> <span class="o">(</span>35<span class="o">)</span> object <span class="s1">&#39;rbd_data.b0e882ae8944a.0000000000000134&#39;</span> -&gt; pg 35.9f6e4c67 <span class="o">(</span>35.67<span class="o">)</span> -&gt; up <span class="o">([</span>3,11<span class="o">]</span>, p3<span class="o">)</span> acting <span class="o">([</span>3,11<span class="o">]</span>, p3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>다만 <code>ceph osd map ..</code> 커맨드는 <code>ceph pg dump</code> 와 같은 pg를 뒤져야 하는 부분이 있기 때문에 느릴 수 있다. <br/>
이때문에 이 기능은 아래와 같이 pg dump에 대한 내용을 파일로 저장하고 아래 같이 해쉬 스크립트만 따로 돌리는게 훨씬 빠를 것이다.</p>

<p>아래 python코드는 ceph에서 사용하는 <a href="http://burtleburtle.net/bob/hash/evahash.html">robert jenkins hash</a> 를 <a href="http://stackoverflow.com/a/3611698">포팅</a>한 스크립트 이다. <br/>
물론 rjenkins hash 아니면 linux hash이나 기본이 rjenkins hash 이다.</p>

<figure class='code'><figcaption><span>rjhash.py</span><a href='https://gist.github.com/leoh0/aac0bb046c49a108c541'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&#39;&#39;&#39;Implements a straight Jenkins lookup hash - http://burtleburtle.net/bob/hash/doobs.html</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Usage: </span>
</span><span class='line'><span class="sd">    from jhash import jhash</span>
</span><span class='line'><span class="sd">    print jhash(&#39;My hovercraft is full of eels&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Returns: unsigned 32 bit integer value</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Prereqs: None</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Tested with Python 2.6.</span>
</span><span class='line'><span class="sd">Version 1.00 - der@dod.no - 23.08.2010</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Partly based on the Perl module Digest::JHash</span>
</span><span class='line'><span class="sd">http://search.cpan.org/~shlomif/Digest-JHash-0.06/lib/Digest/JHash.pm</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Original copyright notice:</span>
</span><span class='line'><span class="sd">    By Bob Jenkins, 1996.  bob_jenkins@burtleburtle.net.  You may use this</span>
</span><span class='line'><span class="sd">    code any way you wish, private, educational, or commercial.  It&#39;s free.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    See http://burtleburtle.net/bob/hash/evahash.html</span>
</span><span class='line'><span class="sd">    Use for hash table lookup, or anything where one collision in 2^^32 is</span>
</span><span class='line'><span class="sd">    acceptable.  Do NOT use for cryptographic purposes.</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mix</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;mix() -- mix 3 32-bit values reversibly.</span>
</span><span class='line'><span class="sd">For every delta with one or two bits set, and the deltas of all three</span>
</span><span class='line'><span class="sd">  high bits or all three low bits, whether the original value of a,b,c</span>
</span><span class='line'><span class="sd">  is almost all zero or is uniformly distributed,</span>
</span><span class='line'><span class="sd">* If mix() is run forward or backward, at least 32 bits in a,b,c</span>
</span><span class='line'><span class="sd">  have at least 1/4 probability of changing.</span>
</span><span class='line'><span class="sd">* If mix() is run forward, every bit of c will change between 1/3 and</span>
</span><span class='line'><span class="sd">  2/3 of the time.  (Well, 22/100 and 78/100 for some 2-bit deltas.)&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># Need to constrain U32 to only 32 bits using the &amp; 0xffffffff </span>
</span><span class='line'>    <span class="c"># since Python has no native notion of integers limited to 32 bit</span>
</span><span class='line'>    <span class="c"># http://docs.python.org/library/stdtypes.html#numeric-types-int-float-long-complex</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span><span class="p">;</span> <span class="n">b</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span><span class="p">;</span> <span class="n">c</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">a</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">a</span> <span class="o">^=</span> <span class="p">(</span><span class="n">c</span><span class="o">&gt;&gt;</span><span class="mi">13</span><span class="p">);</span> <span class="n">a</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">b</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">b</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">);</span> <span class="n">b</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">c</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">c</span> <span class="o">^=</span> <span class="p">(</span><span class="n">b</span><span class="o">&gt;&gt;</span><span class="mi">13</span><span class="p">);</span> <span class="n">c</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">a</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">a</span> <span class="o">^=</span> <span class="p">(</span><span class="n">c</span><span class="o">&gt;&gt;</span><span class="mi">12</span><span class="p">);</span> <span class="n">a</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">b</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">b</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">);</span> <span class="n">b</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">c</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">c</span> <span class="o">^=</span> <span class="p">(</span><span class="n">b</span><span class="o">&gt;&gt;</span><span class="mi">5</span><span class="p">);</span> <span class="n">c</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">a</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">a</span> <span class="o">^=</span> <span class="p">(</span><span class="n">c</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">);</span> <span class="n">a</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">-=</span> <span class="n">c</span><span class="p">;</span> <span class="n">b</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">b</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="mi">10</span><span class="p">);</span> <span class="n">b</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> <span class="n">c</span> <span class="o">-=</span> <span class="n">b</span><span class="p">;</span> <span class="n">c</span> <span class="o">^=</span> <span class="p">(</span><span class="n">b</span><span class="o">&gt;&gt;</span><span class="mi">15</span><span class="p">);</span> <span class="n">c</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">jhash</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">initval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;hash() -- hash a variable-length key into a 32-bit value</span>
</span><span class='line'><span class="sd">  data    : the key (the unaligned variable-length array of bytes)</span>
</span><span class='line'><span class="sd">  initval : can be any 4-byte value, defaults to 0</span>
</span><span class='line'><span class="sd">Returns a 32-bit value.  Every bit of the key affects every bit of</span>
</span><span class='line'><span class="sd">the return value.  Every 1-bit and 2-bit delta achieves avalanche.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="n">lenpos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># empty string returns 0</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Set up the internal state</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0x9e3779b9</span> <span class="c"># the golden ratio; an arbitrary value</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">initval</span>        <span class="c"># the previous hash value</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span>              <span class="c"># string offset</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ------------------------- handle most of the key in 12 byte chunks</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">12</span><span class="p">:</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">3</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">))</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">5</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">6</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">7</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">))</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">8</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">9</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">10</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">11</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">))</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">+=</span> <span class="mi">12</span>
</span><span class='line'>        <span class="n">lenpos</span> <span class="o">-=</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ------------------------- handle the last 11 bytes</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">+=</span> <span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">11</span><span class="p">:</span> <span class="n">c</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">10</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">:</span> <span class="n">c</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">9</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">9</span><span class="p">:</span>  <span class="n">c</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">8</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span>
</span><span class='line'>    <span class="c"># the first byte of c is reserved for the length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">8</span><span class="p">:</span>  <span class="n">b</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">7</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">7</span><span class="p">:</span>  <span class="n">b</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">6</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">:</span>  <span class="n">b</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">5</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">:</span>  <span class="n">b</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">:</span>  <span class="n">a</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">3</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">24</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>  <span class="n">a</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">16</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>  <span class="n">a</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">&lt;&lt;</span><span class="mi">8</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lenpos</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>  <span class="n">a</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ------------------------- report the result</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">hashstr</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">myhash</span> <span class="o">=</span> <span class="n">jhash</span><span class="p">(</span><span class="n">hashstr</span><span class="p">)</span>
</span><span class='line'>    <span class="n">myhash2</span> <span class="o">=</span> <span class="n">myhash</span> <span class="o">%</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;</span><span class="si">%x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">myhash2</span>
</span></code></pre></td></tr></table></div></figure>


<p>즉, 위와 같이 스크립트로 해슁하면 <code>rbd_data.b0e882ae8944a.0000000000000134</code> 값이 <code>67</code> 임을 찾을 수 있을 것이다.
35번 pool 임을 알고 있으니 35.67 pg 인것을 확인 가능하다.
아래 같이 <code>ceph pg dump</code> 는 파일로 저장해서 사용하는 것이 훨씬 빠를 것이다.. (물론 클러스터 변화를 주지 않는 상태에서.. )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ceph pg dump &gt; /tmp/pgdump # just once</span>
</span><span class='line'>
</span><span class='line'><span class="c"># cat /tmp/pgdump | grep ^35.67</span>
</span><span class='line'>dumped all in format plain
</span><span class='line'>35.67 0   0   0   0   0   2   2   active+clean    2015-01-15 06:48:51.979426  46681   53074:6358  <span class="o">[</span>3,11<span class="o">]</span>    0   <span class="o">[</span>3,11<span class="o">]</span>    0   46681   2015-01-15 06:48:51.979318  46681   2015-01-14 06:47:33.392701
</span></code></pre></td></tr></table></div></figure>


<p>그렇다면 실제 데이터는 어디에 저장될까..
대략 기본적으로 아래와 같은 경로에 저장된다.</p>

<p>ceph-3 의 <code>3</code>은 osd 번호이며 <br/>
<code>35.67</code>_head 는 위에서 계산한 hash 값에 pg_num으로 modular한 값이다. <br/>
<code>DIR_7</code> <code>DIR_6</code> <code>DIR_C</code> 는 뒤의 <code>9F6E4C67</code> 의 suffix 역순이다.(이 디렉토리는 파일 개수에 따라 생기고 없어질수도 있다.) <br/>
물론 <code>9F6E4C67</code>는 아까의 hash 값이다. <br/>
마지막 __<code>23</code> 은 pool 번호 35의 16진수 값이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/var/lib/ceph/osd/ceph-3/current/35.67_head/DIR_7/DIR_6/DIR_C/rbd<span class="se">\u</span>data.b0e882ae8944a.0000000000000134__head_9F6E4C67__23
</span></code></pre></td></tr></table></div></figure>


<p>중간에 DIR 과 같은 디렉토리가 들어가야 하기때문에 결국 이 파일을 찾으려면 find로 찾는게 간편하다.</p>

<h3>4. 파일 합치기</h3>

<p>아래와 같은 스크립트를 참고하면 편하다. 간단하게 파일번호로 offset 계산해서 합치는 스크립트 이다.    <br/>
해당 스크립트는 로컬에 있는 파일리스트를 조회해서 합치는 것임으로 위에서 미리 찾아서 한 폴더로 몰아놓으면 편하다.</p>

<figure class='code'><figcaption><span>rbd_restore.sh</span><a href='https://raw.githubusercontent.com/smmoore/ceph/master/rbd_restore.sh'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># AUTHORS</span>
</span><span class='line'><span class="c"># Shawn Moore &lt;smmoore@catawba.edu&gt;</span>
</span><span class='line'><span class="c"># Rodney Rymer &lt;rrr@catawba.edu&gt;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># REQUIREMENTS</span>
</span><span class='line'><span class="c"># GNU Awk (gawk)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># NOTES</span>
</span><span class='line'><span class="c"># This utility assumes one copy of all object files needed to construct the rbd</span>
</span><span class='line'><span class="c"># are located in the present working direcory at the time of execution.  </span>
</span><span class='line'><span class="c"># For example all the rb.0.1032.5e69c215.* files.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># When listing the &quot;RBD_SIZE_IN_BYTES&quot;, be sure you list the full potential size, </span>
</span><span class='line'><span class="c"># not just what it appears to be. If you do not know the true size of the rbd,</span>
</span><span class='line'><span class="c"># you can input a size in bytes that you know is larger than the disk could be</span>
</span><span class='line'><span class="c"># and it will be a large sparse file with un-partioned space at the end of the</span>
</span><span class='line'><span class="c"># disk.  In our tests, this doesn&#39;t occupy any more space/objects in the cluster</span>
</span><span class='line'><span class="c"># but the rbd could be resized from within the rbd (VM) to grow.  Once you bring</span>
</span><span class='line'><span class="c"># it up and are able to find the true size, you can resize with &quot;rbd resize ..&quot;.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># To obtain needed utility input information if not already known run:</span>
</span><span class='line'><span class="c"># rbd info RBD</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># To find needed files we run the following command on all nodes that might have</span>
</span><span class='line'><span class="c"># copies of the rbd objects:</span>
</span><span class='line'><span class="c"># find /${CEPH} -type f -name rb.0.1032.5e69c215.*</span>
</span><span class='line'><span class="c"># Then copy the files to a single location from all nodes.  If using btrfs be</span>
</span><span class='line'><span class="c"># sure to pay attention to the btrfs snapshots that ceph takes on it&#39;s own.</span>
</span><span class='line'><span class="c"># You may want the &quot;current&quot; or one of the &quot;snaps&quot;.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># We are actually taking our own btrfs snapshots cluster osd wide at the same</span>
</span><span class='line'><span class="c"># time with parallel ssh and then using &quot;btrfs subvolume find-new&quot; command to</span>
</span><span class='line'><span class="c"># merge them all together for disaster recovery and also outside of ceph rbd</span>
</span><span class='line'><span class="c"># versioning.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Hopefully once the btrfs send/recv functionality is stable we can switch to it.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This utility works for us but may not for you.  Always test with non-critical</span>
</span><span class='line'><span class="c"># data first.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Rados object size</span>
</span><span class='line'><span class="nv">obj_size</span><span class="o">=</span>4194304
</span><span class='line'>
</span><span class='line'><span class="c"># DD bs value</span>
</span><span class='line'><span class="nv">rebuild_block_size</span><span class="o">=</span>512
</span><span class='line'>
</span><span class='line'><span class="nv">rbd</span><span class="o">=</span><span class="s2">&quot;${1}&quot;</span>
</span><span class='line'><span class="nv">base</span><span class="o">=</span><span class="s2">&quot;${2}&quot;</span>
</span><span class='line'><span class="nv">rbd_size</span><span class="o">=</span><span class="s2">&quot;${3}&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${1}&quot;</span> <span class="o">=</span> <span class="s2">&quot;-h&quot;</span> -o <span class="s2">&quot;${1}&quot;</span> <span class="o">=</span> <span class="s2">&quot;--help&quot;</span> -o <span class="s2">&quot;${rbd}&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> -o <span class="s2">&quot;${base}&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> -o <span class="s2">&quot;${rbd_size}&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;USAGE: $(echo ${0} | awk -F/ &#39;{print $NF}&#39;) RESTORE_RBD BLOCK_PREFIX RBD_SIZE_IN_BYTES&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">base_files</span><span class="o">=</span><span class="k">$(</span>ls -1 <span class="k">${</span><span class="nv">base</span><span class="k">}</span>.* 2&gt;/dev/null <span class="p">|</span> wc -l <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">base_files</span><span class="k">}</span> -lt <span class="m">1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;COULD NOT FIND FILES FOR ${base} IN $(pwd)&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create full size sparse image.  Could use truncate, but wanted</span>
</span><span class='line'><span class="c"># as few required files and dd what a must.</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span><span class="k">${</span><span class="nv">rbd</span><span class="k">}</span> <span class="nv">bs</span><span class="o">=</span><span class="m">1</span> <span class="nv">count</span><span class="o">=</span><span class="m">0</span> <span class="nv">seek</span><span class="o">=</span><span class="k">${</span><span class="nv">rbd_size</span><span class="k">}</span> 2&gt;/dev/null
</span><span class='line'>
</span><span class='line'><span class="k">for</span> file_name in <span class="k">$(</span>ls -1 <span class="k">${</span><span class="nv">base</span><span class="k">}</span>.* 2&gt;/dev/null<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nv">seek_loc</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">file_name</span><span class="k">}</span> <span class="p">|</span> awk -F_ <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> awk -v <span class="nv">os</span><span class="o">=</span><span class="k">${</span><span class="nv">obj_size</span><span class="k">}</span> -v <span class="nv">rs</span><span class="o">=</span><span class="k">${</span><span class="nv">rebuild_block_size</span><span class="k">}</span> -F. <span class="s1">&#39;{print os*strtonum(&quot;0x&quot; $NF)/rs}&#39;</span><span class="k">)</span>
</span><span class='line'>  dd <span class="nv">conv</span><span class="o">=</span>notrunc <span class="k">if</span><span class="o">=</span><span class="k">${</span><span class="nv">file_name</span><span class="k">}</span> <span class="nv">of</span><span class="o">=</span><span class="k">${</span><span class="nv">rbd</span><span class="k">}</span> <span class="nv">seek</span><span class="o">=</span><span class="k">${</span><span class="nv">seek_loc</span><span class="k">}</span> <span class="nv">bs</span><span class="o">=</span><span class="k">${</span><span class="nv">rebuild_block_size</span><span class="k">}</span> 2&gt;/dev/null
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. mount 해서 테스트 해보기</h3>

<p>아래 와 같이 loop device 를 이용해서 mount 해본다. <br/>
하지만 partition 테이블이 망가져서 <code>/dev/mapper/loop0p1</code>를 못쓰고 그냥 <code>/dev/loop0</code> device로 mount 해야 할 수 도 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">v</span><span class="o">=</span><span class="s2">&quot;volume-uuid&quot;</span>
</span><span class='line'>losetup /dev/loop0 <span class="nv">$v</span>
</span><span class='line'>kpartx -a /dev/loop0
</span><span class='line'>mkdir -p /mnt/<span class="nv">$v</span>
</span><span class='line'>mount /dev/mapper/loop0p1 /mnt/<span class="nv">$v</span>
</span></code></pre></td></tr></table></div></figure>


<p>물론 들어가보면 엄청나게 많은 파일, 폴더들이 깨져 있으므로.. <code>fsck -y /mnt/$v</code> 와 같이 파일 시스템 체크를 돌려서 살려내는것이 필요하다.</p>

<h2>결론</h2>

<p>이런 정보를 바탕으로 우리는 3가지의 rados object들로 rbd 이미지를 재구성 할 수 있다. <br/>
하지만 이 방법은 운이 따라줘야 하는 부분들이 당연히 있다. <br/>
예를 들어 아래 pg 들이 망가지면 복구가 불가능 할 수도 있다.</p>

<ul>
<li>rbd_header 파일이 있는 pg</li>
<li>rbd_data에서 초반 super block이 있는 pg</li>
</ul>


<p>아무튼 이 글을 앞으로도 절망할 지 모르는 사람들을 위해 바친다.</p>

<h2>ps.</h2>

<p>마지막으로 firefly는 v0.80.8 package를 2015년 1월 13일에 release 했다. <br/>
업그레이드 하는게 좋을것이다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[이사]]></title>
    <link href="http://leoh0.github.io/blog/2015/01/15/isa/"/>
    <updated>2015-01-15T17:58:18+09:00</updated>
    <id>http://leoh0.github.io/blog/2015/01/15/isa</id>
    <content type="html"><![CDATA[<p><del><strong>RIP</strong> 20140404 <a href="https://leoh0.wordpress.com">https://leoh0.wordpress.com</a></del> <br/>
<del><strong>RIP</strong> 20150115 <a href="http://leoh0.blogspot.kr">http://leoh0.blogspot.kr</a></del></p>

<p>제일 처음 wordpress 블로그를 썼을때 다 만족스러웠지만 왠지 구글 검색에 노출되는 시간이 오래 걸리는 기분이 있었다.. <br/>
그래서 blogspot 으로 옮겨 갔으나.. <br/>
하지만 부족한 템플릿과 플러그인.. <br/>
그리고 소스 코드 삽입시 html 코드를 작성해야하는데 이게 너무 지저분해서 맘에 들지 않았다.</p>

<p>그래서 결국 소스 코드를 가장 이쁘게 보여 줄 수 있는 <a href="octopress.org">octopress</a>로..</p>
]]></content>
  </entry>
  
</feed>
