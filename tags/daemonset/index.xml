<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>daemonset on &gt; /dev/null</title>
    <link>https://leoh0.github.io/tags/daemonset/</link>
    <description>Recent content in daemonset on &gt; /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Oct 2018 01:42:33 +0900</lastBuildDate>
    
	<atom:link href="https://leoh0.github.io/tags/daemonset/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Prometheus Metric Aggregation by Daemonset, Statefulset, Deployment Walkthrough</title>
      <link>https://leoh0.github.io/post/2018-10-09-kubernetes-prometheus-metric-aggregation-by-daemonset-statefulset-deployment-walkthrough/</link>
      <pubDate>Tue, 09 Oct 2018 01:42:33 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2018-10-09-kubernetes-prometheus-metric-aggregation-by-daemonset-statefulset-deployment-walkthrough/</guid>
      <description>Kubernetes Aggregation Metrics
  kubernetes and prometheus 최근 kubernetes에서 metric을 관리하는 것중 가장 유명한 것은 prometheus라고 할 수 있습니다. metric 관리방법으로 heapster를 사용할때 까지는 influxdb를 많이 사용하는 추세 였으나 앞으로 대채될 metrics-server는 현재 in-memory sink밖에 없어서 우선 기존에 influxdb를 사용하던것을 많이 안쓰게 될것 같습니다. 더욱이 custom metric들에 대한 예제들이 prometheus로 제공되고 있어서 prometheus로 metric관리가 통합될것으로 기대하고 있습니다.
이러한 prometheus로 kubernetes metric들을 수집하는 것은 대체로 크게 2가지 케이스 입니다.</description>
    </item>
    
    <item>
      <title>Kubernetes dedicated node pattern for Daemonsets</title>
      <link>https://leoh0.github.io/post/2018-08-07-kubernetes-dedicated-node-pattern/</link>
      <pubDate>Tue, 07 Aug 2018 21:25:37 +0900</pubDate>
      
      <guid>https://leoh0.github.io/post/2018-08-07-kubernetes-dedicated-node-pattern/</guid>
      <description>deploy Daemonset to dedicated nodes k8s를 운영하다 보면 전용 노드를 사용할 필요성을 느낄때가 있습니다. 특정 기능을 수행하기 위해서 라던지 아니면 특정 포트를 hostport 혹은 hostnetwork등으로 독점적으로 사용하던지 등의 경우들입니다. 이럴땐 Deployment보다 Daemonset을 이용하면 노드당 1개의 pod을 띄우기 때문에 쉽게 해당 노드들에 특정 기능을 수행하게 할 수 있으나 Daemonset의 특성상 모든 node에 들어가게 되거나 아니면 내가 원하는 특수한 node에 들어가지 못하는 경우 들이 있습니다.
그래서 이런 경우를 해결하기 위한 가이드를 작성해 봤습니다.</description>
    </item>
    
  </channel>
</rss>